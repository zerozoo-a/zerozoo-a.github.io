{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "log4zerozoo-a",
	"language": "kr",
	"home_page_url": "https://zerozoo-a.github.io/",
	"feed_url": "https://zerozoo-a.github.io/feed/feed.json",
	"description": "not to day",
	"author": {
		"name": "zerozoo-a",
		"url": "NOP"
	},
	"items": [
		{
			"id": "https://zerozoo-a.github.io/blog/JAVA/List%EB%A1%9C%20%EA%B5%AC%ED%98%84%EB%90%9C%20queue%EC%9D%98%20%ED%8A%B9%EC%A7%95/",
			"url": "https://zerozoo-a.github.io/blog/JAVA/List%EB%A1%9C%20%EA%B5%AC%ED%98%84%EB%90%9C%20queue%EC%9D%98%20%ED%8A%B9%EC%A7%95/",
			"title": "List로 구현된 queue의 특징",
			"content_html": "<p>List로 구현된 queue는 iterable하다.\nList로 구현되어 있기 때문에 LinkedList를 사용 할 때와 같이 생성해주면 된다.</p>\n<p>단 구현된 method를 queue 처럼 사용하면 되는데 아래와 같이 사용하면 된다.</p>\n<p>offer는 추가,</p>\n<p>peek은 앞의 list를 확인만 하는 용도,</p>\n<p>poll은 꺼내어 사용하는 용도,</p>\n<p>size는 현재 총 남은 작업을 보여준다.</p>\n<p>foreach는 모두 소진되기 전에는 사용 할 수 있다.\npeek을 사용하며 돌기 때문에 queue를 소진시키진 않는다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>example</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LinkedList</span></span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Queue</span></span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Ex12_Queue</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> que <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token comment\">// LinkedList는 List&lt;E>, Queue&lt;E>를 동시에 구현해놓았다.</span><br><br>\t\tque<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Que에 item을 추가</span><br>\t\tque<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tque<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> i <span class=\"token operator\">:</span> que<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 모두 꺼내기 전에는 작동 함,</span><br>\t\t\t<span class=\"token comment\">// que를 소비하지 않음,</span><br>\t\t\t<span class=\"token comment\">// peek을 사용하는 것으로 보임</span><br>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"iterable \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"que의 사이즈를 확인\"</span> <span class=\"token operator\">+</span> que<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"다음에 무엇이 나올지 확인\"</span> <span class=\"token operator\">+</span>que<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 첫 번째 객체 꺼내기</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"que의 사이즈를 확인\"</span> <span class=\"token operator\">+</span> que<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t\t<span class=\"token comment\">// -------------</span><br><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"다음에 무엇이 나올지 확인\"</span> <span class=\"token operator\">+</span>que<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 두 번째 객체 꺼내기</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"que의 사이즈를 확인\"</span> <span class=\"token operator\">+</span> que<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t\t<span class=\"token comment\">// -------------</span><br><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"다음에 무엇이 나올지 확인\"</span> <span class=\"token operator\">+</span>que<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 세 번째 객체 꺼내기</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"que의 사이즈를 확인\"</span> <span class=\"token operator\">+</span> que<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t\t<span class=\"token comment\">// -------------</span><br><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"다음에 무엇이 나올지 확인\"</span> <span class=\"token operator\">+</span>que<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 없는 객체 꺼내기 null이 나옴</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"que의 사이즈를 확인\"</span> <span class=\"token operator\">+</span> que<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span><br><br><br>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> i <span class=\"token operator\">:</span> que<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 다 꺼내고 나서는 작동 안함</span><br>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"iterable\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></code></pre>\n",
			"date_published": "2023-05-28T21:33:53Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JAVA/JCF%EC%9D%98%20tree%20set%EC%9D%98%20%EB%B9%84%EA%B5%90%EC%97%B0%EC%82%B0%EC%9E%90%EB%A5%BC%20%EB%B0%94%EA%BE%B8%EA%B8%B0/",
			"url": "https://zerozoo-a.github.io/blog/JAVA/JCF%EC%9D%98%20tree%20set%EC%9D%98%20%EB%B9%84%EA%B5%90%EC%97%B0%EC%82%B0%EC%9E%90%EB%A5%BC%20%EB%B0%94%EA%BE%B8%EA%B8%B0/",
			"title": "JCF의 tree set의 비교연산자를 바꾸기",
			"content_html": "<p>요약: Comparator interface를 구현한 class를 TreeSet class의\n인자로 넣어주면 해당 TreeSet의 인스턴스는 연산자로\n주입된 Comparator class의 compare 메서드를 사용하게 된다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>example</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span></span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TreeSet</span></span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comparator</span></span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyStringComparator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token annotation punctuation\">@Override</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Ex10_Comparator</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><span class=\"token comment\">//\t\tSet&lt;String> tree = new TreeSet&lt;>();</span><br>\t\t<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> tree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyStringComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\ttree<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\ttree<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B23\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\ttree<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\ttree<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D789\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\ttree<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E0123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> tree<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token char\">'\\t'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></code></pre>\n",
			"date_published": "2023-05-28T17:57:26Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JAVA/java%20hash%20set/",
			"url": "https://zerozoo-a.github.io/blog/JAVA/java%20hash%20set/",
			"title": "java hash set",
			"content_html": "<p>java의 HashSet은 JCF 프레임워크에 소속되어 있다.</p>\n<p>HashSet의 강점은 Override 할 수 있는 hashCode와 equals를 제공한다는 점이다.\n이를 통해 고유한 class에 대해 hash set을 생성 할 수 있다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>example</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashSet</span></span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Ex02_Set</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ABC\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DEF\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HIJ\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"set size = 2\"</span> <span class=\"token operator\">+</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><br><br>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> s<span class=\"token operator\">:</span> set<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token char\">'\\t'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span><br><br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token annotation punctuation\">@Override</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token annotation punctuation\">@Override</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> age <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token annotation punctuation\">@Override</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"compare to\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>age <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></code></pre>\n<p>javascript에선 어떻게 해야 할 까?</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">const</span> hashSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> a1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> a2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>hashSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>hashSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>hashSet<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// a1 a1 Set이 예상과는 다르게 작동한다.</span></code></pre>\n<p>javascript는 prototype toolchain 언어이기 때문에 java를 그대로 따라하면 안된다.</p>\n<p>이런식으로 하자</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"hash_\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token class-name\">Set</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">addCustom</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">const</span> mySet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> obj3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>mySet<span class=\"token punctuation\">.</span><span class=\"token function\">addCustom</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>mySet<span class=\"token punctuation\">.</span><span class=\"token function\">addCustom</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>mySet<span class=\"token punctuation\">.</span><span class=\"token function\">addCustom</span><span class=\"token punctuation\">(</span>obj3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mySet<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></code></pre>\n<p>custom method를 생성해 chain에 연결해주는 것으로 끝난다.\n자바스크립트는 할 수 없는게 아니라 다른 방식일 뿐이다.</p>\n",
			"date_published": "2023-05-28T14:16:51Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JAVA/java%20bubble%20sort/",
			"url": "https://zerozoo-a.github.io/blog/JAVA/java%20bubble%20sort/",
			"title": "java bubble, insert sort",
			"content_html": "<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>example</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BubbleSort</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nums: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\tarr<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\tarr<span class=\"token punctuation\">[</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>example</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InsertSort</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><br>\t\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token function\">insertSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token comment\">/**<br>\t *<br>\t * j는 항상 외부 반복문인 i보다 하나 앞의 값을 가리킨다.<br>\t * j는 0보다 커야한다 (배열이므로),<br>\t * 하나 앞의 값인 j가 i보다 큰 경우 둘의 자리를 스왑한다.<br>\t */</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><br>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\ttemp <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> temp<span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\tnums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\tnums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n",
			"date_published": "2023-05-28T12:15:12Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/BROWSER/While%20handling%20an%20%60%3Ciframe%3E%60,%20I%20found%20out%20something/",
			"url": "https://zerozoo-a.github.io/blog/CS/BROWSER/While%20handling%20an%20%60%3Ciframe%3E%60,%20I%20found%20out%20something/",
			"title": "iframe을 다루면서 느낀 점",
			"content_html": "<p>회사 프로젝트로 iframe을 다루게 되면서 알게된 것들을 정리하겠습니다.</p>\n<p>iframe은 개인적으로 사용하는 걸 꺼리는 편입니다.\n이유는 무겁기 때문인데요, 브라우저 내부에 하나의 브라우저를 더 띄우는 것은\n자바스크립트 환경이 독립적으로 하나 더 생성된다는 말이기도 합니다.</p>\n<p>iframe에 대한 자세한 내용은 <a href=\"https://developer.mozilla.org/ko/docs/Web/HTML/Element/iframe\">MDN</a> 같은 문서를 찾아보는게 가장 정확하고 좋습니다. (혹은 ecmascript 문서)</p>\n<p>제가 느낀점 중에 가장 기록해두고 싶은 것은 iframe과 호스트의 이벤트 관계입니다.</p>\n<p>예를 들어 호스트의 html 태그에 대한 클릭 이벤트를 걸어놓았다고 가정합시다.</p>\n<p>이 때, iframe 내부의 텍스트에도 클릭 이벤트가 발동할까요?</p>\n<p>아래 예제의 HTML을 보시면 host에는 event를 걸어두고 iframe에는 걸어두지 않았습니다.</p>\n<p>iframe은 html &gt; iframe의 관계를 가지고 있어서 호스트의 이벤트도 발동 할 것이다! 라고 생각하면 안됩니다.</p>\n<script async=\"\" src=\"https://jsfiddle.net/zoo385/62xfc3pj/embed/js,html,css,result/dark/\"></script>\n<p>그럼 어떻게 이런 문제를 해결해야 할까요?\n바로 호스트에서 iframe내부에 접근하는 방법을 사용하는 것입니다.</p>\n<p><a href=\"https://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_iframe_contentdocument\">예시: w3schools</a></p>\n<p>위 예시를 보면 본인의 Domain 하에 있는 사이트라면 조작이 가능합니다. (CORS 에러에 무관한)</p>\n<p><strong>fiddle 예시 처럼 구글을 띄워놓고 내가 심어둔 이벤트가 발동하게끔 코드를 짜면 안됩니다.</strong></p>\n<p>(위 예시의 src 파일이 htm인 것은 무시하셔도 됩니다. (같은 뜻임))</p>\n",
			"date_published": "2023-05-20T01:22:40Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/PROBLEMS/PRINGTING_STARS/printing%20star%20stair%202%20and%20pyramid/",
			"url": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/PROBLEMS/PRINGTING_STARS/printing%20star%20stair%202%20and%20pyramid/",
			"title": "printing star stair 2",
			"content_html": "<p>좌우 반전인 계단을 만들어보자</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Stair2</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">int</span> rows <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> rows<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> rows <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token char\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-shell\" tabindex=\"0\"><code class=\"language-shell\">      *<br>     **<br>    ***<br>   ****<br>  *****<br> ******</code></pre>\n<p>여기서 잠깐 피라미드에 대해 설명하겠습니다.</p>\n<p>피라미드와 역방향 계단찍기는 아주 약간의 차이를 빼고는 거의 같은 코드입니다.</p>\n<p>바로 별찍기를 담당하는 반복문의 print 함수에 공백 문자가 하나 추가되었다는 것입니다.\n이는 역방향 계단을 피라미드로 바꿔놓습니다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Pyramid</span> <span class=\"token punctuation\">{</span><br><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">int</span> rows <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rows<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> rows <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"* \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<pre><code>_____* \n____* * \n___* * * \n__* * * * \n_* * * * * \n</code></pre>\n<img src=\"https://zerozoo-a.github.io/img/CuAK1gz2K8-600.webp\" width=\"100%\" height=\"auto\" alt=\"startable 예시 이미지\" loading=\"lazy\" decoding=\"async\">\n<p>이런 별찍기 문제를 푸는 경우 그림을 그려보는 것이 아주 좋은 풀이법이 됩니다.</p>\n<p>반복문이 중첩 구조를 이루고 있고,\n중첩 내부에 다시 반복문이 여러개 들어가기 시작하면 아무래도 머리속으로\n그려내기가 쉽지 않습니다. 🤯</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\">\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">int</span> rows <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rows<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> rows <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"* \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br></code></pre>\n<p>이런 코드만 보고 바로 이해를 한다는건 쉽지 않습니다.\n무엇을 뜻하는지도 모르겠고 변수명도 의미가 없기 때문이죠</p>\n<p>코드를 좀 수정해봅시다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\">\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">int</span> rows <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> row <span class=\"token operator\">&lt;</span> rows<span class=\"token punctuation\">;</span> row<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token comment\">// 빈칸을 찍는다.</span><br>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> empty <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> empty <span class=\"token operator\">&lt;=</span> rows <span class=\"token operator\">-</span> row<span class=\"token punctuation\">;</span> empty<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token comment\">// 별을 찍는다.</span><br>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> star <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> star <span class=\"token operator\">&lt;=</span> row<span class=\"token punctuation\">;</span> star<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"* \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token comment\">// 다 찍었으니 다음 줄로 넘어간다.</span><br>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span></code></pre>\n<p>이제 좀 보기가 편해졌을지 모르겠습니다. 반복문의 변수를 empty를 찍는 용도\nstar를 찍는 용도로 나누어 보았습니다.</p>\n<p>하지만 무엇보다 중요한건 왜 이런 함수가 나오는가? 입니다.</p>\n<img src=\"https://zerozoo-a.github.io/img/CuAK1gz2K8-600.webp\" width=\"100%\" height=\"auto\" alt=\"startable 예시 이미지\" loading=\"lazy\" decoding=\"async\">\n<p>다시 위 이미지를 보면 공백을 4개 찍습니다.\n4개는 어떻게 나온걸까요? 역계단의 공백 4개를 찍은 것과 같습니다.\n하지만 피라미드라 하면 이렇게 생각 할 수 있습니다.</p>\n<p>(공백은 설명시에 안좋으니 공백은 a로 별은 ⭐️로 찍겠습니다.)</p>\n<p>aa⭐️aa</p>\n<p>a⭐️⭐️⭐️a</p>\n<p>⭐️⭐️⭐️⭐️⭐️</p>\n<p>네 맞습니다. 이것도 피라미드입니다. 그냥 피라미드 모양이면 다 피라미드이죠</p>\n<p>그렇다면</p>\n<p>aaaa⭐️</p>\n<p>aaa⭐️a⭐️</p>\n<p>aa⭐️a⭐️a⭐️</p>\n<p>a⭐️a⭐️a⭐️a⭐️</p>\n<p>이것도 피라미드라고 할 수 있겠습니다.\n그것도 rows의 갯수만큼 나온 피라미드입니다.</p>\n<p>감사합니다.</p>\n",
			"date_published": "2023-05-19T23:30:13Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/PROBLEMS/PRINGTING_STARS/printing%20star%20stair%201/",
			"url": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/PROBLEMS/PRINGTING_STARS/printing%20star%20stair%201/",
			"title": "printing star stair 1",
			"content_html": "<p>계단을 만들어보자.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Stair</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">int</span> rows <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> rows<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token char\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-shell\" tabindex=\"0\"><code class=\"language-shell\">*<br>**<br>***<br>****<br>*****</code></pre>\n",
			"date_published": "2023-05-19T23:26:54Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/LOGIC/permutation/",
			"url": "https://zerozoo-a.github.io/blog/CS/LOGIC/permutation/",
			"title": "permutation",
			"content_html": "<p>nPr 계산</p>\n<p>3P2은 3개 중 2개를 뽑아 줄 세우는 경우의 수</p>\n<p>{1, 2, 3}중 2개를 뽑아 줄을 세우면</p>\n<p>{1, 2}를 뽑아 줄을 세울 수 있겠습니다.</p>\n<p>{1, 2}, {2, 1} 2개가 나왔습니다.</p>\n<p>{1, 3}도 2개가 나오겠죠\n{2, 3}도 2개가 나올 것입니다.</p>\n<p>이렇게 총 6개가 나오게 됩니다.</p>\n<p>공식은 3 * 2!이 됩니다.</p>\n<p>여기에 combination은 이를 2!으로 나누어 주는 것입니다.\nnCr이라고 씁니다.</p>\n<p>permutation을 계산하는 함수를 만들기 위해서는 중첩된 반복문을 돌게됩니다.</p>\n<p>예를 들어 {1, 2, 3}의 permutation을 계산하겠습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>a<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span><br>    a<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i1<span class=\"token operator\">!=</span>i2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            a<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i3<span class=\"token operator\">!=</span>i1 <span class=\"token operator\">&amp;&amp;</span> i3<span class=\"token operator\">!=</span>i2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i1<span class=\"token punctuation\">,</span>i2<span class=\"token punctuation\">,</span>i3<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>배열 [1, 2, 3]을 돌면서 경우의 수를 계산하기 위해서는\n첫번째 자리가 1이면서,\n두번째 자리가 2,\n세번째 자리가 3인 경우</p>\n<p>첫번째 자리가 1이면서,\n두번째 자리가 3,\n세번째 자리가 2인 경우</p>\n<p>이런식으로 배열을 순회하게 됩니다.</p>\n<p>if문에서 각 자리수가 중복되지 않게 해주는 것입니다.\n반복문을 그냥 두게 되면</p>\n<p>첫번째 자리가 1이면서,\n두번째 자리가 1,\n세번째 자리가 1인 경우를 계산하게 됩니다.</p>\n<p>이 경우를 건너뛰게 해주는 것이죠</p>\n<p>감사합니다.</p>\n",
			"date_published": "2023-05-14T19:51:54Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/LOGIC/p%20and%20q/",
			"url": "https://zerozoo-a.github.io/blog/CS/LOGIC/p%20and%20q/",
			"title": "p and q",
			"content_html": "<p>명제: 만약 0이 홀수라면, 2080년 월드컵은 미국에서 열린다.</p>\n<p>위 명제는 참일까 거짓일까?</p>\n<p>우선 0이 홀수가 아니다,\n2080년에 월드컵이 미국에서 열릴지도 모르지만 아닐 수도 있다.</p>\n<p>만약 0이 홀수라면, 2080년 월드컵은 미국에서 열린다.</p>\n<p>p이면 q이다. 라는 명제에서 p가 거짓이면 전체는 참이 된다.</p>\n<p>만약 0이 홀수면 2080년에 미국에서 월드컵이 열린다는게 참이라는 말이다.\n언뜻 보면 거짓으로 보이는데 이는 명백히 참이다.</p>\n<p>이를 이해하기 쉽게 문제를 다르게 변경해보자</p>\n<p>거짓이면 참이다 -&gt; 참 =&gt; 0 == 1(p)이면 1 == 1(q)이다. p와 무관하게 q는 참이다.</p>\n<p>참이면 참이다 -&gt; 참 =&gt; 0 == 0(p)이면 1 == 1(q)이다. 이는 p와 q가 모두 참이다.</p>\n<p>거짓이면 거짓이다 -&gt; 참 =&gt; 0 == 1(p)이면 1 == 2(q)이다. 이는 p와 q가 모두 거짓이므로 참이다.</p>\n<p>참이면 거짓이다 -&gt; 거짓 =&gt; 0 == 0(p)이면 1 == 2(q)이다. 이는 p가 참이고 q가 거짓이므로 거짓이다.</p>\n<p>p, q는 명제이고, p -&gt; q에서 거짓인 경우는 p가 참이고 q가 거짓인 경우밖에 없다.</p>\n<p>따라서 p -&gt; q가 거짓일 때,</p>\n<p>~p -&gt; q는 참인가 거짓인가</p>\n<ul>\n<li>거짓 -&gt; 거짓이므로 참이다.</li>\n</ul>\n<p>p v q는 참인가 거짓인가</p>\n<ul>\n<li>참 || 거짓이므로 참이다.</li>\n</ul>\n<p>q -&gt; p는 참인가 거짓인가</p>\n<ul>\n<li>거짓 -&gt; 참이므로 참이다.</li>\n</ul>\n<hr>\n<table class=\"AmHvQTiv\" data-v-82945452=\"\"><tbody data-v-82945452=\"\"><tr data-v-82945452=\"\"><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">논리 연결사</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">논리적 기능</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">종류</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">일상적 표현</div></td></tr><tr data-v-82945452=\"\"><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">¬</mi></mrow><annotation encoding=\"application/x-tex\">\\neg</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">¬</span></span></span></span><a class=\"E0TE-D5l\" href=\"https://zerozoo-a.github.io/blog/CS/LOGIC/p%20and%20q/\" data-v-82945452=\"\"><span id=\"rfn-3\" data-v-82945452=\"\"></span>[a]</a> 또는 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∼</mo></mrow><annotation encoding=\"application/x-tex\">\\sim</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">∼</span></span></span></span></div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">부정</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">부정문</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">~이 아니다(not ~).</div></td></tr><tr data-v-82945452=\"\"><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∧</mo></mrow><annotation encoding=\"application/x-tex\">\\wedge</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.55556em;vertical-align:0em;\"></span><span class=\"mord\">∧</span></span></span></span><a class=\"E0TE-D5l\" href=\"https://zerozoo-a.github.io/blog/CS/LOGIC/p%20and%20q/\" data-v-82945452=\"\"><span id=\"rfn-4\" data-v-82945452=\"\"></span>[a]</a> 또는 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">&amp;</mi></mrow><annotation encoding=\"application/x-tex\">\\&amp;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">&amp;</span></span></span></span></div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">연언</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">연언문</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">그리고, 그러나, 그럼에도 불구하고(and)</div></td></tr><tr data-v-82945452=\"\"><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∨</mo></mrow><annotation encoding=\"application/x-tex\">\\vee</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.55556em;vertical-align:0em;\"></span><span class=\"mord\">∨</span></span></span></span></div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">선언</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">선언문</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">또는(or)</div></td></tr><tr data-v-82945452=\"\"><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span></div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">단순함축</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">조건문</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">만일~이라면, ~(if~, then~)</div></td></tr><tr data-v-82945452=\"\"><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>←</mo></mrow><annotation encoding=\"application/x-tex\">\\leftarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">←</span></span></span></span></div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">단순동치</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">쌍조건문</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">~일 경우 그리고 그 경우에만 ~(if and only if<a class=\"E0TE-D5l\" href=\"https://zerozoo-a.github.io/blog/CS/LOGIC/p%20and%20q/\" data-v-82945452=\"\"><span id=\"rfn-5\" data-v-82945452=\"\"></span>[5]</a>)</div></td></tr></tbody></table>",
			"date_published": "2023-05-14T14:28:45Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/PROBLEMS/card/",
			"url": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/PROBLEMS/card/",
			"title": "card 문제",
			"content_html": "<img src=\"https://zerozoo-a.github.io/img/KdEBY0XTfb-600.webp\" width=\"100%\" height=\"auto\" alt=\"card 문제\" loading=\"lazy\" decoding=\"async\">\n<p>간단해보이지만 간단하지 않은 문제이다.</p>\n<p>주장: 카드의 앞면이 D인 경우 해당 카드의 반대면은 3이라고 주장</p>\n<p>카드를 최소한으로 뒤집어서 해당 주장이 타당하다는 것을 증명하려면 어떤 카드를 뒤집어야 하는가?\nD, F, 3, 7이라는 카드들 중에서 어떤 카드를 뒤집어야 주장을 증명 할 수 있을까</p>\n<p>우선 D를 뒤집어봐야 한다는데에 이견은 없을 것이다.\nD를 뒤집어 봐서 3이라면 주장은 참이다.</p>\n<hr>\n<p>그럼 F를 뒤집는건 어떨지 생각해보자.\nF를 뒤집어서 3인 경우엔 주장이 거짓이 되는가?\n아니다. F 뒤에 3이 와도 주장은 참이다.</p>\n<p>따라서 F를 뒤집어 볼 필요는 없다.</p>\n<p>여기서 F 뒤에 3이 있을 수 있지 않냐라고 할 수 있는데,\nF뒤에 3이 있어도 해당 주장이랑은 아무 상관이 없다.</p>\n<hr>\n<p>3을 뒤집어 보는건 어떨지 생각해보자.\n3을 뒤집어서 D일 경우 해당 주장은 참이다.\n하지만 D가 아닐경우는 어떨까?</p>\n<p>3 뒤에 무조건 D만 올 수 있다는 조건은 없다.\n3을 뒤집어 A인 경우에도 주장은 참이다.</p>\n<p>따라서 3도 뒤집어 볼 필요는 없다.</p>\n<hr>\n<p>7을 뒤집어 보는 것은 어떨까?</p>\n<p>7을 뒤집어서 앞면이 D인 경우 해당 주장은 거짓이 된다.\n3뒤에 D가 오는 경우는 주장에 의해 참이 되는데</p>\n<p>7뒤에 D가 오는 경우는 주장이 거짓임을 나타낸다.</p>\n<p>카드의 앞면이 D인 경우 뒷면은 3이여야 하는데\n뒷면인 7의 앞면이 D라면 주장의 모순이기 때문이다.</p>\n<p>따라서 정답은 D와 7이다.</p>\n",
			"date_published": "2023-05-12T23:18:00Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/BROWSER/deem%20effect%EB%A5%BC%20%EC%B2%98%EB%A6%AC%ED%95%98%EC%9E%90/",
			"url": "https://zerozoo-a.github.io/blog/CS/BROWSER/deem%20effect%EB%A5%BC%20%EC%B2%98%EB%A6%AC%ED%95%98%EC%9E%90/",
			"title": "deem effect를 처리하자",
			"content_html": "<div>\n<img alt=\"뭔가 사라지는 인간의 그림\" src=\"https://www.shutterstock.com/image-vector/concept-passing-time-man-who-260nw-1749497999.jpg\">  \n<a href=\"https://www.shutterstock.com/ko/search/disappear\">출처</a>\n</div>\n개인적인 일로 바쁜와중에 글을 써봅니다.\n<p>frontend 개발자라면 deem effect를 가끔 구현 할 일이 생깁니다.\n이번에 제가 effect를 구현하면서 마주한 문제와 해결 방법에 대해 작성해봅니다.</p>\n<p>해결은 framework에 관계없이 바닐라js만을 사용하겠습니다.</p>\n<p>browser 상에서 동작하는 것을 기본으로 합니다.</p>\n<p>deem이라는 것은 기본적으로 애니메이션을 동반하게 됩니다.</p>\n<iframe src=\"https://giphy.com/embed/AQRapWCgC7dThyVEYb\" width=\"480\" height=\"270\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen=\"\"></iframe><p><a href=\"https://giphy.com/gifs/bandainamco-dark-souls-dsr-remastered-AQRapWCgC7dThyVEYb\">via GIPHY</a></p>\n<p>어두웠다가 밝아지고 밝아졌다 어두워지는 등의 애니메이션이 들어가게 됩니다.</p>\n<p>deem이 없는 상태</p>\n<p>deem 처리가 된 상태</p>\n<p>deem을 종료하는 액션이 발생</p>\n<p>deem이 종료된 상태</p>\n<p>간략하게 4가지 스텝으로 나누고 이에 시간을 두어 이펙트를 주면 애니메이션이 되는 것이죠</p>\n<p>제가 마주한 문제는 바로 마지막 deem이 종료된 상태입니다.</p>\n<p>무엇이 문제일까요?</p>\n<p>바로 deem이 종료되면 해당 DOM은 더 이상 쓸모가 없기에 지워주려한다! 라는 점이 문제입니다.</p>\n<p>좀 더 자세히 설명하면</p>\n<p>deem의 종료 animation이 2초라고 가정합시다.\ndeem을 종료시키는 event가 발생하고 어떤 상태 값이 변경되면 해당 DOM을 DOM tree에서 지우려 합니다.</p>\n<p>보통 framework에서는 if 혹은 삼항연산자를 통해 해당하는 DOM을 지워주곤 합니다.</p>\n<p><strong>그럼 놀랍게도 animation이 끝나기도 전에 DOM이 삭제됩니다.</strong></p>\n<p>그렇습니다. js는 animation이 끝나고 DOM을 삭제하는 것이 아니라 의존하고 있는 상태값의 변경에 따라 DOM을 삭제합니다.</p>\n<p>CSS IN JS를 사용하거나 한다면 JS를 더 사용해 이를 해결 할 수도 있겠습니다. 혹은 timer등을 걸어두어도 해결이 가능하겠죠</p>\n<p>하지만 전 위 방법이 지저분하다는 느낌을 강하게 받았습니다.</p>\n<p>현재는 JS의 많은 framework들이 각자의 lifecycle 위에서 코드를 짜고 직접 DOM에 개입하는 것은 지양하도록 가이드합니다.</p>\n<p>맞습니다. DOM을 직접 건들게 되면 다른 개발자가 보기에 framework에서 가이드하는 패턴이 아닌 JS가 브라우저를 직접 조작하게 되는 것이니까요 코드의 일관성이 깨지게 됩니다.</p>\n<p>그건 그거고 우선 문제부터 해결해봅시다.</p>\n<p>문제의 해결 방법은 간단합니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> animated <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".animated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>animated<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"animationend\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Animation ended\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>바로 animationed를 사용하는 것입니다.\n특정 DOM node가 css의 특정 animation을 구독하고\nanimation이 종료되면 해당 소식을 전파받고 callback 함수를 실행합니다.</p>\n<p>이 방법은 DOM node에 직접 접근하여 이벤트를 등록하는 것입니다.</p>\n<blockquote>\n<p>DOM node에 이벤트가 발생했을 때 해당 callback을 실행시켜주면 그 때 원하는 DOM을 삭제해주세요\n그러면 animation이 종료된 후에 DOM노드가 삭제됨을 보장합니다.</p>\n</blockquote>\n<p>이제 이를 framework에 맞게 변경하면 되는데 react, vue같은 경우에는\n각 framework에서 제공하는 ref 함수가 존재합니다.\n해당 ref를 통해 DOM을 특정하고 위의 코드를 적절히 녹여내면 되겠습니다.</p>\n",
			"date_published": "2023-05-09T22:09:01Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/ETC/operator%20%3C%EC%9D%98%20%EC%84%B1%EC%A7%88/",
			"url": "https://zerozoo-a.github.io/blog/CS/ETC/operator%20%3C%EC%9D%98%20%EC%84%B1%EC%A7%88/",
			"title": "operator &lt;의 성질",
			"content_html": "<p>operator를 알게 모르게 자주 사용하는데\ncs에서 어떻게 이 operator를 사용하는지 보자. 아래는 js의 예제이다.</p>\n<p>다른 언어(c++)등은 이 operator overloading을 통해 해당 로직을 최적화 한다 ;;;;</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token number\">2</span><br><br>a <span class=\"token operator\">&lt;</span> a <span class=\"token comment\">// false 비반사성 (irreflexivity)</span><br>a <span class=\"token operator\">></span> a <span class=\"token comment\">// false 비대칭성 (asymmertry)</span><br><br><span class=\"token comment\">// a &lt; b가 참이고 b &lt; c가 참이면 a &lt; c가 참이다. 이는 전이성(transitivity)이라한다.</span><br><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> b <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">&lt;</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// true</span><br><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span><br><br><span class=\"token comment\">// a &lt; b, b &lt; a가 모두 거짓이면 a와 b는 같은 값으로 간주한다 (숫자 한정)</span><br>a <span class=\"token operator\">&lt;</span> b <span class=\"token comment\">// false</span><br>b <span class=\"token operator\">></span> a <span class=\"token comment\">// false</span><br>a <span class=\"token operator\">==</span> b <span class=\"token comment\">// 간주한다</span><br><br><span class=\"token comment\">// a == b &amp;&amp; b == c 이므로 a == c라 한다. 이는 상등 관계의 전이성(transitivity of equivalence)</span></code></pre>\n",
			"date_published": "2023-05-03T23:05:33Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/SEARCH/binarySearch%20JS/",
			"url": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/SEARCH/binarySearch%20JS/",
			"title": "leetcode 704. binarySearch",
			"content_html": "<p>JS버전의 binary search</p>\n<p><code>binarySearch</code> = 재귀</p>\n<p><code>binarySearch2</code> = 반복문</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">binarySearch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">let</span> mid <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">>=</span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">return</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">return</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> answer <span class=\"token operator\">=</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">answer: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>answer<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">/**<br> * <br> * @param {number[]} arr <br> * @param {number} x <br> * @returns <br> */</span><br><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">binarySearch2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><br><br>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">let</span> mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><br><br>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> mid <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <br>      left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>      right <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><br>  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">const</span> answer2 <span class=\"token operator\">=</span> <span class=\"token function\">binarySearch2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">answer2: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>answer2<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></code></pre>\n",
			"date_published": "2023-04-25T15:15:05Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/SEARCH/findMaxDivideAndConquer/",
			"url": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/SEARCH/findMaxDivideAndConquer/",
			"title": "findMax divide and conquer",
			"content_html": "<p>전형적인 트리 구조의 재귀형 문제이다.</p>\n<p>그리디하게 문제를 풀어낼 수 있지만,\n해당 방법 이외의 방법으로 O(nlogn)의 속도를 내는 방법은\n아래와 같이 재귀적으로 배열을 쪼개 들어가면서 가장 큰 값을 찾아 올려주는 것이다.</p>\n<p>js는 꼬리재귀 최적화를 안해주므로 알아서 최적화를 해야한다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">/**<br> *<br> * @param {number[]} arr<br> * @param {number} start<br> * @param {number} end<br> */</span><br><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">max</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">===</span> end<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">const</span> mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">const</span> leftMax <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">const</span> rightMax <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftMax <span class=\"token operator\">></span> rightMax<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> leftMax<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> rightMax<span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">71</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span><br>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 71</span></code></pre>\n",
			"date_published": "2023-04-24T23:04:46Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/OPTIMIZATION/TOC%20in%20kotlin/",
			"url": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/OPTIMIZATION/TOC%20in%20kotlin/",
			"title": "TOC in kotlin",
			"content_html": "<pre class=\"language-kt\" tabindex=\"0\"><code class=\"language-kt\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">fac</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">fac2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">tailrec</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">fac</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> output<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int<span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> output<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">else</span> <span class=\"token function\">fac</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> output <span class=\"token operator\">*</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">fun</span> <span class=\"token function\">fac2</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> output<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> _num <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">var</span> _output <span class=\"token operator\">=</span> output<span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>_num <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        _output <span class=\"token operator\">*=</span> _num<span class=\"token punctuation\">;</span><br>        _num <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> _output<br><span class=\"token punctuation\">}</span></code></pre>\n",
			"date_published": "2023-04-21T15:17:42Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/SEARCH/leetcode%20704.%20binarySearch/",
			"url": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/SEARCH/leetcode%20704.%20binarySearch/",
			"title": "leetcode 704. binarySearch",
			"content_html": "<pre class=\"language-md\" tabindex=\"0\"><code class=\"language-md\">Given an array of integers nums <br>which is sorted in ascending order,<br>and an integer target, <br>write a function to search target in nums.<br>오름차순으로 정렬된 배열과 배열에서 찾으려는 숫자를 입력으로 받는다.<br> <br>If target exists, then return its index. <br>Otherwise, return -1.<br>You must write an algorithm <br>with O(log n) runtime complexity.<br><br>있으면 index 값을 없으면 -1을 반환하라.<br>제한은 O(log n) runtime complexity를 가진다.</code></pre>\n<pre class=\"language-md\" tabindex=\"0\"><code class=\"language-md\"><span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">Example 1:</span><span class=\"token punctuation\">**</span></span><br><br><span class=\"token code-snippet code keyword\">`Input: nums = [-1,0,3,5,9,12], target = 9`</span><br><span class=\"token code-snippet code keyword\">`Output: 4`</span><br><br>Explanation: 9 exists in nums and its index is 4<br>Example 2:<br><br>Input: nums = [-1,0,3,5,9,12], target = 2<br>Output: -1<br>Explanation: 2 does not exist in nums so return -1</code></pre>\n<pre class=\"language-kts\" tabindex=\"0\"><code class=\"language-kts\"><span class=\"token comment\">// 해답코드는 아래와 같다</span><br><span class=\"token keyword\">import</span> kotlin<span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">.</span>floor<br><span class=\"token keyword\">class</span> Solution <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">fun</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">:</span> IntArray<span class=\"token punctuation\">,</span> target<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">var</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">var</span> right <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>        <br>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">var</span> pivot <span class=\"token operator\">=</span> <span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>pivot<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">return</span> pivot<span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br><br>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>pivot<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                left <span class=\"token operator\">=</span> pivot <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br><br>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>pivot<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                right <span class=\"token operator\">=</span> pivot <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>위 문제의 핵심은 정렬 되어진 값을 받는다는 것이다.</p>\n<p>정렬이 이미 오름차순으로 되어 있기 때문에 오름차순 정렬을 적극 활용하면 된다.</p>\n<p>처음 입력받은 배열의 0번째 인덱스를 <code>left</code> 배열의 마지막 인덱스를 <code>right</code>라고 정의하자.\n배열의 중앙값을 찾아내어야 하는데 실수 범위로 확장되므로 이를 적절히 수정해주도록 하자.\n이는 배열의 중앙을 나타내는 <code>pivot</code>이라 하겠다.</p>\n<p>중앙 값을 찾아내었는데 해당 값이 찾고 있는 target 값이 맞다면 반환하고 끝.</p>\n<p>중앙 값이 target 값 보다 크다면 <code>right</code> 포인터를 중앙값 - 1 만큼 옮겨준다.</p>\n<p><code>[1, 2, 3, 4, 5]</code> 이러한 배열이 있을 때 현재 <code>pivot</code>은 3 찾는 값이 2라고 하자.\n<code>right</code>포인터는 5에 가있으므로 <code>right</code>포인터는 2까지 이동해주면 된다.</p>\n<p>이제 제외 되어진 값들을 빼면 <code>[1, 2]</code>가 남게 된다. 반복문이 돌면서 답을 찾게 된다.</p>\n<p>이렇게 찾는 범위를 반씩 툭툭 잘라 버리기 때문에 O(log n)이라는 효율이 나올 수 있다.\nc like언어들은 전부 위의 방법을 통해 문제를 풀 수 있다.</p>\n",
			"date_published": "2023-04-21T00:15:42Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/DATA_STRUCTURE/TREE/recursive_traversal/",
			"url": "https://zerozoo-a.github.io/blog/CS/DATA_STRUCTURE/TREE/recursive_traversal/",
			"title": "재귀 순회를 통해 트리 구조 돌아다니기 (recursive)",
			"content_html": "<p>~ 재미있는 재귀순회 이야기 ~</p>\n<p>재귀 순회는 구현이 매우 간단하다는 장점이 있다.</p>\n<p>작은 크기의 트리라면 이정도의 구현만으로 쉽게 구현이 가능하다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">N</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span> left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">/**<br> * <br> * @param {N} root <br> * <br> * 전위 순회는 루트 -> 왼쪽 자식 -> 오른쪽 자식 순으로 순회한다.<br> * <br> * 순회의 포인트는 왼쪽 자식이 없다면 오른쪽 자식으로 점프하는게 아닌,<br> * 왼쪽 자식이 없으므로 node의 오른쪽 자식을 재귀 함수의 인자로 넣는다는 것이다.<br> * 재귀 함수는 매번 해당 함수를 노드의 뿌리로 인식하기 때문에 왼쪽과 오른쪽 자식을<br> * 재귀호출하게 된다.<br> */</span><br><span class=\"token keyword\">function</span> <span class=\"token function\">preOrderTraversal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><br><br>  <span class=\"token keyword\">function</span> <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br><br>    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br>  <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">/*<br>    1<br>   /  \\<br>  2    3<br> /  \\    <br>4    5 <br> */</span><br><br><span class=\"token keyword\">function</span> <span class=\"token function\">postOrderTraversal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">function</span> <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br>  <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">function</span> <span class=\"token function\">inOrderTraversal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">function</span> <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">const</span> tree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"🚀 ~ file: preorderTraversal.js:24 ~ tree:\"</span><span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">)</span><br><span class=\"token comment\">/*<br>    1<br>   /  \\<br>  2    3<br> /  \\    <br>4    5 <br><br>뿌리 -> 왼쪽 -> 오른쪽<br><br>결과: 1 > 2 > 4 > 5 > 3<br>구조: root(1) == 1 -> root(1).left == 2 -> root(1).left.left == 4 -> root(1).left.right == 5 -> root(1).right == 3<br> */</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">preOrderTraversal</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, 4 ,5 ,3]</span><br><span class=\"token comment\">/*<br>    1<br>   /  \\<br>  2    3<br> /  \\    <br>4    5 <br><br>왼쪽 -> 오른쪽 -> 뿌리<br><br>결과: 4 > 5 > 2 > 3 > 1<br>구조: root(1).left.left == 4 -> root(1).left.right == 5 -> root(1).left == 2 -> root(1).right == 3 -> root(1) == 1<br> */</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">postOrderTraversal</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [4, 5, 2, 3, 1]</span><br><br><span class=\"token comment\">/*<br>    1<br>   /  \\<br>  2    3<br> /  \\    <br>4    5 <br><br>왼쪽 -> 뿌리 -> 오른쪽<br><br>결과: 4 > 2 > 5 > 1 > 3<br> */</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">inOrderTraversal</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span><br><br></code></pre>\n",
			"date_published": "2023-04-19T14:20:00Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/DATA_STRUCTURE/TREE/Tree_preorder/",
			"url": "https://zerozoo-a.github.io/blog/CS/DATA_STRUCTURE/TREE/Tree_preorder/",
			"title": "Tree preorder (stack)",
			"content_html": "<p>~ 재미있는 전위순회 이야기 ~</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">N</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">/**<br> * @param {N} root <br> * @returns <br> * <br> */</span><br><span class=\"token keyword\">function</span> <span class=\"token function\">preorderTraversal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span><br>  <span class=\"token punctuation\">}</span><br>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>root<span class=\"token punctuation\">.</span>val<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><br>  <span class=\"token function\">preorderTraversal</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><br>  <span class=\"token function\">preorderTraversal</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">/**<br> * @param {N} root<br> * <br> * stack: [N{root}]<br> * root 노드가 왼쪽 자식 오른쪽 자식이 존재한다면<br> * <br> * 오른쪽 자식 노드를 stack에 push하고 <br> * 왼쪽 자식 노드를 stack에 push하면<br> * <br> * 왼쪽 자식 노드가 항상 stack의 위쪽에 위치하게 된다.<br> * stack: [N{오른쪽 자식}, N{왼쪽 자식}]<br> * 위와 같은 형태로 stack은 쌓이게 된다.<br> * <br> * 이제 반복문이 실행되면서 stack을 pop하게 되면 왼쪽 자식은 pop 되고<br> * node = N{왼쪽 자식}이 된다. 이 상태로 다시 push를 하게 되면<br> * <br> * stack: [N{오른쪽 자식}, N{왼쪽 자식의 오른쪽 자식}, N{왼쪽 자식의 왼쪽 자식}]<br> * 이를 반복하게 되는데 참으로 영리한 것이 pop은 O(1)연산으로 매우 빠르고<br> * pop을 통해 계속 valuable한 왼쪽 자식을 DFS로 계속 찾아간다는 것이다.<br> * <br> * 또한 읽는 재미가 있다. (이해하기 위해선 잠깐 멈춰서 생각해야 하지만)<br> * 더군다나 한 메모리 주소를 반복적으로 쓰고 지우기만 하기 때문에 메모리 효율성과 stack이 넘쳐 망해버릴 일이 없다는 것이 좋다.<br> */</span><br><span class=\"token keyword\">function</span> <span class=\"token function\">preorderTraversal2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><br><br>  <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><br>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">}</span>  <br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><br>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><br>root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><br>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><br>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">/*<br>      1<br>     / \\<br>    2   3<br>   / \\<br>  4   5<br>*/</span><br><br><span class=\"token function\">preorderTraversal</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><br><span class=\"token function\">preorderTraversal2</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><br></code></pre>\n",
			"date_published": "2023-04-19T14:00:28Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/DATA_STRUCTURE/TREE/Tree_inorder/",
			"url": "https://zerozoo-a.github.io/blog/CS/DATA_STRUCTURE/TREE/Tree_inorder/",
			"title": "Tree inorder (stack)",
			"content_html": "<p>~ 재미있는 중위순회 이야기 ~</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">N</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span> left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">/**<br> * @param {N} root <br> * <br> *     1<br> *    / \\<br> *   2   3<br> *      /  \\<br> *     4    5<br> * <br> *  2 -> 1 -> 4 -> 3 -> 5<br> * <br> * tree가 이렇게 생겼다고 가정하자<br> * <br> * 중위순회는 왼쪽 -> 루트 -> 오른쪽 순으로 탐색하는 것을 의미한다.<br> * 위의 트리를 기준으로 중위 순회를 거쳐 나온 답은 [2, 1, 4, 3, 5]가 나오면 된다.<br> * <br> * 이렇게 만들기 위해서는 두 가지가 필요하다.<br> * <br> * 1. 분석의 대상인 Binary Tree<br> * 2. 값을 저장 할 stack<br> * <br> * tree와 stack은 궁합이 좋다.<br> * <br> * 과정을 수행 할 함수는 tree의 루트부터 탐색을 시작한다.<br> * <br> * currentNode를 stack에 push하고<br> * currentNode = currentNode.left로 currentNode를 계속 초기화 한다.<br> * tree의 왼쪽 자식의 끝까지 도달하면 자식 node들이 null이므로 왼쪽 자식을 찾아<br> * 내려가는 프로세스는 중단된다.<br> * <br> * 마지막 유효한 값이 있는 왼쪽 자식은 stack에 저장되어 있게 된다.<br> * 해당 stack을 pop하면서 값을 꺼내 result에 push한다.<br> * currentNode를 currentNode의 오른쪽 자식으로 초기화 한다. <br> * <br> * 위 트리를 예로 들면 2의 왼쪽 자식이 null이므로 stack에서 꺼낼 준비가 되었다.<br> * stack에서 2가 든 node를 꺼내어 값을 result에 밀어넣고 currentNode를 오른쪽 자식으로<br> * 초기화한다.<br> * <br> * 하지만 오른쪽 자식도 null이다.<br> * <br> * 오른쪽 자식도 null이므로 stack을 다시 pop해 루트를 꺼내온다.<br> * pop하면서 꺼내온 루트의 값을 result에 밀어넣고 currentNode를 오른쪽 자식으로 초기화한다.<br> * 오른쪽 자식으로 초기화하면서 루트의 오른쪽 자식의 하위 트리의 왼쪽 자식부터 위의 과정을 반복하게 된다.<br> */</span><br><span class=\"token keyword\">function</span> <span class=\"token function\">inOrderTraversal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><br><br>  <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><br>  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><br>  <span class=\"token keyword\">let</span> currentNode <span class=\"token operator\">=</span> root<br><br>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> currentNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">)</span><br>      currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>left<br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>      currentNode <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>      result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><br>      currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>right<br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token keyword\">return</span> result<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">/* <br>      1<br>     / \\<br>    2   3<br>       /  \\<br>      4    5<br>*/</span><br><span class=\"token keyword\">const</span> tree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><br>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><br>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>          <span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">inOrderTraversal</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n",
			"date_published": "2023-04-18T15:02:24Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/BOOKS/JONGMAN/%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4_%EA%B3%BC%EC%A0%95%EC%9D%84_%EB%82%98%EB%88%84%EC%9E%90/",
			"url": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/BOOKS/JONGMAN/%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4_%EA%B3%BC%EC%A0%95%EC%9D%84_%EB%82%98%EB%88%84%EC%9E%90/",
			"title": "문제풀이 과정을 나누자",
			"content_html": "<p>종만북에서는 문제 풀이 과정을 나누길 강력하게 권장한다.</p>\n<p>이유는 단순하다.</p>\n<p>우선 알고리즘 문제는 보통 어렵고 지문 자체를 이해하는데 많은 시간이 걸릴 수 있다.\n따라서 당황하기 쉽다.</p>\n<p>당당하게 문제에 맞서기 위해서는 문제를 통과해 답에 접근하기까지 순서가 필요하다.</p>\n<ol>\n<li>\n<p>문제를 읽고 이해한다.</p>\n<ul>\n<li>많은 경우가 문제를 잘못 이해하고 쉐도우 복싱을 하는 경우가 많다. 이를 방지하자</li>\n</ul>\n</li>\n<li>\n<p>재정의와 추상화</p>\n<ul>\n<li>재정의를 한다는 것은 자신이 이해하기 쉬운 형태로 받아들인다는 것이다.</li>\n<li>추상화는 잘 이해한 문제에서 정답을 끌어내기 위한 부분을 수학적/전산학적 개념으로 재정의하는 것을 말한다.</li>\n<li>이 두가지가 완료되었다면 문제를 풀 수 있을지 없을지가 결정된다고 본다.\n이유는 간단한데 사실상 알고리즘 문제를 수학문제로 치환하였기 때문이다.\n수학 문제가 된 이상 당신이 이에 대한 이해와 개념 어느정도의 연습이 되어 있다면 당연하게 문제가 풀릴 것이고 그렇지 않다면 백날 풀어도 풀 수 있을지 없을지 모른다.</li>\n</ul>\n</li>\n<li>\n<p>계획 세우기</p>\n<ul>\n<li>여러 해법이 떠올랐다면 어떤 방법을 선택할지 계획을 세운다. 만약 아이디어가 하나 뿐이라면 자동적으로 스킵된다.</li>\n</ul>\n</li>\n<li>\n<p>계획 검증하기</p>\n<ul>\n<li>해당 계획을 머리속으로 굴려보자 실제 구현을 하기 전 마지막 점검을 하는 것인데 계획이 결과적으로 정답을 도출 할 수 있는지를 생각해보라는 것이다.</li>\n</ul>\n</li>\n<li>\n<p>계획 수행하기</p>\n<ul>\n<li>잘 구현을 하라는 말이다.</li>\n</ul>\n</li>\n<li>\n<p>회고하기</p>\n<ul>\n<li>알고리즘 문제는 꼴보기 싫어지는 속성이 있어서 한 번 풀어본 문제를 또 풀기 싫은 경우가 100% 이다.\n하지만 이런 문제를 또 풀어보거나 내 풀이와 다른 사람의 풀이를 비교해 본다면 해당 알고리즘을 더 능숙하게 사용 할 수 있을 뿐 아니라 다른 문제에도 자연히 손이가게 되는 능숙한 무기가 될 수 있다.</li>\n</ul>\n</li>\n</ol>\n",
			"date_published": "2023-04-14T00:51:28Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/Richard_Feynman_alogorithm/",
			"url": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/Richard_Feynman_alogorithm/",
			"title": "Richard_Feynman_alogorithm",
			"content_html": "<img src=\"https://zerozoo-a.github.io/img/mY_3RSbBKY-278.webp\" width=\"100%\" height=\"auto\" alt=\"1. Writhe down the problem 2.  think very hard 3. Writhe down the answer\" loading=\"lazy\" decoding=\"async\">\n<ol>\n<li>칠판에 문제를 적는다.</li>\n<li>골똘히 생각한다.</li>\n<li>칠판에 답안을 적는다.</li>\n</ol>\n",
			"date_published": "2023-04-12T23:36:22Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/BOOK/JONGMAN/%EC%9E%85%EB%AC%B8%EC%9E%90%EB%A5%BC_%EC%9C%84%ED%95%9C_%EC%BB%A4%EB%A6%AC%ED%81%98%EB%9F%BC/",
			"url": "https://zerozoo-a.github.io/blog/CS/BOOK/JONGMAN/%EC%9E%85%EB%AC%B8%EC%9E%90%EB%A5%BC_%EC%9C%84%ED%95%9C_%EC%BB%A4%EB%A6%AC%ED%81%98%EB%9F%BC/",
			"title": "입문자를 위한 커리큘럼",
			"content_html": "<p>종만북에서 권장하는 입문자를 위한 커리큘럼이다.</p>\n<table>\n<thead>\n<tr>\n<th>입문자를 위한 커리큘럼</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>문제 해결 전략</td>\n</tr>\n<tr>\n<td>코딩과 디버깅</td>\n</tr>\n<tr>\n<td>알고리즘의 시간 복잡도 분석</td>\n</tr>\n<tr>\n<td>무식하게 풀기 (brute force)</td>\n</tr>\n<tr>\n<td>분할 정복</td>\n</tr>\n<tr>\n<td>동적 계획법</td>\n</tr>\n<tr>\n<td>선형 자료 구조</td>\n</tr>\n<tr>\n<td>큐와 스택, 데크</td>\n</tr>\n<tr>\n<td>트리의 구현과 순회</td>\n</tr>\n<tr>\n<td>이진 검색 트리</td>\n</tr>\n<tr>\n<td>우선순위 큐와 힙</td>\n</tr>\n<tr>\n<td>그래프의 표현과 정의</td>\n</tr>\n<tr>\n<td>그래프의 깊이 우선 탐색</td>\n</tr>\n<tr>\n<td>그래프의 너비 우선 탐색</td>\n</tr>\n<tr>\n<td>최단 경로 알고리즘</td>\n</tr>\n</tbody>\n</table>\n",
			"date_published": "2023-04-12T11:20:00Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/DATA_STRUCTURE/TREE/BST/",
			"url": "https://zerozoo-a.github.io/blog/CS/DATA_STRUCTURE/TREE/BST/",
			"title": "BST",
			"content_html": "<p>아래의 자료구조는 BinarySearchTree이다.</p>\n<p>특징은 아래와 같다.</p>\n<ul>\n<li>재귀적으로 구현되었다.\n<ul>\n<li>중위순회한다.</li>\n<li>재귀적으로 insert한다.</li>\n</ul>\n</li>\n</ul>\n<p>아래의 구조는 좋은 점이 한가지 정도 있다.</p>\n<p>그나마 외우기 편하다는 점이다.</p>\n<p>단점은 스택이 터질 것이라는 점이며 최적화가 필요하다는 점이다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">/**<br> * example<br> * new Node(3) // Node {data: 3, left: null, right: null}<br> */</span><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">BinarySearchTree</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keys <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">of</span> keys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">targetNode<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>targetNode<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targetNode<span class=\"token punctuation\">.</span>data <span class=\"token operator\">></span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      targetNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>targetNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// key</span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>      targetNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>targetNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> targetNode<span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> keys <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">const</span> bst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinarySearchTree</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bst<span class=\"token punctuation\">.</span><span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>bst<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br></code></pre>\n",
			"date_published": "2023-04-10T00:00:00Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JS/libs/flat/",
			"url": "https://zerozoo-a.github.io/blog/JS/libs/flat/",
			"title": "중첩 배열을 평탄화하기",
			"content_html": "<h2 id=\"\" tabindex=\"-1\">중첩 배열을 평탄화 한다는 것의 의미 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/libs/flat/\">#</a></h2>\n<ul>\n<li>눈으로 보는게 가장 빠르다</li>\n</ul>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 중첩</span><br><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 평탄화</span></code></pre>\n<p>위와 같이 여러 배열이 중첩되어 있는 상태를</p>\n<p>아래와 같은 형태로 풀어낸다는 것이다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">중첩 배열을 평탄화 해보기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/libs/flat/\">#</a></h2>\n<p>이런 저런 잡설을 늘어놓는 것 보다 코드를 이해하는 편이 도움이 될 수 있다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">iter</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> iter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token function\">flat</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">yield</span> a<span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b:\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>위 코드는 이러하다.</p>\n<p>배열을 받아 배열을 순회하며 순회한 인자가 배열인 경우 재귀적으로 파고들고\n아닌 경우 인자를 반환한다.</p>\n<p>이를 iterable 함수로 작성하면 된다.</p>\n",
			"date_published": "2023-04-03T00:00:00Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/wiki/11ty/css_config/",
			"url": "https://zerozoo-a.github.io/blog/wiki/11ty/css_config/",
			"title": "11ty post에 css 적용하기",
			"content_html": "<p>11ty의 폴더 구조는 jekyll과 매우 흡사합니다.</p>\n<p><code>_includes/layouts</code> 파일들이 들어가게 될 것인데요.</p>\n<pre class=\"language-shell\" tabindex=\"0\"><code class=\"language-shell\">_includes<br>├── layouts<br>│   ├── base.njk<br>│   ├── home.njk<br>│   └── post.njk<br>└── postslist.njk</code></pre>\n<p>이런 식으로 폴더 구조를 잡게 됩니다.</p>\n<p>아무튼 css를 작성하고 이를 적용하고 싶은게 목적이죠</p>\n<ul>\n<li>참고로 post를 위해 작성한 md 파일은 html로 변환되어 브라우저에 render되므로 결과적으로는\ncss로 스타일을 입히게 됩니다.</li>\n</ul>\n<p>그럼 적당한 레이아웃 파일을 만들어주세요</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token comment\">/* css/style.css */</span><br><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-njk\" tabindex=\"0\"><code class=\"language-njk\"><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token variable\">layouts</span><span class=\"token operator\">/</span><span class=\"token variable\">goodLayout</span><span class=\"token punctuation\">.</span><span class=\"token variable\">njk</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><br><span class=\"token operator\">&lt;</span><span class=\"token variable\">html</span><span class=\"token operator\">></span><br>    <span class=\"token operator\">&lt;</span><span class=\"token variable\">head</span><span class=\"token operator\">></span><br>        <span class=\"token operator\">&lt;</span><span class=\"token variable\">link</span> <span class=\"token variable\">rel</span><span class=\"token operator\">=</span><span class=\"token string\">\"stylesheet\"</span> <span class=\"token variable\">href</span><span class=\"token operator\">=</span><span class=\"token string\">\"css/style.css\"</span><span class=\"token operator\">></span><br>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token variable\">head</span><span class=\"token operator\">></span><br><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token variable\">html</span><span class=\"token operator\">></span></code></pre>\n<p>놀랍게도 적용이 잘 안될것입니다.</p>\n<p>이유는 11ty가 해당 파일의 존재를 아직 알아차리지 못하였기 때문입니다.</p>\n<p>11ty에는 config file이 존재하는데 프로젝트의 <code>root</code>에 <code>eleventy.config.js</code> 파일을 생성해주세요</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">eleventyConfig</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\televentyConfig<span class=\"token punctuation\">.</span><span class=\"token function\">addPassthroughCopy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>\t\t<span class=\"token string-property property\">\"/from\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/to\"</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>위 설정은 key로 입력된 곳에 있는 파일을 to에 있는 곳으로 옮기겠다는 내용입니다.\n당연히 빌드된 결과물이 쌓일 output dir이 좋겠습니다.</p>\n<p><code>./public/css =&gt; _site/css</code> 이런식으로 이동이 됩니다.</p>\n<p>잘 조정이 되었는지 확인하려면 빌드를 해보세요!</p>\n",
			"date_published": "2023-04-01T00:00:00Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/wiki/11ty/new_blog/",
			"url": "https://zerozoo-a.github.io/blog/wiki/11ty/new_blog/",
			"title": "11ty를 통해 블로그를 새로 단장하기",
			"content_html": "<img src=\"https://zerozoo-a.github.io/img/IdthKOzqFA-300.webp\" width=\"100%\" height=\"auto\" alt=\"A possum parent and two possum kids hanging from the iconic red balloon\" loading=\"lazy\" decoding=\"async\">\n<p>jekyll은 충분히 훌륭한 정적생성기이지만..</p>\n<p>💎 루비도 아주 좋은 언어이지만.. 내 숙련도가 부족하고 해당 언어의 환경을 능숙하게\n또 지속적으로 그 언어를 사용 할 여건이 되질 않아 늘 불만이 존재했다.</p>\n<p>이번에 javascript 기반의 정적생성기로 블로그를 전환하면서 해당 내용을 정리한 한글 블로그가\n눈에 띄질 않아 정리해보기로 했다.</p>\n<p>GH-Pages에 11ty SSG 블로그를 올리려면..</p>\n<ol>\n<li>\n<p>우선 적당히 github repo를 생성해줍니다.</p>\n</li>\n<li>\n<p>자신의 repo에서 settings에 들어갑니다.</p>\n</li>\n<li>\n<p>좌측의 pages 메뉴를 클릭하면 github pages에 대한 config를 할 수 있습니다.</p>\n</li>\n<li>\n<p>Source를 눌러 deploy from a branch로 변경합니다.</p>\n</li>\n<li>\n<p>branch는 gh-pages로 변경 폴더는 root로 둡시다.</p>\n</li>\n</ol>\n<p>이게 기본적인 github의 세팅입니다.</p>\n<p>11ty의 세팅은</p>\n<ol>\n<li>eleventy.config.js의 pathPrefix에 자신의 브랜치 이름을 적어주는 것입니다.</li>\n<li>그리고 모든 링크의 href에 대해 <code>url</code> 필터를 추가해줍시다.</li>\n</ol>\n<p>만약 본인이 생성한 브랜치가 특별한 브랜치인 github.io라고 한다면 pathPrefix를 굳이 해줄 필요가 없습니다.</p>\n<p>기본적으로 빌드와 배포는 github actions를 통해 이루어집니다.</p>\n<pre class=\"language-yml\" tabindex=\"0\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build Eleventy <span class=\"token comment\"># /root/.github/worflows/build.yml</span><br><br><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> main <span class=\"token comment\"># 원하는 브랜치를 선택해주세요</span><br><br><span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest <span class=\"token comment\"># 높은 버전을 씁시다.</span><br><br>    <span class=\"token key atrule\">strategy</span><span class=\"token punctuation\">:</span><br>      <span class=\"token key atrule\">matrix</span><span class=\"token punctuation\">:</span><br>        <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>19.x<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 마찬가지로 높은 버전이 좋겠습니다.</span><br><br>    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v3 <span class=\"token comment\"># 높은 버전을 써줍시다.</span><br><br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Use Node.js $NaN<br>        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@v3<br>        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span><br>          <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> $NaN<br><br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install dependencies &amp; build <span class=\"token comment\"># yarn을 쓰던 pnpm을 쓰던 상관 없겠죠?</span><br>        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\"><br>          npm ci <br>          npm run build-ghpages          </span><br><br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy<br>        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> peaceiris/actions<span class=\"token punctuation\">-</span>gh<span class=\"token punctuation\">-</span>pages@v3<br>        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span><br>          <span class=\"token key atrule\">publish_dir</span><span class=\"token punctuation\">:</span> ./_site <span class=\"token comment\"># 원하는대로 빌드 결과물이 생성 될 곳을 정해주세요</span><br>          <span class=\"token key atrule\">github_token</span><span class=\"token punctuation\">:</span> $</code></pre>\n<p>이제 11ty 사이트에 방문해 적당한 starter project를 클론 받아와 올려줍니다.</p>\n<p>방금 생성한 repo에 올리면 됩니다\n클론받은 프로젝트마다 약간의 차이점이 존재하게 됩니다.</p>\n<h2 id=\"11ty\" tabindex=\"-1\">11ty <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/11ty/new_blog/\">#</a></h2>\n<p>11ty는 jekyll의 node.js 버전이라고 생각하면 좋다.\nhugo 또한 비슷하다.</p>\n<h2 id=\"deploy\" tabindex=\"-1\">deploy <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/11ty/new_blog/\">#</a></h2>\n<p>gh-pages를 통해 내보낸다.</p>\n<h2 id=\"jekyll\" tabindex=\"-1\">jekyll에 비해 장점 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/11ty/new_blog/\">#</a></h2>\n<p>장점은 node.js를 사용할 수 있다는 점이다.\njs npm 생태계를 좀 더 활용 할 수 있다.</p>\n<h2 id=\"jekyll-1\" tabindex=\"-1\">jekyll에 비해 단점 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/11ty/new_blog/\">#</a></h2>\n<p>커뮤니티나 역사가 오래되질 못하고 docs가 부실하다는 점이다.\n튜토리얼이 많이 부족해보이고 지속적인 관리가 될지 의문이다.\n회사가 붙어서 이를 체계적으로 강하게 관리해주지 않으면 jekyll + ruby3로 다시 갈아탈지도 모르겠다..</p>\n",
			"date_published": "2023-03-28T00:00:00Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/wiki/11ty/folder_and_config/",
			"url": "https://zerozoo-a.github.io/blog/wiki/11ty/folder_and_config/",
			"title": "폴더 단위로 layout 명시하기",
			"content_html": "<p>역시 하나 하나 docs를 탐독하다 보면 배우는 것들이 생기기 마련입니다.</p>\n<p>정붙이면 고향이라고 벌써 11ty의 좋은 점들이 조금씩 납득되고 있습니다.</p>\n<p>아무튼 블로그를 조금씩 제 입맛대로 수정하면서 배운 폴더단위 config를 알아봅시다.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">content<br>├── blog<br>│   ├── blog.11tydata.js<br>│   └── wiki<br>│       └── 11ty<br>│           ├── css_config.md<br>│           ├── folder_and_config.md<br>│           ├── new_blog.md<br>│           └── possum.png<br><span class=\"token punctuation\">..</span>.</code></pre>\n<p>현재 저의 블로그 디렉터리 구조는 위와 같은데요</p>\n<p>위 md 파일들 중에 묘하게 거슬리는 친구가 하나 보이실 것 같습니다.</p>\n<p>네 바로 <code>blog.11tydata.js</code> 입니다.\n이 파일은 뭐길레 md 파일들 한 가운데서 저렇게 있는걸까요?</p>\n<blockquote>\n<p>해당 파일은 바로 해당 파일이 존재하고 있는 위치와 그 위치의 하위 디렉터리들에 재귀적으로 해당 파일의 설정을 적용시키기 위해 있습니다.</p>\n</blockquote>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token literal-property property\">tags</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><br>\t\t<span class=\"token string\">\"posts\"</span><br>\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token string-property property\">\"layout\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"layouts/post.njk\"</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이렇게 생겼습니다.</p>\n<p>해당 dir 내부에 존재하는 파일들은\nposts라는 태그를 부여 받고 layout은 post.njk를 사용하라는 뜻이죠</p>\n<p>이러면 layout을 어디부터 어디까지 지정할지를 보다 편하게 명시할 수 있습니다.</p>\n<p>이런 기능은 참 괜찮네요!</p>\n",
			"date_published": "2023-03-27T00:00:00Z"
		}
		
	]
}
