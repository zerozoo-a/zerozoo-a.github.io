{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "log4zerozoo-a",
	"language": "kr",
	"home_page_url": "https://zerozoo-a.github.io/",
	"feed_url": "https://zerozoo-a.github.io/feed/feed.json",
	"description": "not to day",
	"author": {
		"name": "zerozoo-a",
		"url": "NOP"
	},
	"items": [
		{
			"id": "https://zerozoo-a.github.io/blog/wiki/11ty/new_blog/",
			"url": "https://zerozoo-a.github.io/blog/wiki/11ty/new_blog/",
			"title": "11ty를 통해 블로그를 새로 단장하기",
			"content_html": "<p><picture><source type=\"image/avif\" srcset=\"https://zerozoo-a.github.io/img/IdthKOzqFA-350.avif 350w\"><source type=\"image/webp\" srcset=\"https://zerozoo-a.github.io/img/IdthKOzqFA-350.webp 350w\"><img alt=\"A possum parent and two possum kids hanging from the iconic red balloon\" loading=\"lazy\" decoding=\"async\" src=\"https://zerozoo-a.github.io/img/IdthKOzqFA-350.png\" width=\"350\" height=\"685\"></picture></p>\n<p>jekyll은 충분히 훌륭한 정적생성기이지만..</p>\n<p>💎 루비도 아주 좋은 언어이지만.. 내 숙련도가 부족하고 해당 언어의 환경을 능숙하게\n또 지속적으로 그 언어를 사용 할 여건이 되질 않아 늘 불만이 존재했다.</p>\n<p>이번에 javascript 기반의 정적생성기로 블로그를 전환하면서 해당 내용을 정리한 한글 블로그가\n눈에 띄질 않아 정리해보기로 했다.</p>\n<p>GH-Pages에 11ty SSG 블로그를 올리려면..</p>\n<ol>\n<li>\n<p>우선 적당히 github repo를 생성해줍니다.</p>\n</li>\n<li>\n<p>자신의 repo에서 settings에 들어갑니다.</p>\n</li>\n<li>\n<p>좌측의 pages 메뉴를 클릭하면 github pages에 대한 config를 할 수 있습니다.</p>\n</li>\n<li>\n<p>Source를 눌러 deploy from a branch로 변경합니다.</p>\n</li>\n<li>\n<p>branch는 gh-pages로 변경 폴더는 root로 둡시다.</p>\n</li>\n</ol>\n<p>이게 기본적인 github의 세팅입니다.</p>\n<p>11ty의 세팅은</p>\n<ol>\n<li>eleventy.config.js의 pathPrefix에 자신의 브랜치 이름을 적어주는 것입니다.</li>\n<li>그리고 모든 링크의 href에 대해 <code>url</code> 필터를 추가해줍시다.</li>\n</ol>\n<p>만약 본인이 생성한 브랜치가 특별한 브랜치인 github.io라고 한다면 pathPrefix를 굳이 해줄 필요가 없습니다.</p>\n<p>기본적으로 빌드와 배포는 github actions를 통해 이루어집니다.</p>\n<pre class=\"language-yml\" tabindex=\"0\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build Eleventy <span class=\"token comment\"># /root/.github/worflows/build.yml</span><br><br><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> main <span class=\"token comment\"># 원하는 브랜치를 선택해주세요</span><br><br><span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest <span class=\"token comment\"># 높은 버전을 씁시다.</span><br><br>    <span class=\"token key atrule\">strategy</span><span class=\"token punctuation\">:</span><br>      <span class=\"token key atrule\">matrix</span><span class=\"token punctuation\">:</span><br>        <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>19.x<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 마찬가지로 높은 버전이 좋겠습니다.</span><br><br>    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v3 <span class=\"token comment\"># 높은 버전을 써줍시다.</span><br><br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Use Node.js $NaN<br>        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@v3<br>        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span><br>          <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> $NaN<br><br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install dependencies &amp; build <span class=\"token comment\"># yarn을 쓰던 pnpm을 쓰던 상관 없겠죠?</span><br>        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\"><br>          npm ci <br>          npm run build-ghpages          </span><br><br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy<br>        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> peaceiris/actions<span class=\"token punctuation\">-</span>gh<span class=\"token punctuation\">-</span>pages@v3<br>        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span><br>          <span class=\"token key atrule\">publish_dir</span><span class=\"token punctuation\">:</span> ./_site <span class=\"token comment\"># 원하는대로 빌드 결과물이 생성 될 곳을 정해주세요</span><br>          <span class=\"token key atrule\">github_token</span><span class=\"token punctuation\">:</span> $</code></pre>\n<p>이제 11ty 사이트에 방문해 적당한 starter project를 클론 받아와 올려줍니다.</p>\n<p>방금 생성한 repo에 올리면 됩니다\n클론받은 프로젝트마다 약간의 차이점이 존재하게 됩니다.</p>\n<h2 id=\"11ty\" tabindex=\"-1\">11ty <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/11ty/new_blog/\">#</a></h2>\n<p>11ty는 jekyll의 node.js 버전이라고 생각하면 좋다.\nhugo 또한 비슷하다.</p>\n<h2 id=\"deploy\" tabindex=\"-1\">deploy <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/11ty/new_blog/\">#</a></h2>\n<p>gh-pages를 통해 내보낸다.</p>\n<h2 id=\"jekyll\" tabindex=\"-1\">jekyll에 비해 장점 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/11ty/new_blog/\">#</a></h2>\n<p>장점은 node.js를 사용할 수 있다는 점이다.\njs npm 생태계를 좀 더 활용 할 수 있다.</p>\n<h2 id=\"jekyll-1\" tabindex=\"-1\">jekyll에 비해 단점 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/11ty/new_blog/\">#</a></h2>\n<p>커뮤니티나 역사가 오래되질 못하고 docs가 부실하다는 점이다.\n튜토리얼이 많이 부족해보이고 지속적인 관리가 될지 의문이다.\n회사가 붙어서 이를 체계적으로 강하게 관리해주지 않으면 jekyll + ruby3로 다시 갈아탈지도 모르겠다..</p>\n",
			"date_published": "2023-04-03T15:02:51Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/wiki/11ty/folder_and_config/",
			"url": "https://zerozoo-a.github.io/blog/wiki/11ty/folder_and_config/",
			"title": "폴더 단위로 layout 명시하기",
			"content_html": "<p>역시 하나 하나 docs를 탐독하다 보면 배우는 것들이 생기기 마련입니다.</p>\n<p>정붙이면 고향이라고 벌써 11ty의 좋은 점들이 조금씩 납득되고 있습니다.</p>\n<p>아무튼 블로그를 조금씩 제 입맛대로 수정하면서 배운 폴더단위 config를 알아봅시다.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">content<br>├── blog<br>│   ├── blog.11tydata.js<br>│   └── wiki<br>│       └── 11ty<br>│           ├── css_config.md<br>│           ├── folder_and_config.md<br>│           ├── new_blog.md<br>│           └── possum.png<br><span class=\"token punctuation\">..</span>.</code></pre>\n<p>현재 저의 블로그 디렉터리 구조는 위와 같은데요</p>\n<p>위 md 파일들 중에 묘하게 거슬리는 친구가 하나 보이실 것 같습니다.</p>\n<p>네 바로 <code>blog.11tydata.js</code> 입니다.\n이 파일은 뭐길레 md 파일들 한 가운데서 저렇게 있는걸까요?</p>\n<blockquote>\n<p>해당 파일은 바로 해당 파일이 존재하고 있는 위치와 그 위치의 하위 디렉터리들에 재귀적으로 해당 파일의 설정을 적용시키기 위해 있습니다.</p>\n</blockquote>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token literal-property property\">tags</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><br>\t\t<span class=\"token string\">\"posts\"</span><br>\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token string-property property\">\"layout\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"layouts/post.njk\"</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이렇게 생겼습니다.</p>\n<p>해당 dir 내부에 존재하는 파일들은\nposts라는 태그를 부여 받고 layout은 post.njk를 사용하라는 뜻이죠</p>\n<p>이러면 layout을 어디부터 어디까지 지정할지를 보다 편하게 명시할 수 있습니다.</p>\n<p>이런 기능은 참 괜찮네요!</p>\n",
			"date_published": "2023-04-03T15:02:51Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/wiki/11ty/css_config/",
			"url": "https://zerozoo-a.github.io/blog/wiki/11ty/css_config/",
			"title": "11ty post에 css 적용하기",
			"content_html": "<p>11ty의 폴더 구조는 jekyll과 매우 흡사합니다.</p>\n<p><code>_includes/layouts</code> 파일들이 들어가게 될 것인데요.</p>\n<pre class=\"language-shell\" tabindex=\"0\"><code class=\"language-shell\">_includes<br>├── layouts<br>│   ├── base.njk<br>│   ├── home.njk<br>│   └── post.njk<br>└── postslist.njk</code></pre>\n<p>이런 식으로 폴더 구조를 잡게 됩니다.</p>\n<p>아무튼 css를 작성하고 이를 적용하고 싶은게 목적이죠</p>\n<ul>\n<li>참고로 post를 위해 작성한 md 파일은 html로 변환되어 브라우저에 render되므로 결과적으로는\ncss로 스타일을 입히게 됩니다.</li>\n</ul>\n<p>그럼 적당한 레이아웃 파일을 만들어주세요</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token comment\">/* css/style.css */</span><br><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-njk\" tabindex=\"0\"><code class=\"language-njk\"><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token variable\">layouts</span><span class=\"token operator\">/</span><span class=\"token variable\">goodLayout</span><span class=\"token punctuation\">.</span><span class=\"token variable\">njk</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><br><span class=\"token operator\">&lt;</span><span class=\"token variable\">html</span><span class=\"token operator\">></span><br>    <span class=\"token operator\">&lt;</span><span class=\"token variable\">head</span><span class=\"token operator\">></span><br>        <span class=\"token operator\">&lt;</span><span class=\"token variable\">link</span> <span class=\"token variable\">rel</span><span class=\"token operator\">=</span><span class=\"token string\">\"stylesheet\"</span> <span class=\"token variable\">href</span><span class=\"token operator\">=</span><span class=\"token string\">\"css/style.css\"</span><span class=\"token operator\">></span><br>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token variable\">head</span><span class=\"token operator\">></span><br><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token variable\">html</span><span class=\"token operator\">></span></code></pre>\n<p>놀랍게도 적용이 잘 안될것입니다.</p>\n<p>이유는 11ty가 해당 파일의 존재를 아직 알아차리지 못하였기 때문입니다.</p>\n<p>11ty에는 config file이 존재하는데 프로젝트의 <code>root</code>에 <code>eleventy.config.js</code> 파일을 생성해주세요</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">eleventyConfig</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\televentyConfig<span class=\"token punctuation\">.</span><span class=\"token function\">addPassthroughCopy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>\t\t<span class=\"token string-property property\">\"/from\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/to\"</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>위 설정은 key로 입력된 곳에 있는 파일을 to에 있는 곳으로 옮기겠다는 내용입니다.\n당연히 빌드된 결과물이 쌓일 output dir이 좋겠습니다.</p>\n<p><code>./public/css =&gt; _site/css</code> 이런식으로 이동이 됩니다.</p>\n<p>잘 조정이 되었는지 확인하려면 빌드를 해보세요!</p>\n",
			"date_published": "2023-04-03T15:02:51Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JS/libs/flat/",
			"url": "https://zerozoo-a.github.io/blog/JS/libs/flat/",
			"title": "중첩 배열을 평탄화하기",
			"content_html": "<h2 id=\"\" tabindex=\"-1\">중첩 배열을 평탄화 한다는 것의 의미 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/libs/flat/\">#</a></h2>\n<ul>\n<li>눈으로 보는게 가장 빠르다</li>\n</ul>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 중첩</span><br><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 평탄화</span></code></pre>\n<p>위와 같이 여러 배열이 중첩되어 있는 상태를</p>\n<p>아래와 같은 형태로 풀어낸다는 것이다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">중첩 배열을 평탄화 해보기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/libs/flat/\">#</a></h2>\n<p>이런 저런 잡설을 늘어놓는 것 보다 코드를 이해하는 편이 도움이 될 수 있다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">iter</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> iter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token function\">flat</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">yield</span> a<span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b:\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>위 코드는 이러하다.</p>\n<p>배열을 받아 배열을 순회하며 순회한 인자가 배열인 경우 재귀적으로 파고들고\n아닌 경우 인자를 반환한다.</p>\n<p>이를 iterable 함수로 작성하면 된다.</p>\n",
			"date_published": "2023-04-03T15:02:51Z"
		}
		
	]
}
