{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "zerozoo-a의 블로그",
	"language": "kr",
	"home_page_url": "https://zerozoo-a.github.io/",
	"feed_url": "https://zerozoo-a.github.io/feed/feed.json",
	"description": "안녕하세요 반갑습니다. 건강하고 행복하세요",
	"author": {
		"name": "zerozoo-a",
		"url": "NOP"
	},
	"items": [
		{
			"id": "https://zerozoo-a.github.io/blog/algos/O(1)/sum-of-even/",
			"url": "https://zerozoo-a.github.io/blog/algos/O(1)/sum-of-even/",
			"title": "정수 n 이하의 짝수를 모두 더한 값을 구하시오",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"\" tabindex=\"-1\">문제 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/O(1)/sum-of-even/\">#</a></h2>\n<p>정수 n이 주어진다.</p>\n<p><code>n은 0 &lt; n &lt;= 1000</code></p>\n<p>이 때, n이하의 짝수를 모두 더한 값을 구하면 됩니다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">풀이 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/O(1)/sum-of-even/\">#</a></h2>\n<p>짝수의 합을 풀 수 있는 방법은 다양합니다.</p>\n<p>n이 충분히 작으므로 1부터 n까지 반복하며 짝수를 누산하면 정답이 나오게됩니다.</p>\n<p>시간에 제한도 없으니 이렇게 풀어도 괜찮겠으나\n프로그래밍에 수학 공식을 얹어주면 더 깔끔하게 해결 되는 경우가 있습니다.</p>\n<p>정수 n이하의 짝수의 합이므로\n등차수열의 합공식을 사용하겠습니다.</p>\n<h3 id=\"-2\" tabindex=\"-1\">수학을 이용한 풀이 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/O(1)/sum-of-even/\">#</a></h3>\n<p>등차수열의 합공식은 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mi>n</mi></msub><mo>=</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">S_n = \\frac{n}{2}(a_1+a_n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.095em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.695392em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>입니다.</p>\n<p>이 때,</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">a_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>은 첫 항</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>은 마지막 항</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>은 항의 개수입니다.</li>\n</ul>\n<p>이 식을 활용하여 짝수의 합 공식을 만들어보겠습니다.</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">a_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>은 첫 항 = 2</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>은 마지막 항 = n이 짝수인 경우 n, 홀수인 경우 n-1입니다.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>은 항의 개수입니다. = 짝수는 항의 개수인 n에 반입니다.\n<ul>\n<li>여기서 마지막 항이 짝수일지, 홀수일지 미리 알 수 없으므로 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">a_n/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\">2</span></span></span></span>이 항의 개수입니다.</li>\n</ul>\n</li>\n</ul>\n<p>이를 다시 써보면</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mi>n</mi></msub><mo>=</mo><mfrac><mrow><msub><mi>a</mi><mi>n</mi></msub><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><mn>2</mn></mfrac><mo stretchy=\"false\">(</mo><mn>2</mn><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">S_n = \\frac{a_n/2}{2}(2 + a_n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.355em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>입니다.</p>\n<p>이를 javascript로 구현하면 아래와 같습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> isEven <span class=\"token operator\">=</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> max <span class=\"token operator\">=</span> isEven <span class=\"token operator\">?</span> n <span class=\"token operator\">:</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> max<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n",
			"date_published": "2024-06-07T17:36:07Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Sets/2.3-cardinality-of-sets/",
			"url": "https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Sets/2.3-cardinality-of-sets/",
			"title": "2.3 cardinality of sets | 집합의 크기",
			"content_html": "<br>\n<br>\n<br>\n<h3 id=\"cardinality\" tabindex=\"-1\">Cardinality는 집합의 원소의 갯수를 말한다. <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Sets/2.3-cardinality-of-sets/\">#</a></h3>\n<ul>\n<li>예를 들어 집합 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mo>∣</mo><mi>x</mi><mtext> is a natural number from 1 to 3</mtext><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">A=\\{x \\mid x \\text{ is a natural number from 1 to 3}\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord text\"><span class=\"mord\"> is a natural number from 1 to 3</span></span><span class=\"mclose\">}</span></span></span></span> 라고 했을 때, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>A</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">|A|=3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">A</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>이 된다.</li>\n<li>예를 들어 집합 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>q</mi><mo>∣</mo><mi>q</mi><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">B=\\{q \\mid q = 1, 2\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">}</span></span></span></span>에서 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>B</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">|B|=2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>이다.</li>\n</ul>\n<h3 id=\"cardinality-1\" tabindex=\"-1\">특별한 Cardinality <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Sets/2.3-cardinality-of-sets/\">#</a></h3>\n<ul>\n<li>Cardinality of Empty Set | 공집합의 카디널리티 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∅</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">|\\emptyset|=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∅</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></li>\n<li>Singleton Set | 싱글톤 카디널리티 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>A</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">|A|=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">A</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n<li>Equivalent Sets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>A</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mi>B</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">|A|=|B|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">A</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord\">∣</span></span></span></span> | 서로 카디널리티가 같은 집합</li>\n</ul>\n<h3 id=\"finite-set-infinite-sets\" tabindex=\"-1\">Finite Set과 Infinite Sets <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Sets/2.3-cardinality-of-sets/\">#</a></h3>\n<ul>\n<li>Finite Set | 원소의 개수가 한정되어 있는 집합\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>A</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mn>0</mn><mtext> or </mtext><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">|A| = 0 \\text{ or } n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">A</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mord text\"><span class=\"mord\"> or </span></span><span class=\"mord mathnormal\">n</span></span></span></span></li>\n<li>Finite Set의 특징으로는 원소를 인코딩할 수 있다는 것이다.\n<ul>\n<li>\n<p>Finite Set은 그 갯수가 유한하기 때문에 각 원소에 숫자를 매핑할 수 있다. 이를 Encoding of Elements라고 한다.</p>\n</li>\n<li>\n<p>예를 들어 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>B</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mo>∣</mo><mi>x</mi><mtext> is a letter of the alphabet</mtext><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">|B|=\\{x \\mid x \\text{ is a letter of the alphabet}\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord text\"><span class=\"mord\"> is a letter of the alphabet</span></span><span class=\"mclose\">}</span></span></span></span>일 때, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>:</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>b</mi><mo>:</mo><mn>2</mn><mo separator=\"true\">,</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">a:1, b:2, \\ldots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span></span></span></span>처럼 인덱싱하게 된다.</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Infinite Set | 원소의 개수가 무한한 집합\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>A</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">|A|=\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">A</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span></li>\n<li>Infinite Set은 두 가지로 나뉜다.\n<ul>\n<li>Countably Infinite Sets\n<ul>\n<li>인코딩이 가능\n<ul>\n<li>정수를 예로 들자면 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>−</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}=\\{0, -1, 1, -2, 2, \\cdots\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">−</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mclose\">}</span></span></span></span>의 형태로 나열 순서를 변경해 인코딩이 가능하다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Uncountably Infinite Sets\n<ul>\n<li>인코딩이 불가능</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
			"date_published": "2024-06-06T13:56:21Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Sets/2.2-Usage-of-sets/",
			"url": "https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Sets/2.2-Usage-of-sets/",
			"title": "2.2 Usage of sets | 집합의 사용",
			"content_html": "<br>\n<br>\n<br>\n<h3 id=\"common-number-sets\" tabindex=\"-1\">Common Number Sets | 수의 집합 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Sets/2.2-Usage-of-sets/\">#</a></h3>\n<ul>\n<li>\n<p>Natural Numbers | 자연수: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo>⋯</mo><mtext> </mtext><mo stretchy=\"false\">}</mo><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi>i</mi><mi>s</mi><mtext> </mtext><mi>N</mi><mi>a</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\N=\\{1,2,3\\cdots\\}=\\{x|x is \\ Natural\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mclose\">}</span></span></span></span></p>\n</li>\n<li>\n<p>Whole Number | 0을 포함한 자연수: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo>⋯</mo><mtext> </mtext><mo stretchy=\"false\">}</mo><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi>i</mi><mi>s</mi><mtext> </mtext><mn>0</mn><mo>∨</mo><mi>x</mi><mi>i</mi><mi>s</mi><mtext> </mtext><mi>N</mi><mi>a</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">W =\\{0,1,2\\cdots\\}=\\{x|x is\\ 0 \\lor x is\\ Natural\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\"> </span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mclose\">}</span></span></span></span></p>\n</li>\n<li>\n<p>Integers | 정수: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><mo>−</mo><mn>2</mn><mo separator=\"true\">,</mo><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo stretchy=\"false\">}</mo><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi>i</mi><mi>s</mi><mtext> </mtext><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>g</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\Z=\\{ \\cdots,-2,-1,0,1,2,\\cdots \\}=\\{x|x is \\ Integers\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">−</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">}</span></span></span></span></p>\n</li>\n<li>\n<p>Rational Numbers | 유리수: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo separator=\"true\">,</mo><mfrac><mn>1</mn><mn>3</mn></mfrac><mo separator=\"true\">,</mo><mfrac><mn>2</mn><mn>3</mn></mfrac><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo stretchy=\"false\">}</mo><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi>i</mi><mi>s</mi><mtext> </mtext><mi>R</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>a</mi><mi>l</mi><mi>N</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo stretchy=\"false\">}</mo><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mo>=</mo><mfrac><mi>p</mi><mi>q</mi></mfrac><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>p</mi><mo separator=\"true\">,</mo><mtext> </mtext><mi>q</mi><mtext> </mtext><mi>a</mi><mi>r</mi><mi>e</mi><mtext> </mtext><mi>i</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>g</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo>∧</mo><mi>q</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">Q = \\{\\frac{1}{2},\\frac{1}{3},\\frac{2}{3},\\cdots\\}=\\{x|x is\\ Rational Numbers\\}=\\{x|x=\\frac{p}{q}\\ (p,\\ q\\ are\\ integers \\land q \\ne 0)\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2311079999999999em;vertical-align:-0.481108em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7475em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.446108em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.481108em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mclose\">}</span></span></span></span></p>\n</li>\n<li>\n<p>Irrational Numbers | 무리수: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>π</mi><mo separator=\"true\">,</mo><mi>e</mi><mo separator=\"true\">,</mo><msqrt><mn>2</mn></msqrt><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo stretchy=\"false\">}</mo><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi>i</mi><mi>s</mi><mtext> </mtext><mi>I</mi><mi>r</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>a</mi><mi>l</mi><mi>N</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo stretchy=\"false\">}</mo><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">¬</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mi>i</mi><mi>s</mi><mtext> </mtext><mi>I</mi><mi>r</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>a</mi><mi>l</mi><mi>N</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">I = \\{\\pi, e,\\sqrt{2},\\cdots\\}=\\{x|x is\\ Irrational Numbers\\}=\\{x|\\neg(x is\\ Irrational Numbers)\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1572200000000001em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90722em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.86722em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.13278em;\"><span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord\">¬</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mclose\">}</span></span></span></span></p>\n</li>\n<li>\n<p>Real Numbers | 실수: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mtext> </mtext><mi>i</mi><mi>s</mi><mtext> </mtext><mi>R</mi><mi>e</mi><mi>a</mi><mi>l</mi><mi>N</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo stretchy=\"false\">}</mo><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mi>i</mi><mi>s</mi><mtext> </mtext><mi>R</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>a</mi><mi>l</mi><mi>N</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo stretchy=\"false\">)</mo><mo>∨</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mi>i</mi><mi>s</mi><mtext> </mtext><mi>I</mi><mi>r</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>a</mi><mi>l</mi><mi>N</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\R=\\{x|x\\ is\\ Real Numbers\\}=\\{x|(x is\\ Rational Numbers)\\lor(x is\\ Irrational Numbers)\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mclose\">}</span></span></span></span></p>\n</li>\n<li>\n<p>Complex Numbers | 복소수: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mi>i</mi><mi>s</mi><mtext> </mtext><mi>C</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>l</mi><mi>e</mi><mi>x</mi><mi>N</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">}</mo><mo>=</mo><mo stretchy=\"false\">{</mo><mi>a</mi><mo>+</mo><mi>j</mi><mo>⋅</mo><mi>b</mi><mtext> </mtext><mi mathvariant=\"normal\">∣</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mi>i</mi><mi>s</mi><mtext> </mtext><mi>R</mi><mi>e</mi><mi>a</mi><mi>l</mi><mi>N</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">C=\\{x|(x is\\ Complex Numbers)\\}=\\{a+j\\cdot b\\ |\\ (a, b is \\ Real Numbers) \\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\"> </span><span class=\"mord\">∣</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mclose\">}</span></span></span></span></p>\n</li>\n</ul>\n<h3 id=\"functions\" tabindex=\"-1\">Functions | 함수 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Sets/2.2-Usage-of-sets/\">#</a></h3>\n<ul>\n<li>Domain | 정의역: 정의역은 함수에 input으로 들어갈 값을 정의역이라고 한다.\n예를 들어 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>에서 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>의 값에 해당한다.</li>\n<li>Codomain | 공역: 공역은 함수 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>에 대해 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>에 해당한다.\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>에 어떤 값이 오면 output으로 나오는 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>값인 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> 집합 전체를 가리킨다.</li>\n<li>Range | 치역: 치역은 함수에서 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>의 값의 집합을 치역이라 한다.\n예를 들어 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f(x)=x+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>이라고 할 때, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">f(1) = 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>이다. 이 때 2는 치역에 속한다.</li>\n</ul>\n<h3 id=\"lines-and-planes\" tabindex=\"-1\">Lines and Planes | 직선과 평면 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Sets/2.2-Usage-of-sets/\">#</a></h3>\n<ul>\n<li>관계식 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>=</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">y=ax+b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>가 있다고 할 때, 해당 관계식을 만족하는 모든 점들을 모은 집합을 선이라고 한다.\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi>y</mi><mo>=</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">L=\\{(x,y)|y=ax+b\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">}</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mo>−</mo><msub><mi>r</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n(r-r_0)=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> (평면의 벡터 방정식)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"intersection\" tabindex=\"-1\">Intersection | 교점 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Sets/2.2-Usage-of-sets/\">#</a></h3>\n<ul>\n<li>no intersection | 교점이 없음</li>\n<li>Point | 교점이 하나</li>\n<li>Line contained in plane | 직선의 모든 점이 교점</li>\n</ul>\n<h3 id=\"solution-set-of-equations-solution-set-of-inequalities\" tabindex=\"-1\">Solution set of Equations | 방정식, Solution set of Inequalities | 부등식 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Sets/2.2-Usage-of-sets/\">#</a></h3>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">(x-2)(x+3)=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> → <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mn>2</mn><mo separator=\"true\">,</mo><mo>−</mo><mn>3</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">S=\\{2,-3\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">−</span><span class=\"mord\">3</span><span class=\"mclose\">}</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">(x-2)(x+3)&lt;0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> → <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mo>−</mo><mn>3</mn><mo>&lt;</mo><mi>x</mi><mo>&lt;</mo><mn>2</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">S=\\{x|-3&lt;x&lt;2\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">}</span></span></span></span></li>\n</ul>\n<h3 id=\"linear-algebra\" tabindex=\"-1\">Linear Algebra <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Sets/2.2-Usage-of-sets/\">#</a></h3>\n<ul>\n<li>Vector space | 벡터들을 모은 집합</li>\n</ul>\n",
			"date_published": "2024-06-05T23:06:26Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Sets/2.1-Definition-and-Notations-of-Sets-%EC%A7%91%ED%95%A9%EC%9D%98-%EC%A0%95%EC%9D%98%EC%99%80-%ED%91%9C%EA%B8%B0/",
			"url": "https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Sets/2.1-Definition-and-Notations-of-Sets-%EC%A7%91%ED%95%A9%EC%9D%98-%EC%A0%95%EC%9D%98%EC%99%80-%ED%91%9C%EA%B8%B0/",
			"title": "2.1 Definition and Notations of Sets | 집합의 정의와 표기",
			"content_html": "<br>\n<br>\n<br>\n<h3 id=\"definition\" tabindex=\"-1\">정의 | definition: 서로 같지 않은, 잘 정의된, 객체의 모음을 집합이라 한다. <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Sets/2.1-Definition-and-Notations-of-Sets-%EC%A7%91%ED%95%A9%EC%9D%98-%EC%A0%95%EC%9D%98%EC%99%80-%ED%91%9C%EA%B8%B0/\">#</a></h3>\n<h3 id=\"notation\" tabindex=\"-1\">표기 | notation: <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Sets/2.1-Definition-and-Notations-of-Sets-%EC%A7%91%ED%95%A9%EC%9D%98-%EC%A0%95%EC%9D%98%EC%99%80-%ED%91%9C%EA%B8%B0/\">#</a></h3>\n<ul>\n<li>Enumerating Elements(Roster Form) | 원소 나열법\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>e</mi><mi>t</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>e</mi><msub><mi>l</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi>e</mi><msub><mi>l</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mi>e</mi><msub><mi>l</mi><mn>3</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>e</mi><msub><mi>l</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">Set=\\{el_1,el_2,el_3,\\dots,el_n\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">e</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">A=\\{1,2,3\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">}</span></span></span></span></li>\n</ul>\n</li>\n<li>Set Builder | 조건제시법\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>e</mi><mi>t</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>e</mi><mi>l</mi><mi mathvariant=\"normal\">∣</mi><mi>e</mi><mi>l</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><msup><mi>t</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi>s</mi><mi>c</mi><mi>o</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">Set=\\{el|element&#x27;s condition\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">}</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mn>1</mn><mo>≤</mo><mi>x</mi><mo>∈</mo><mi mathvariant=\"double-struck\">N</mi><mo>≤</mo><mn>4</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">A=\\{x|1 \\le x \\in \\N \\le 4 \\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.82486em;vertical-align:-0.13597em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">4</span><span class=\"mclose\">}</span></span></span></span></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"set\" tabindex=\"-1\">Set의 특징: <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Sets/2.1-Definition-and-Notations-of-Sets-%EC%A7%91%ED%95%A9%EC%9D%98-%EC%A0%95%EC%9D%98%EC%99%80-%ED%91%9C%EA%B8%B0/\">#</a></h3>\n<ul>\n<li>Empty sets | 공집합: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\emptyset=\\{\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">∅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mclose\">}</span></span></span></span>\n<ul>\n<li>공집합은 아무런 element가 없는 집합을 공집합이라 합니다.</li>\n</ul>\n</li>\n<li>Universal sets | 전체집합:\n<ul>\n<li>모든 대상을 원소로 포함하는 집합</li>\n</ul>\n</li>\n</ul>\n",
			"date_published": "2024-05-26T20:16:08Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JS/browser/when-to-use-worker/",
			"url": "https://zerozoo-a.github.io/blog/JS/browser/when-to-use-worker/",
			"title": "워커 쓰레드를 언제 쓰면 되나요?",
			"content_html": "<h1 id=\"worker\" tabindex=\"-1\">Worker 쓰레드는 대체 언제 쓸까 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/browser/when-to-use-worker/\">#</a></h1>\n<h2 id=\"\" tabindex=\"-1\">굳이 필요하지 않으므로 쓰지 않는 게 기본 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/browser/when-to-use-worker/\">#</a></h2>\n<p>자바스크립트는 메인 쓰레드를 기본으로 사용합니다. 그리고 별도의 쓰레드를 생성하지 않는 한, 메인 쓰레드만을 사용하는 것처럼 보입니다. 파일 시스템 작업과 같은 블로킹 I/O, DNS look up 등의 작업이 아닌 경우 libuv에서 제공하는 쓰레드 풀은 사용하지 않습니다. JS의 주된 사용처인 HTTP 통신은 OS 커널 단의 I/O를 사용하기 때문에 정확히는 쓰레드의 사용이라 보기 어렵습니다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">필요하다면 언제 필요한 것인가 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/browser/when-to-use-worker/\">#</a></h2>\n<p>대표적인 예로 CPU 집약적인 작업에 Worker 쓰레드의 필요성이 부각됩니다. 예를 들어:</p>\n<ul>\n<li>매우 큰 수 만큼 피보나치 수열을 구하거나,</li>\n<li>매우 큰 숫자가 소수인지 확인하거나,</li>\n<li>매우 큰 배열을 정렬하거나,</li>\n<li>그래픽 작업 등을 수행할 때 필요할 수 있습니다.</li>\n</ul>\n<p>이런 작업들은 사실상 JS의 메인 무대와는 거리가 있는 편입니다.</p>\n<h2 id=\"-2\" tabindex=\"-1\">사용한다면 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/browser/when-to-use-worker/\">#</a></h2>\n<p>실제 현업에서 Worker 쓰레드를 사용한다면 어떤 경우에 사용해야 좋을까요? 필자가 생각하는 괜찮을 것 같은 경우를 꼽아봤습니다. (아래의 모든 내용은 필자의 아이디어를 적어둔 것일 뿐이므로 아직 검증되지 않았습니다.)</p>\n<h3 id=\"-3\" tabindex=\"-1\">쓰레드를 사용해봤으면 하는 목록 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/browser/when-to-use-worker/\">#</a></h3>\n<ol>\n<li>화면단에서 가능한 최적화를 했으나, 그럼에도 불구하고 렌더링하는 데 버벅거리는 경우\n<ol>\n<li>특정 연산이 렌더링에 영향을 미치는 경우</li>\n<li>특정 연산이 렌더링에 영향을 미치지 않는 경우</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"-4\" tabindex=\"-1\">목록에 대한 설명과 장점 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/browser/when-to-use-worker/\">#</a></h3>\n<ol>\n<li>\n<p>화면단에서 가능한 최적화를 했으나, 그럼에도 불구하고...(생략)</p>\n<ul>\n<li>가능한 최적화가 되었으나 렌더링에 부하가 생기는 경우입니다. 웹 앱을 기준으로 화면 변경에 영향을 주는 상태에 의해 화면이 변경되니 상태를 다시 기준으로 잡겠습니다.</li>\n</ul>\n<p>이때, 두 가지 분기로 나뉩니다.</p>\n<ol>\n<li>상태의 변경이 포함되는 연산을 쓰레드에 넘긴다.</li>\n<li>상태의 변경을 제외한 연산을 쓰레드에 넘긴다.</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"-5\" tabindex=\"-1\">상태의 변경이 포함되는 경우 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/browser/when-to-use-worker/\">#</a></h4>\n<p>상태의 변경이 쓰레드의 <code>postMessage</code>에 의해 결정되어 메인 쓰레드는 해당 UI의 변경이 워커 쓰레드에 의해 결정됩니다. 따라서 메인 쓰레드는 메시지를 받기 전까지 UI의 업데이트가 없습니다. 대신 메시지가 오기 전까지 UI는 보다 부드러워집니다. (다른 UI 변경에 메인 쓰레드가 사용되고, 이후 메시지에 의해 UI가 변경되어 디바운스 처리되는 느낌)</p>\n<h4 id=\"-6\" tabindex=\"-1\">상태의 변경이 포함되지 않는 경우 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/browser/when-to-use-worker/\">#</a></h4>\n<p>이는 메인 쓰레드가 굳이 처리하지 않아도 되는 일반 연산을 워커 쓰레드에게 위임한다는 장점이 있습니다. 워커 쓰레드를 일반 연산에 사용하므로 메인 쓰레드는 보다 UI 렌더링 연산에 사용될 확률이 높아집니다. 일반 연산을 워커 쓰레드에게 위임하고 그 결과를 토대로 렌더링을 한다고 해도 메인 쓰레드가 일반 연산을 하지 않는 것은 좋은 현상입니다.</p>\n<h3 id=\"-7\" tabindex=\"-1\">단점 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/browser/when-to-use-worker/\">#</a></h3>\n<p>단점은 명확합니다.</p>\n<ol>\n<li>워커 쓰레드 생성에 오버헤드가 존재합니다.</li>\n<li>메인 쓰레드보다 느립니다.</li>\n<li>개발 난이도가 상승합니다. (유지보수, 코드의 이해도, 구현의 복잡함, 재사용성, 보다 많은 성능 요구)</li>\n</ol>\n<p>단점은 설명할 것이 따로 없을 정도로 단순한 내용입니다.</p>\n<h4 id=\"-8\" tabindex=\"-1\">마치며 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/browser/when-to-use-worker/\">#</a></h4>\n<p><a href=\"https://www.yellow-turban.n-e.kr/toy-projects/use-thread\">워커 쓰레드와 메인 쓰레드의 차이점</a></p>\n<p>위 링크의 매우 작은 토이 프로젝트를 진행하며 느낀 점을 작성해봤습니다. 쓰레드에 관심이 많아 해당 내용과 연계된 작은 프로젝트를 더 많이 만들고 포스트를 더 작성해볼 생각입니다. 감사합니다.</p>\n",
			"date_published": "2024-05-22T22:46:21Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Algebric_properties/1-3-Equations/",
			"url": "https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Algebric_properties/1-3-Equations/",
			"title": "1.3 Equations | 방정식",
			"content_html": "<br>\n<br>\n<br>\n<h3 id=\"\" tabindex=\"-1\">변수, 상수, 계수, 항 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Algebric_properties/1-3-Equations/\">#</a></h3>\n<ul>\n<li>변수 | variables:  함수의 입출력과 같이 상황에 따라 달라질 수 있는 값\n<ul>\n<li>상황에 따라 달라질 수 있으므로 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x,y,z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span>등으로 표현함</li>\n</ul>\n</li>\n<li>상수 | constants: 계산 중 변하지 않는 값</li>\n<li>계수 | coefficients:  변수에 곱해지는 상수\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">2x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">x</span></span></span></span>에서 2가 계수이다.</li>\n</ul>\n</li>\n<li>항 | term: 연산자를 기준으로 나뉘어 줌</li>\n</ul>\n<h2 id=\"equation\" tabindex=\"-1\">equation | 방정식 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Algebric_properties/1-3-Equations/\">#</a></h2>\n<p>방정식은 LHS = Left hand side, RHS = Right hand side로 이루어져 있다.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>L</mi><mi>H</mi><mi>S</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>R</mi><mi>H</mi><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(LHS) =(RHS)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>두 값이 등호를 통해 서로 같음을 나타내는 식을 방정식이라고 하고</p>\n<p>변수가 어떤 값이 되는지에 따라 equation은 서로 같음이 만족 혹은 불만족 될 수 있다.</p>\n<p>방정식을 푼다는 것은 방정식 내에 속하는 변수들의 값 혹은 조건을 찾는 과정을 “방정식을 푼다”라고 한다.</p>\n<p>방정식을 만족시키는 값 또는 조건을 방정식의 해(solution)라고 한다.</p>\n<p>모든 해의 집합을 해집합이라고 한다. (solution set)</p>\n<h2 id=\"-1\" tabindex=\"-1\">방정식의 규칙 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Algebric_properties/1-3-Equations/\">#</a></h2>\n<p>LHS, RHS에 같은 값을 더해도 그 관계에 변함은 없다.</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mi>a</mi><mo>:</mo><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">a=a:true</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>+</mo><mn>1</mn><mo>=</mo><mi>a</mi><mo>+</mo><mn>1</mn><mo>:</mo><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">a+1 = a+1:true</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span></span></span></span></li>\n</ul>\n<p>0이 아닌 값을 곱해도 그 관계에 변함은 없다.</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a=a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∗</mo><mn>2</mn><mo>=</mo><mi>a</mi><mo>∗</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">a*2=a*2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span></li>\n</ul>\n",
			"date_published": "2024-05-21T23:08:43Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/temp/good-table/",
			"url": "https://zerozoo-a.github.io/blog/temp/good-table/",
			"title": "good table",
			"content_html": "<br>\n<br>\n<br>\n<table>\n  <caption>\n    Data about the planets of our solar system (Planetary facts taken from\n    <a href=\"https://nssdc.gsfc.nasa.gov/planetary/factsheet/\">Nasa's Planetary Fact Sheet - Metric</a>).\n  </caption>\n  <thead>\n    <tr>\n      <td colspan=\"2\"></td>\n      <th scope=\"col\">Name</th>\n      <th scope=\"col\">Mass (10<sup>24</sup>kg)</th>\n      <th scope=\"col\">Diameter (km)</th>\n      <th scope=\"col\">Density (kg/m<sup>3</sup>)</th>\n      <th scope=\"col\">Gravity (m/s<sup>2</sup>)</th>\n      <th scope=\"col\">Length of day (hours)</th>\n      <th scope=\"col\">Distance from Sun (10<sup>6</sup>km)</th>\n      <th scope=\"col\">Mean temperature (°C)</th>\n      <th scope=\"col\">Number of moons</th>\n      <th scope=\"col\">Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th colspan=\"2\" rowspan=\"4\" scope=\"rowgroup\">Terrestrial planets</th>\n      <th scope=\"row\">Mercury</th>\n      <td>0.330</td>\n      <td>4,879</td>\n      <td>5427</td>\n      <td>3.7</td>\n      <td>4222.6</td>\n      <td>57.9</td>\n      <td>167</td>\n      <td>0</td>\n      <td>Closest to the Sun</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Venus</th>\n      <td>4.87</td>\n      <td>12,104</td>\n      <td>5243</td>\n      <td>8.9</td>\n      <td>2802.0</td>\n      <td>108.2</td>\n      <td>464</td>\n      <td>0</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Earth</th>\n      <td>5.97</td>\n      <td>12,756</td>\n      <td>5514</td>\n      <td>9.8</td>\n      <td>24.0</td>\n      <td>149.6</td>\n      <td>15</td>\n      <td>1</td>\n      <td>Our world</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Mars</th>\n      <td>0.642</td>\n      <td>6,792</td>\n      <td>3933</td>\n      <td>3.7</td>\n      <td>24.7</td>\n      <td>227.9</td>\n      <td>-65</td>\n      <td>2</td>\n      <td>The red planet</td>\n    </tr>\n    <tr>\n      <th rowspan=\"4\" scope=\"rowgroup\">Jovian planets</th>\n      <th rowspan=\"2\" scope=\"rowgroup\">Gas giants</th>\n      <th scope=\"row\">Jupiter</th>\n      <td>1898</td>\n      <td>142,984</td>\n      <td>1326</td>\n      <td>23.1</td>\n      <td>9.9</td>\n      <td>778.6</td>\n      <td>-110</td>\n      <td>67</td>\n      <td>The largest planet</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Saturn</th>\n      <td>568</td>\n      <td>120,536</td>\n      <td>687</td>\n      <td>9.0</td>\n      <td>10.7</td>\n      <td>1433.5</td>\n      <td>-140</td>\n      <td>62</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" scope=\"rowgroup\">Ice giants</th>\n      <th scope=\"row\">Uranus</th>\n      <td>86.8</td>\n      <td>51,118</td>\n      <td>1271</td>\n      <td>8.7</td>\n      <td>17.2</td>\n      <td>2872.5</td>\n      <td>-195</td>\n      <td>27</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Neptune</th>\n      <td>102</td>\n      <td>49,528</td>\n      <td>1638</td>\n      <td>11.0</td>\n      <td>16.1</td>\n      <td>4495.1</td>\n      <td>-200</td>\n      <td>14</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th colspan=\"2\" scope=\"rowgroup\">Dwarf planets</th>\n      <th scope=\"row\">Pluto</th>\n      <td>0.0146</td>\n      <td>2,370</td>\n      <td>2095</td>\n      <td>0.7</td>\n      <td>153.3</td>\n      <td>5906.4</td>\n      <td>-225</td>\n      <td>5</td>\n      <td>\n        Declassified as a planet in 2006, but this\n        <a href=\"https://www.usatoday.com/story/tech/2014/10/02/pluto-planet-solar-system/16578959/\">remains controversial</a>.\n      </td>\n    </tr>\n  </tbody>\n</table>\n",
			"date_published": "2024-05-21T00:04:48Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Algebric_properties/1-2-Identities/",
			"url": "https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Algebric_properties/1-2-Identities/",
			"title": "1.2 Identities &amp; Inverses | 항등원과 역원",
			"content_html": "<br>\n<br>\n<br>\n<ul>\n<li>a는 어떤 값이다.</li>\n<li>e는 항등원이다.</li>\n<li>⊥는 어떤 연산이다.</li>\n<li>x는 미지수다.</li>\n</ul>\n<h2 id=\"identities\" tabindex=\"-1\">Identities | 항등원 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Algebric_properties/1-2-Identities/\">#</a></h2>\n<ul>\n<li>정의: 항등원은 어떤 값(a)과 연산이 있을 때, 값에 대해 연산을 진행한 결과 원래의 값이 그대로 나오는 것을 의미한다.</li>\n</ul>\n<h3 id=\"\" tabindex=\"-1\">항등원에 대한 설명 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Algebric_properties/1-2-Identities/\">#</a></h3>\n<p>어떤 연산을 ⊥라고 하자.</p>\n<p>어떤 값을 a라고 하자.</p>\n<p>a⊥e=a라고 할 때, 값 a에 대해 연산 ⊥ e를 해도 값 a가 그대로 나왔다.</p>\n<p>이 때 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span>를 연산 ⊥에 대한 항등원이라고 한다.</p>\n<h3 id=\"additive-identity\" tabindex=\"-1\">덧셈에 대한 항등원 | additive identity <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Algebric_properties/1-2-Identities/\">#</a></h3>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>+</mo><mi>e</mi><mo>=</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a + e=a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> 이다.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>+</mo><mi>e</mi><mo>−</mo><mi>a</mi><mo>=</mo><mi>a</mi><mo>−</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a+e-a=a-a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">e=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></p>\n<p>0은 덧셈이 대한 항등원이다. 0은 임의의 a에 대한 additive identity (덧셈에 대한 항등원이다.)</p>\n<p>같은 맥락을 통해 곱셈에 대한 항등원을 구할 수 있다.</p>\n<h3 id=\"multiplicative-identity\" tabindex=\"-1\">곱셈에 대한 항등원 | multiplicative identity <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Algebric_properties/1-2-Identities/\">#</a></h3>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>⋅</mo><mi>e</mi><mo>=</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a\\cdot e=a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>에 대해 항등원 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span>를 구해보자.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>⋅</mo><mi>e</mi><mo>=</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a\\cdot e=a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>⋅</mo><mi>e</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mi>a</mi><mo>⋅</mo><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">=(a\\cdot e )\\cdot a^{-1}=a\\cdot a^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mi>e</mi><mo>⋅</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mfrac><mn>1</mn><mi>a</mi></mfrac><mo>=</mo><mi>a</mi><mo>⋅</mo><mfrac><mn>1</mn><mi>a</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">=(e\\cdot a)\\frac{1}{a}=a\\cdot \\frac{1}{a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo><mi>e</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">= e=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∴</mo><mi>e</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\therefore e=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69224em;vertical-align:0em;\"></span><span class=\"mrel amsrm\">∴</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></p>\n<p>따라서 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">e=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>이므로 항등원은 1이다.</p>\n<h2 id=\"inverses\" tabindex=\"-1\">Inverses | 역원 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Algebric_properties/1-2-Identities/\">#</a></h2>\n<ul>\n<li>정의: 어떤 값(a)과 연산(⊥)이 있을 때, 이 값에 연산을 진행한 결과 Identity가 되게 만드는 값</li>\n</ul>\n<h3 id=\"-1\" tabindex=\"-1\">역원에 대한 설명 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Algebric_properties/1-2-Identities/\">#</a></h3>\n<p>a ⊥ x = e 일 때, (e는 Identity)</p>\n<p>x는 연산 ⊥에 대해 Inverse다.</p>\n<h3 id=\"additive-inverse\" tabindex=\"-1\">덧셈에 대한 역원 | additive inverse <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Algebric_properties/1-2-Identities/\">#</a></h3>\n<p>값 a에 대해 아래와 같이 연산하면</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>+</mo><mo stretchy=\"false\">(</mo><mo>−</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a+(-a)=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">-a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">a</span></span></span></span>는 덧셈의 항등원을 출력한다. 따라서 -a는 값 a에 대한 역원이라 할 수 있다.</p>\n<h3 id=\"multiplicative-inverse\" tabindex=\"-1\">곱셈에 대한 역원 | multiplicative inverse <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Algebric_properties/1-2-Identities/\">#</a></h3>\n<p>식 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>⋅</mo><mi>x</mi><mo>=</mo><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">a\\cdot x=e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span>에 대해</p>\n<ul>\n<li>e를 곱셈에 대한 항등원인 multiplicative identity라고 했을 때, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">e = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>이다.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>는 a에 곱해졌을 때, identity를 출력하므로 역원이라 할 수 있다.</li>\n<li>따라서 x를 구하면 a의 곱셈에 대한 역원을 구할 수 있다.</li>\n</ul>\n<p>따라서</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>⋅</mo><mi>x</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a\\cdot x=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo><mi>a</mi><mo>⋅</mo><mi>x</mi><mo>⋅</mo><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mn>1</mn><mo>⋅</mo><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">= a\\cdot x \\cdot a^{-1}=1\\cdot a^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo><mi>x</mi><mo>=</mo><mfrac><mn>1</mn><mi>a</mi></mfrac><mo>=</mo><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">= x=\\frac{1}{a}=a^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> 이다.</p>\n<p>a = 5일 때,</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn><mo>⋅</mo><mi>x</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">5\\cdot x = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>인 경우 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><msup><mn>5</mn><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">x = 5^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>이다. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>5</mn><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">5^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>은 5의 곱셈에 대한 역원이다.</p>\n<blockquote>\n<p>💡 inverse는 존재하지 않을 수 있다. 예를 들어\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>⋅</mo><mi>x</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a\\cdot x = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>이라는 식에서 a=0이고, inverse를 구한다고 하자\n이는 바로 성립하지 않음을 알 수 있다. (0에 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>를 곱해 1을 만들 수는 없다.)</p>\n</blockquote>\n",
			"date_published": "2024-05-18T23:36:13Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Algebric_properties/1-1-Commutative,-Associative,-Distributive/",
			"url": "https://zerozoo-a.github.io/blog/MATHEMATICS/FreeFromMath/Algebric_properties/1-1-Commutative,-Associative,-Distributive/",
			"title": "1.1 Commutative, Associative, Distributive",
			"content_html": "<br>\n<br>\n<br>\n<p>대수학에서 새로운 연산에 대해 아래의 세 연산이 성립하는지 아는 것은 중요하다.</p>\n<ul>\n<li>\n<p>Commutative properties | 교환법칙</p>\n<ul>\n<li>두 대상의 이항연산의 값이 두 원소의 순서에 관계없다는 성질이다.\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>=</mo><mi>b</mi><mo>+</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a + b = b + a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>⋅</mo><mi>b</mi><mo>=</mo><mi>b</mi><mo>⋅</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a \\cdot b = b \\cdot a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Associative properties | 결합법칙</p>\n<ul>\n<li><a href=\"https://ko.wikipedia.org/wiki/%EC%88%98%ED%95%99\">수학</a>에서 <strong>결합법칙</strong>(結合 法則, associative property)은 <a href=\"https://ko.wikipedia.org/wiki/%EC%9D%B4%ED%95%AD%EC%97%B0%EC%82%B0\">이항연산</a>이 가질 수 있는 성질이다. 한 식에서 <a href=\"https://ko.wikipedia.org/wiki/%EC%97%B0%EC%82%B0_(%EC%88%98%ED%95%99)\">연산</a>이 두 번 이상 연속될 때, 앞쪽의 연산을 먼저 계산한 값과 뒤쪽의 연산을 먼저 계산한 결과가 항상 같을 경우 그 연산은 <strong>결합법칙을 만족한다</strong>고 한다.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mi>X</mi><mi>b</mi><mo stretchy=\"false\">)</mo><mi>X</mi><mi>c</mi><mo>=</mo><mi>a</mi><mi>X</mi><mo stretchy=\"false\">(</mo><mi>b</mi><mi>X</mi><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(aXb) X c = a X (b X c)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo>−</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>c</mi><mo mathvariant=\"normal\">≠</mo><mi>a</mi><mo>−</mo><mo stretchy=\"false\">(</mo><mi>b</mi><mo>−</mo><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(a-b)-c \\ne a-(b-c)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span></span></span></span>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo><mi>a</mi><mo>−</mo><mi>b</mi><mo>−</mo><mi>c</mi><mo mathvariant=\"normal\">≠</mo><mi>a</mi><mo>−</mo><mi>b</mi><mo>+</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">= a-b-c \\ne a-b+c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Distributive properties | 분배법칙</p>\n<ul>\n<li>대수계(代數系) S의 임의의 세 원소에 대하여 두 개의 연산을 분배한 값이 성립하는 법칙을 말한다. 이를테면, a×(b＋c)=(a×b)+(a×c)이 분배법칙을 만족한다. 2개의 연산 X, 🎸가 정의되어 있는 대수계(代數系)</li>\n<li>S의 임의의 원소 a,b,c에 대하여 등식</li>\n<li>aX(b🎸c)=(aXb)🎸(aXc)</li>\n<li>(b🎸c)Xa=(bXa)🎸(cXa)</li>\n</ul>\n</li>\n</ul>\n",
			"date_published": "2024-05-16T22:30:12Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/temp/java-with-vscode/",
			"url": "https://zerozoo-a.github.io/blog/temp/java-with-vscode/",
			"title": "java with vscode",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"vscode-java\" tabindex=\"-1\">vscode에서 java <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/temp/java-with-vscode/\">#</a></h2>\n<p>https://code.visualstudio.com/docs/java/java-tutorial</p>\n<h3 id=\"vscode-format-any-programming-language\" tabindex=\"-1\">vscode format any programming language <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/temp/java-with-vscode/\">#</a></h3>\n<p>아래와 같이 입력하면 vscode setting에서 언어별 formatting을 설정 할 수 있다.</p>\n<p><code>command + shift + p</code> then <code>type format document.</code></p>\n",
			"date_published": "2024-04-17T23:38:10Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/temp/ERROR:-for-mysql-Cannot-start-service-mysql-network-IP-not-found/",
			"url": "https://zerozoo-a.github.io/blog/temp/ERROR:-for-mysql-Cannot-start-service-mysql-network-IP-not-found/",
			"title": "ERROR: for mysql Cannot start service mysql network `hash` not found",
			"content_html": "<br>\n<br>\n<br>\n<p>위 에러가 뜨는 경우</p>\n<pre class=\"language-sh\" tabindex=\"0\"><code class=\"language-sh\"><span class=\"token function\">docker</span> system prune</code></pre>\n<p>을 실행해보고 다시 해보자</p>\n",
			"date_published": "2024-02-25T00:27:36Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/wiki/infra/ssh-commands/",
			"url": "https://zerozoo-a.github.io/blog/wiki/infra/ssh-commands/",
			"title": "ssh 사용법",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">기본적인 사용법 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/infra/ssh-commands/\">#</a></h1>\n<blockquote>\n<p>ssh -i &quot;your-ssh-key-file.key&quot; name@ip&quot;</p>\n</blockquote>\n<p>ssh의 개인키 파일은 잘 보관해두어야 합니다.</p>\n<p><a href=\"https://velog.io/@dldhk97/%EC%98%A4%EB%9D%BC%ED%81%B4-%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C%EC%97%90-%EB%8F%84%EC%BB%A4-MYSQL-%EC%84%A4%EC%B9%98%ED%95%B4%EB%B3%B4%EA%B8%B0\">링크</a>에서 OCI 설정을 잘 설명해주고 있습니다.</p>\n<h2 id=\"password\" tabindex=\"-1\">개인키 대신 password로 접근 가능하게 변경 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/infra/ssh-commands/\">#</a></h2>\n<blockquote>\n<p>ssh -i &quot;your-ssh-key-file.key&quot; name@ip&quot;</p>\n</blockquote>\n<p>을 통해 원격에 접속합니다.\nubuntu를 기준으로합니다.</p>\n<p><code>/etc/ssh</code>에서 <code>sshd_config</code> 파일을 수정합니다.</p>\n<pre class=\"language-sh\" tabindex=\"0\"><code class=\"language-sh\"><span class=\"token comment\"># /etc/ssh</span>\n\n<span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> sshd_config</code></pre>\n<p><code>PasswordAuthentication</code> 설정을 <code>no</code>에서 <code>yes</code>로 변경합니다.</p>\n<pre class=\"language-sh\" tabindex=\"0\"><code class=\"language-sh\"><span class=\"token comment\"># /etc/ssh/sshd_config file</span>\n\n<span class=\"token comment\"># PasswordAuthentication no</span>\nPasswordAuthentication <span class=\"token function\">yes</span></code></pre>\n",
			"date_published": "2024-02-24T10:58:05Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/wiki/infra/nginx-with-docker-compose/",
			"url": "https://zerozoo-a.github.io/blog/wiki/infra/nginx-with-docker-compose/",
			"title": "nginx와 docker와 docker-compose의 기본 조합",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">목표 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/infra/nginx-with-docker-compose/\">#</a></h1>\n<ul>\n<li>\n<p><code>nginx</code>를 이용해 웹 서버를 생성해보자</p>\n</li>\n<li>\n<p><code>docker</code>를 이용해 <code>nginx</code>를 말아보자</p>\n</li>\n<li>\n<p><code>docker-compose</code>를 이용해 쉽게 <code>docker</code>를 사용해보자</p>\n</li>\n<li>\n<p>목표를 통해 이루는 것: <code>docker</code>로 띄워진 <code>nginx</code> 서버를 이용해 <code>static file</code>을 <code>serve</code> 할 수 있다.</p>\n</li>\n</ul>\n<h2 id=\"setting\" tabindex=\"-1\">Setting <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/infra/nginx-with-docker-compose/\">#</a></h2>\n<ul>\n<li>\n<p>준비물</p>\n<ul>\n<li><code>docker</code>\n<ul>\n<li><code>docker</code>가 설치 되어있어야 합니다.</li>\n</ul>\n</li>\n<li><code>docker-compose</code></li>\n<li><code>nginx</code>는 <code>docker</code>에서 이미지로 받아 사용하기 때문에, <code>local</code>에선 굳이 설치 할 필요가 없습니다.</li>\n<li><code>linux 기반 pc (window는 잘 모르겠어요 죄송해요)</code></li>\n</ul>\n</li>\n<li>\n<p>프로젝트의 구조는 아래와 같습니다.</p>\n<pre class=\"language-sh\" tabindex=\"0\"><code class=\"language-sh\">    <span class=\"token builtin class-name\">.</span>\n├── Dockerfile\n├── README.md\n├── app\n│   ├── assets\n│   │   └── css\n│   │       └── styles.css // mime를 잘 받는지 테스트하기 위해\n│   ├── index.html  // root\n│   ├── pages // route를 테스트하기 위해\n│   │   ├── eng\n│   │   │   └── index.html\n│   │   ├── index.html\n│   │   └── kr\n│   │       └── index.html\n│   └── src\n│       └── package.json\n├── docker-compose.yml\n└── nginx.conf</code></pre>\n</li>\n</ul>\n<h3 id=\"-1\" tabindex=\"-1\">프로젝트 예시 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/infra/nginx-with-docker-compose/\">#</a></h3>\n<p>이 프로젝트는 아래의 링크를 통해 clone 받을 수 있습니다.</p>\n<pre class=\"language-sh\" tabindex=\"0\"><code class=\"language-sh\"><span class=\"token function\">git</span> clone https://github.com/zerozoo-a/nginx-docker-setting-1</code></pre>\n<h2 id=\"dockerfile\" tabindex=\"-1\">Dockerfile을 정의하기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/infra/nginx-with-docker-compose/\">#</a></h2>\n<ul>\n<li>🐋: <code>docker</code>의 역할은 <code>nginx</code>와 <code>node.js</code>의 이미지를 가져와 일정한 <code>Container</code> 환경을 구축하는 것입니다.\n이번 글에서 <code>node.js</code>를 적극 사용하지 않으나 프로젝트의 골자가 되어줄 <code>WAS</code>가 되어줄 것이기에 초반부터 <code>Dockerfile</code> 세팅이 섞어두는 것이 좋습니다.</li>\n</ul>\n<pre class=\"language-Dockerfile\" tabindex=\"0\"><code class=\"language-Dockerfile\"># node.js image를 받아옵니다.\n# 원하는 언어를 취향에 맞게 세팅해도 좋겠습니다.\nFROM node:alpine as build-stage \n\nWORKDIR /app\n\nCOPY . .\n\n# nginx를 세팅하기 위해 nginx를 가져옵니다.\nFROM nginx:latest\n\n# 루트에 nginx.conf 파일을 생성해주세요.\n# image에서 기본 제공되는 nginx.conf를 덮어 씌울 것입니다.\n# image에 있는 conf의 위치를 알 수 있습니다.\nCOPY nginx.conf /etc/nginx/nginx.conf\n\n# nginx가 제공할 file들을 nginx/html로 복사합니다.\nCOPY --from=build-stage /app /usr/share/nginx/html\n\n# 원하는 포트를 열어주세요 443은 https를 위해 열어줍니다.\nEXPOSE 8080 443\n\n# 이제 세팅이 끝났으니 nginx를 실행합니다.\nCMD [\"nginx\", \"-g\", \"daemon off;\"]</code></pre>\n<p><code>Docker</code>에는 정말 필요한 부분만 작성되어 있습니다.\n<code>node.js</code> 환경을 설치했지만 따로 <code>node</code>를 사용하는 곳이 전혀 없는데요</p>\n<p>하지만 <code>node</code> 자체는 설치되어 있으므로 이 프로젝트를 기반으로 <code>node</code>를 원하는대로 사용하면 됩니다.\n<code>python</code>이 필요하다면 <code>python</code>을 설치하면 되겠습니다.</p>\n<h2 id=\"docker-compose-yml\" tabindex=\"-1\">docker-compose.yml 파일 정의하기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/infra/nginx-with-docker-compose/\">#</a></h2>\n<p><code>docker-compose.yml</code> 파일은 <code>Dockerfile</code>을 원하는 옵션으로 실행시켜주기 위한 <code>config</code>가 설정되어 있습니다.\n주석으로 각 용도를 간단히 설명했습니다.</p>\n<pre class=\"language-yml\" tabindex=\"0\"><code class=\"language-yml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.8'</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span> .\n      <span class=\"token key atrule\">dockerfile</span><span class=\"token punctuation\">:</span> Dockerfile <span class=\"token comment\"># 읽어들일 Dockerfile</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8080:8080\"</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"443:443\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./nginx.conf<span class=\"token punctuation\">:</span>/etc/nginx/nginx.conf<span class=\"token punctuation\">:</span>ro <span class=\"token comment\"># conf의 위치 (ro = read only)</span>\n      <span class=\"token punctuation\">-</span> .<span class=\"token punctuation\">:</span>/usr/share/nginx/html <span class=\"token comment\"># nginx가 가지고 있을 WAS의 위치</span>\n      <span class=\"token comment\"># 환경변수 지정</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> NODE_ENV=production\n\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"nginx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-g\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"daemon off;\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 영구적으로 저장할 volume을 지정해주세요</span>\n<span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">app-data</span><span class=\"token punctuation\">:</span></code></pre>\n<h2 id=\"nginx-conf\" tabindex=\"-1\">nginx.conf 설정하기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/infra/nginx-with-docker-compose/\">#</a></h2>\n<ul>\n<li>작동원리를 이해하기 위해 기본적인 내용만 담겨있습니다.</li>\n</ul>\n<pre class=\"language-nginx.conf\" tabindex=\"0\"><code class=\"language-nginx.conf\">http {\n    include mime.types;\n\n    server {\n        listen 8080;\n        root /usr/share/nginx/html/app;\n\n        location /kr {\n            root /usr/share/nginx/html/app/pages;\n        }\n\n        location /eng {\n            alias /usr/share/nginx/html/app/pages;\n        }\n    }\n}</code></pre>\n<ul>\n<li>\n<p><code>include mime.types;</code>: <code>nginx</code>에서 데이터를 호출하는 경우 <code>http</code>에서 사용하는 <code>mime</code>가 필요합니다.\n이를 넣어주지 않을 경우 모두 <code>plain/text</code>로 받아들이기 때문에 정상적인 데이터 호출이 불가능합니다. 꼭 넣어주세요.</p>\n</li>\n<li>\n<p><code>server</code>: 서버는 <code>nginx</code>가 요청을 받았을 때 어떻게 처리했으면 좋을지에 대한 설정을 입력받습니다.</p>\n<ul>\n<li><code>listen</code>: <code>nginx</code>가 받아들일 <code>port</code>를 설정합니다. <code>8080</code> 포트로 요청을 보낼경우 <code>nginx</code>가 요청을 가져갑니다.</li>\n<li><code>root</code>: <code>nginx</code>가 바라볼 <code>root dir</code>입니다. 위에서 <code>docker</code>로 <code>WAS</code>를 옮긴 바로 그 곳입니다.</li>\n<li><code>location</code>: 해당 설정 내부에 <code>root</code>를 다시 설정하는 것을 볼 수 있습니다. <code>/pages/kr</code>로 요청시 <code>/pages/kr/index.html</code>을 반환합니다.</li>\n</ul>\n</li>\n</ul>\n<p>위 설정은 nginx의 이해를 위해 간단한 설정을 넣어본 것입니다.</p>\n<p>실제 사용을 위한 config는 이정도로 턱없이 부족 할 것입니다.</p>\n<h2 id=\"-2\" tabindex=\"-1\">사용해보기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/infra/nginx-with-docker-compose/\">#</a></h2>\n<p>docker가 준비된 환경에서 아래의 명령어를 통해 환경을 구성합니다.</p>\n<pre class=\"language-sh\" tabindex=\"0\"><code class=\"language-sh\"><span class=\"token function\">git</span> clone https://github.com/zerozoo-a/nginx-docker-setting-1</code></pre>\n<p><code>clone</code> 받은 경로로 이동합니다.\n<code>docker container app</code>을 실행해주세요.</p>\n<p><code>terminal</code>에 <code>docker-compose up</code>명령어를 입력해주세요.\n<code>container</code>가 실행되면서 의존성이 설치됩니다.</p>\n<p><code>http://localhost:8080/</code>에 접속해보면 잘 접속되는 것을 확인해볼 수 있습니다.\n<code>clone</code> 받은 파일의 <code>root/index.html</code> 파일을 수정 후 저장해보면 바로 바로 반영이 되는 것도 확인 할 수 있습니다.</p>\n<h2 id=\"-3\" tabindex=\"-1\">정리하기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/infra/nginx-with-docker-compose/\">#</a></h2>\n<p><code>docker, nginx, git</code>의 만만세입니다.</p>\n<p>다음에 기회가 되면 node 기반의 front, backend project들을 docker로 말아두고\nOCI에 배포해보겠습니다.</p>\n<p>감사합니다.</p>\n<blockquote>\n<p>만약 에러가 발생한다면\ndocker container app에서 preference &gt; resources &gt; file sharing\n탭에서 경로를 추가해주어야 합니다. 만약 root에서 작업했다면 /를 추가해주세요</p>\n</blockquote>\n",
			"date_published": "2024-02-22T23:35:45Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/web_gpu/hello-web-gpu/",
			"url": "https://zerozoo-a.github.io/blog/web_gpu/hello-web-gpu/",
			"title": "Hello, WebGPU",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"webgpu\" tabindex=\"-1\">WebGPU 이해하기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/web_gpu/hello-web-gpu/\">#</a></h1>\n<h2 id=\"webgpu-1\" tabindex=\"-1\">글의 목적: WebGPU의 대략적인 작동방식의 이해 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/web_gpu/hello-web-gpu/\">#</a></h2>\n<blockquote>\n<p>WebGPU를 사용하기전 참고차 정리합니다.</p>\n</blockquote>\n<ul>\n<li>WebGPU는 gpu 자원을 사용한 병렬 연산에 특화되어 있습니다.\n<ul>\n<li>이는 꼭 gpu 자원을 사용한 연산이 그래픽에만 사용된다는 것을 의미하지 않고, 더 넓은 사용성을 가진다는 것을 뜻합니다.\n<ul>\n<li>예를 들어 tensorflow.js등에서도 사용중입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>WebGPU는 gpu의 job queue에, shader 언어로 작성된 그래픽 작업을 요청하는 것입니다.\n<ul>\n<li>그래픽 작업은 렌더링 파이프라인의 형태로 작성됩니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"\" tabindex=\"-1\">렌더링 파이프라인 간보기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/web_gpu/hello-web-gpu/\">#</a></h2>\n<p>렌더링 파이프라인은 개발자가 GPU의 계산 능력을 활용해 고성능 그래픽스 및 계산 작업을 수행하도록 합니다.\nWebGPU는 아래와 같은 렌더링 파이프라인을 지나가며 그래픽 작업을 수행합니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\ngraph TD;\n    A[Vertex Processing] --> B[Primitive Assembly & Rasterization];\n    B --> C[Fragment Processing];\n    C --> D[Depth and Stencil Testing];\n    D --> E[Output Merging];\n</div>\n<p>렌더링 파이프라인은 컴퓨터 그래픽스에서 아주 중요한 내용인지라 나중에 다시 다루어보겠습니다.</p>\n<h2 id=\"hello\" tabindex=\"-1\">Hello, 삼각형 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/web_gpu/hello-web-gpu/\">#</a></h2>\n<p>WebGPU를 사용해 삼각형을 그려보겠습니다.</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token comment\">// 최신 browser 환경 기준</span>\n\n<span class=\"token comment\">/**\n * WebGPU를 사용하기 위한 browser api들을 initialize합니다.\n */</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span>\n\t\t\t<span class=\"token operator\">|</span> HTMLCanvasElement\n\t\t\t<span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n\t\t\t<span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>canvas<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas is required\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">const</span> adapter <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>gpu<span class=\"token punctuation\">.</span><span class=\"token function\">requestAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>adapter<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"navigator gpu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">const</span> device <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> adapter<span class=\"token punctuation\">.</span><span class=\"token function\">requestDevice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webgpu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>canvas <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>context <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>device<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas, context, device is required\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\t\tcanvas<span class=\"token punctuation\">,</span>\n\t\t\tdevice<span class=\"token punctuation\">,</span>\n\t\t\tcontext<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\t\tcanvas<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n\t\t\tdevice<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n\t\t\tcontext<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token comment\">/** \n * 모든 함수가 집합될 main 함수입니다.\n*/</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>wgls<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> canvas<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> device <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>canvas <span class=\"token operator\">||</span> context <span class=\"token operator\">||</span> device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas, context, device is required\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * wgls입니다. js의 string 타입으로 작성 가능합니다.\n * \n * vertex와 fragment로 나뉘어져 있습니다.\n */</span>\n<span class=\"token keyword\">const</span> vertexShaderCode <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n        @vertex\n        fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4&lt;f32> {\n            var positions = array&lt;vec2&lt;f32>, 3>(\n                vec2&lt;f32>(0.0, 0.5),\n                vec2&lt;f32>(-0.5, -0.5),\n                vec2&lt;f32>(0.5, -0.5)\n            );\n            let position = positions[VertexIndex];\n            return vec4&lt;f32>(position, 0.0, 1.0);\n        }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> fragmentShaderCode <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n        @fragment\n        fn main() -> @location(0) vec4&lt;f32> {\n            return vec4&lt;f32>(0.0, 1.0, 0.0, 1.0); // RGBA: Green\n        }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre>\n<p>전체 코드는 아래와 같습니다.</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>wgls<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">/** 필수 object들에 대한 init */</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> canvas<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> device <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>canvas <span class=\"token operator\">||</span> context <span class=\"token operator\">||</span> device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas, context, device is required\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/** 캔버스의 컨텍스트 구성 */</span>\n\t<span class=\"token keyword\">const</span> format <span class=\"token operator\">=</span> <span class=\"token string\">\"bgra8unorm\"</span><span class=\"token punctuation\">;</span>\n\tcontext<span class=\"token punctuation\">.</span><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\tdevice<span class=\"token punctuation\">,</span>\n\t\tformat<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/** 컨텍스트의 텍스쳐 구성 */</span>\n\t<span class=\"token keyword\">const</span> textureView<span class=\"token operator\">:</span> GPUTextureView <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/** 렌더 패스 설정을 정의합니다. 여기서는 색상 버퍼를 지우고 저장하는 방법을 지정합니다. */</span>\n\t<span class=\"token keyword\">const</span> renderPassDescriptor<span class=\"token operator\">:</span> GPURenderPassDescriptor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\tcolorAttachments<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\tview<span class=\"token operator\">:</span> textureView<span class=\"token punctuation\">,</span>\n\t\t\t\tclearValue<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> r<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> g<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t\tloadOp<span class=\"token operator\">:</span> <span class=\"token string\">\"clear\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\tstoreOp<span class=\"token operator\">:</span> <span class=\"token string\">\"store\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/** vertex, fragment shader를 module을 생성합니다.*/</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>vertexShaderModule<span class=\"token punctuation\">,</span> fragmentShaderModule<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">createShaderModules</span><span class=\"token punctuation\">(</span>\n\t\twgls<span class=\"token punctuation\">,</span>\n\t\tdevice\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/** rendering pipeline을 생성하며, shader와 rendering 설정을 포함합니다. */</span>\n\t<span class=\"token keyword\">const</span> pipeline <span class=\"token operator\">=</span> device<span class=\"token punctuation\">.</span><span class=\"token function\">createRenderPipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\tvertex<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\tmodule<span class=\"token operator\">:</span> vertexShaderModule<span class=\"token punctuation\">,</span>\n\t\t\tentryPoint<span class=\"token operator\">:</span> <span class=\"token string\">\"main\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tfragment<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\tmodule<span class=\"token operator\">:</span> fragmentShaderModule<span class=\"token punctuation\">,</span>\n\t\t\tentryPoint<span class=\"token operator\">:</span> <span class=\"token string\">\"main\"</span><span class=\"token punctuation\">,</span>\n\t\t\ttargets<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t\tformat<span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tprimitive<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\ttopology<span class=\"token operator\">:</span> <span class=\"token string\">\"triangle-list\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tlayout<span class=\"token operator\">:</span> <span class=\"token string\">\"auto\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/** GPU에 명령을 전달하기 위한 encoder를 생성합니다. */</span>\n\t<span class=\"token keyword\">const</span> commandEncoder <span class=\"token operator\">=</span> device<span class=\"token punctuation\">.</span><span class=\"token function\">createCommandEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> passEncoder <span class=\"token operator\">=</span> commandEncoder<span class=\"token punctuation\">.</span><span class=\"token function\">beginRenderPass</span><span class=\"token punctuation\">(</span>renderPassDescriptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpassEncoder<span class=\"token punctuation\">.</span><span class=\"token function\">setPipeline</span><span class=\"token punctuation\">(</span>pipeline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// pipeline을 설정</span>\n\tpassEncoder<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 세 개의 꼭짓점으로 삼각형 그리기</span>\n\tpassEncoder<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// render pass 작성을 종료합니다.</span>\n\tdevice<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>commandEncoder<span class=\"token punctuation\">.</span><span class=\"token function\">finish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// gpu의 queue에 작업을 밀어넣습니다.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span>\n\t\t\t<span class=\"token operator\">|</span> HTMLCanvasElement\n\t\t\t<span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n\t\t\t<span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>canvas<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas is required\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">const</span> adapter <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>gpu<span class=\"token punctuation\">.</span><span class=\"token function\">requestAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>adapter<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"navigator gpu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">const</span> device <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> adapter<span class=\"token punctuation\">.</span><span class=\"token function\">requestDevice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webgpu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>canvas <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>context <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>device<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas, context, device is required\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\t\tcanvas<span class=\"token punctuation\">,</span>\n\t\t\tdevice<span class=\"token punctuation\">,</span>\n\t\t\tcontext<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\t\tcanvas<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n\t\t\tdevice<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n\t\t\tcontext<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createShaderModules</span><span class=\"token punctuation\">(</span>\n\twgls<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\tdevice<span class=\"token operator\">:</span> GPUDevice<span class=\"token punctuation\">,</span>\n\tmap<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> array<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> GPUShaderModule\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> GPUShaderModule<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> map\n\t\t<span class=\"token operator\">?</span> wgls<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">:</span> wgls<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>wgl<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> device<span class=\"token punctuation\">.</span><span class=\"token function\">createShaderModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> code<span class=\"token operator\">:</span> wgl <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/** wgls입니다. 강타입언어로 js를 이용해 string타입으로 WebGPU API에 넘겨주는 형태가 됩니다. */</span>\n<span class=\"token keyword\">const</span> vertexShaderCode <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n        @vertex\n        fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4&lt;f32> {\n            var positions = array&lt;vec2&lt;f32>, 3>(\n                vec2&lt;f32>(0.0, 0.5),\n                vec2&lt;f32>(-0.5, -0.5),\n                vec2&lt;f32>(0.5, -0.5)\n            );\n            let position = positions[VertexIndex];\n            return vec4&lt;f32>(position, 0.0, 1.0);\n        }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> fragmentShaderCode <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n        @fragment\n        fn main() -> @location(0) vec4&lt;f32> {\n            return vec4&lt;f32>(0.0, 1.0, 0.0, 1.0); // RGBA: Green\n        }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** window가 로드되면 wgls를 main함수에 넘겨주면서 gpu를 이용한 렌더링이 시작됩니다. */</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>vertexShaderCode<span class=\"token punctuation\">,</span> fragmentShaderCode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>아래에 위 코드를 작동시켰을 경우 WebGPU를 사용 할 수 있는 환경이라면,\n삼각형이 canvas에 그려진 것을 확인 할 수 있습니다.\n아직 web gpu를 지원하지 않는 환경에선 에러메시지가 보입니다.</p>\n<p>혹은 <a href=\"https://zerozoo-a.github.io/sub_domains/web_gpu/src/examples/triangle/\">이 링크를 통해서도 확인 가능합니다.</a></p>\n<p><canvas id=\"triangle\"></canvas></p>\n<script>\n\tvar l=Object.defineProperty;var d=(s,r,i)=>r in s?l(s,r,{enumerable:!0,configurable:!0,writable:!0,value:i}):s[r]=i;var n=(s,r,i)=>(d(s,typeof r!=\"symbol\"?r+\"\":r,i),i);(function(){const r=document.createElement(\"link\").relList;if(r&&r.supports&&r.supports(\"modulepreload\"))return;for(const e of document.querySelectorAll('link[rel=\"modulepreload\"]'))c(e);new MutationObserver(e=>{for(const t of e)if(t.type===\"childList\")for(const o of t.addedNodes)o.tagName===\"LINK\"&&o.rel===\"modulepreload\"&&c(o)}).observe(document,{childList:!0,subtree:!0});function i(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),e.crossOrigin===\"use-credentials\"?t.credentials=\"include\":e.crossOrigin===\"anonymous\"?t.credentials=\"omit\":t.credentials=\"same-origin\",t}function c(e){if(e.ep)return;e.ep=!0;const t=i(e);fetch(e.href,t)}})();class f{constructor(){n(this,\"wgls\");n(this,\"canvasRef\");n(this,\"canvas\");n(this,\"adapter\",null);n(this,\"context\",null);n(this,\"device\",null);n(this,\"isInitialized\",!1)}async init(r){var i,c;try{const e=document.getElementById(r);if(!e)throw Error(\"canvas is required\");this.canvas=e;const t=await navigator.gpu.requestAdapter();if(!t)throw Error(\"navigator gpu\");this.adapter=t;const o=await t.requestDevice();this.device=o;const a=e.getContext(\"webgpu\");if(this.context=a,!e||!a||!o)throw Error(\"canvas, context, device is required\")}catch(e){console.error(e);const t=document==null?void 0:document.createElement(\"div\");t.innerText=`${e}`,t.id=r,(c=(i=this.canvas)==null?void 0:i.parentElement)==null||c.replaceChild(t,this.canvas),this.canvas=this.adapter=this.context=this.device=null}finally{this.isInitialized=!0}}}\n\t// export{f as W};\n\n\n// import{W as d}from\"./web_gpu_instance-D-KTR6md.js\";\nconst s=async function(){const t=\"bgra8unorm\",r=\"triangle\",o=`\n        @vertex\n        fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n            var positions = array<vec2<f32>, 3>(\n                vec2<f32>(0.0, 0.5),\n                vec2<f32>(-0.5, -0.5),\n                vec2<f32>(0.5, -0.5)\n            );\n            let position = positions[VertexIndex];\n            return vec4<f32>(position, 0.0, 1.0);\n        }`,a=`\n        @fragment\n        fn main() -> @location(0) vec4<f32> {\n            return vec4<f32>(0.0, 0.1, 0.8, 1.0); // RGBA: Green\n        }`,e=new f;if(await e.init(r),!(e.device&&e.context&&e.canvas&&e.adapter))return;e.context.configure({device:e.device,format:t});const c=await e.device.createRenderPipelineAsync({vertex:{module:e.device.createShaderModule({code:o}),entryPoint:\"main\"},fragment:{module:e.device.createShaderModule({code:a}),entryPoint:\"main\",targets:[{format:t}]},primitive:{topology:\"triangle-list\"},layout:\"auto\"}),i=e.device.createCommandEncoder(),n=i.beginRenderPass({colorAttachments:[{view:e.context.getCurrentTexture().createView(),clearValue:{r:0,g:0,b:0,a:1},loadOp:\"clear\",storeOp:\"store\"}]});n.setPipeline(c),n.draw(3,1,0,0),n.end(),e.device.queue.submit([i.finish()])};(async function(){await s()})();\n\n\n</script>",
			"date_published": "2024-02-17T21:47:50Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/env/docker-compose-nestjs-typescript/",
			"url": "https://zerozoo-a.github.io/blog/env/docker-compose-nestjs-typescript/",
			"title": "docker compose와 nest.js와 5.x typescript 세팅하기",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"docker-nest-js-compose\" tabindex=\"-1\">docker로 nest.js를 말고 compose로 띄워보자 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/env/docker-compose-nestjs-typescript/\">#</a></h2>\n<ul>\n<li><code>docker</code>와 <code>docker-compose</code>의 기본적인 사용법을 알고 있다는 가정하에 진행됩니다.</li>\n<li><code>docker, docker-compose, npm, node</code>등의 개발 환경은 이미 갖추어진 상태라고 가정합니다.</li>\n<li><code>nest.js</code>만을 띄웁니다.</li>\n<li>완성된 repo: <code>git clone https://github.com/zerozoo-a/docker_compose_nestjs</code></li>\n</ul>\n<h3 id=\"nest-js\" tabindex=\"-1\">nest.js 프로젝트 준비 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/env/docker-compose-nestjs-typescript/\">#</a></h3>\n<p><code>docker</code>를 사용해 <code>nest.js</code> 프로젝트를 말아보겠습니다.\n적당히 <code>nest.js</code> 프로젝트를 생성해주세요.</p>\n<p>간단히 실험해보고 싶다면 아래의 <code>repo</code>를 클론해주세요</p>\n<pre class=\"language-sh\" tabindex=\"0\"><code class=\"language-sh\"><span class=\"token function\">git</span> clone https://github.com/nestjs/typescript-starter.git project</code></pre>\n<h3 id=\"dockerfile\" tabindex=\"-1\">Dockerfile 만들기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/env/docker-compose-nestjs-typescript/\">#</a></h3>\n<p>아래의 환경을 그대로 사용해도 좋으나 원한다면 조금씩 변경해주세요.\n프로젝트의 루트에 <code>Dockerfile</code>이라는 이름의 파일을 생성하고 아래의 설정을 작성합니다.</p>\n<pre class=\"language-Dockerfile\" tabindex=\"0\"><code class=\"language-Dockerfile\">FROM node:21-alpine\n\nWORKDIR /usr/src/app\n\nCOPY package*.json ./\n\nRUN npm ci\n\nCOPY . .\n\nEXPOSE 8080\n\nCMD [\"npm\", \"run\", \"start:dev\"]</code></pre>\n<h3 id=\"docker-compose-yml\" tabindex=\"-1\">docker-compose.yml 파일 만들기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/env/docker-compose-nestjs-typescript/\">#</a></h3>\n<p>똑같이 프로젝트의 루트에 <code>docker-compose.yml</code> 파일을 생성하고\n아래의 설정을 넣어주세요</p>\n<pre class=\"language-yml\" tabindex=\"0\"><code class=\"language-yml\"><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">nestjs</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span> .\n      <span class=\"token key atrule\">dockerfile</span><span class=\"token punctuation\">:</span> Dockerfile\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8080:8080\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> .<span class=\"token punctuation\">:</span>/usr/src/app\n      <span class=\"token punctuation\">-</span> /usr/src/app/node_modules\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> NODE_ENV=development</code></pre>\n<h3 id=\"\" tabindex=\"-1\">특이사항 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/env/docker-compose-nestjs-typescript/\">#</a></h3>\n<p><code>nest.js</code>는 기본적으로 <code>typescript template</code>을 제공합니다.</p>\n<blockquote>\n<p>typescript 5.1.3버전 부터는 <code>hot reload</code>에 <code>tsconfig.json</code> 파일의 설정을 추가할 것을 강제합니다.\n이 세팅을 추가하지 않을 경우 컨테이너를 띄운 상태에서 volume 범위에 속하는 파일을 변경할 때,\ncontainer는 에러를 표시하고 컨테이너가 내려갑니다.</p>\n</blockquote>\n<p>기존의 <code>tsconfig.json</code>에 아래의 옵션을 추가해주세요</p>\n<p><a href=\"https://blog.stackademic.com/using-docker-compose-to-run-nestjs-applications-with-redis-and-postgres-586ab132b60c\">출처</a></p>\n<pre class=\"language-json\" tabindex=\"0\"><code class=\"language-json\"><span class=\"token property\">\"watchOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Use native file system events for files and directories</span>\n    <span class=\"token property\">\"watchFile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"priorityPollingInterval\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"watchDirectory\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dynamicprioritypolling\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Poll files for updates more frequently</span>\n    <span class=\"token comment\">// when they're updated a lot.</span>\n    <span class=\"token property\">\"fallbackPolling\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dynamicPriority\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Don't coalesce watch notification</span>\n    <span class=\"token property\">\"synchronousWatchDirectory\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Finally, two additional settings for reducing the amount of possible</span>\n    <span class=\"token comment\">// files to track  work from these directories</span>\n    <span class=\"token property\">\"excludeDirectories\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"**/node_modules\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"-1\" tabindex=\"-1\">실행하기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/env/docker-compose-nestjs-typescript/\">#</a></h3>\n<p><code>CLI</code>를 통해 실행해도 좋지만 번거러우므로 <code>package.json</code>에 아래의 <code>script</code>를 추가해주세요</p>\n<pre class=\"language-json\" tabindex=\"0\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"docker-compose up --build\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"stop\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"docker-compose down\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이제 <code>npm run dev</code>를 입력하면 <code>docker-compose</code>를 통해 <code>image</code>가 생성되고 <code>container</code>까지 띄워집니다.</p>\n",
			"date_published": "2024-02-14T23:44:58Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/algos/O(n)/find-missing-number/",
			"url": "https://zerozoo-a.github.io/blog/algos/O(n)/find-missing-number/",
			"title": "[leetcode_268]: 숫자 배열에서 빠져있는 숫자 하나를 찾는 방법",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">문제 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/O(n)/find-missing-number/\">#</a></h1>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>\n<p>위 배열은 길이가 4입니다.</p>\n</li>\n<li>\n<p>예로 배열에 순서대로 값을 채워넣는 경우 <code>[0, 1, 2, 3]</code>으로 이 때 빠진 값은 4입니다.</p>\n<ul>\n<li>0을 포함하기 때문에 배열의 길이와 빠진 수 없이 온전한 수열은 양립 할 수 없습니다.</li>\n</ul>\n</li>\n<li>\n<p>위 배열에서 빠진 숫자는 2입니다.</p>\n</li>\n</ul>\n<p>해당 숫자를 O(n)의 시간복잡도와 O(1)의 공간복잡도를 사용해 빠진 숫자 2를 찾아봅시다.</p>\n<h3 id=\"bitwise-operator-xor\" tabindex=\"-1\">bitwise operator - xor를 사용하는 방법 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/O(n)/find-missing-number/\">#</a></h3>\n<p>xor는 두개의 비트에 대해 서로 다를 경우 1, 같을 경우 0을 반환합니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token number\">1</span> <span class=\"token operator\">^</span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// = 01 ^ 00 = 01</span>\n<span class=\"token number\">2</span> <span class=\"token operator\">^</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token comment\">// = 10 ^ 01 = 11</span></code></pre>\n<p>xor는 결합법칙과 교환법칙이 성립합니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\nx <span class=\"token operator\">^</span> y <span class=\"token operator\">=</span> y <span class=\"token operator\">^</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 00 ^ 01 == 01 ^ 00</span>\nx <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">^</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> y <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">^</span> x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 01 ^ (00 ^ 00)</span></code></pre>\n<h3 id=\"-1\" tabindex=\"-1\">문제의 조금 더 디테일한 이해 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/O(n)/find-missing-number/\">#</a></h3>\n<p>문제는 한 숫자 배열을 입력으로 줍니다.\n예를 들어 <code>[1, 0, 3, 4]</code>를 배열로 주었을 때,\n배열의 길이는 4입니다.\n0 ~ 3까지의 배열을 순회하면서 총 가질 수 있는 숫자는 4개이므로\n위 주어진 배열과 같이 2라는 값이 빠지게 됩니다.\n이 때, 2를 반환하면 됩니다.</p>\n<p>다시 예를 들면 <code>[1, 2, 3]</code>이라는 배열은 배열의 길이가 3이고\n0이라는 값이 빠졌으므로 0을 반환하면 됩니다.</p>\n<p>배열의 길이와 같은 메모리를 사용해 체크하면 O(n)만큼의 시간, 공간 복잡도를 사용해\n문제를 해결 할 수 있겠으나, O(n)의 시간복잡도와, O(1)의 공간복잡도를 사용해 문제를 해결해야 합니다.</p>\n<h2 id=\"-2\" tabindex=\"-1\">계산된 값으로 보는게 아닌 변수의 전달 측면으로 본다면.. <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/O(n)/find-missing-number/\">#</a></h2>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">findMissingNumberFrom</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> xor <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        xor <span class=\"token operator\">=</span> xor <span class=\"token operator\">^</span> i <span class=\"token operator\">^</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> xor<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위 함수를 통해 이루어지는 반복문 안의 계산들을 나열해보겠습니다.</p>\n<ul>\n<li><code>5 = 4 ^ 0 ^ 1</code></li>\n<li><code>4 = 5 ^ 1 ^ 0</code></li>\n<li><code>5 = 4 ^ 2 ^ 3</code></li>\n<li><code>2 = 5 ^ 3 ^ 4</code>\n찾는 값 2</li>\n</ul>\n<p>xor는 이전 값들의 결과를 계속 저장하는 역할을 합니다.\n따라서 아래와 같이 나열해 볼 수 있습니다.</p>\n<ul>\n<li><code>5 = 4 ^ 0 ^ 1</code>에서 <code>4 ^ 0 ^ 1</code>을 계산한 결과가 5입니다.</li>\n<li>따라서 <code>4 ^ 0 ^ 1</code>을 가져옵니다.</li>\n<li><code>4 = 5 ^ 1 ^ 0</code>에서 5는 이전 결과값이므로 <code>^ 1 ^ 0</code>을 가져옵니다.</li>\n<li>이 과정을 반복하면</li>\n<li><code>xor = 4 ^ 0 ^ 1 ^ 1 ^ 0 ^ 2 ^ 3 ^ 3 ^ 4</code>이 됩니다.</li>\n<li>이를 계산해보면 2라는 값이 도출됩니다.</li>\n<li>즉 xor를 초기화한 것은 이전 xor의 계산 결과를 다음 반복문에 넘겨주는 역할을 합니다.</li>\n</ul>\n<p>이제 xor의 값 자체에 주목하는 것이 아닌 xor는 이전에 무슨 값이였고,\n값을 다음 반복문에 넘겨주는 역할도 한다는 것을 알게 되었습니다.</p>\n<blockquote>\n<p>위와 같은 xor 연산도 좋습니다만 다른 방법도 있습니다.\n예를 들어 배열의 총 합을 구합니다. 배열은 0부터 n까지 정렬되어 있지 않은 수의 집합이고\n그 중 하나의 수만 빠져 있습니다. 따라서 0부터 n까지의 합을 구하고 실제 반복문을 돌아\n총 합에서 반복문을 돌아서 구한 합을 빼주면 나오는 차의 값이 배열에서 누락된 값입니다.</p>\n</blockquote>\n<h2 id=\"xor-swap\" tabindex=\"-1\">재미있는 xor을 활용한 변수 swap <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/O(n)/find-missing-number/\">#</a></h2>\n<p>위 문제는 변수를 다음 반복문으로 넘기는 방법을 사용했습니다.</p>\n<p>위와 관련해 하나 더 재미있는 xor operator를 이용해 변수간 값의 swap이 가능합니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\na <span class=\"token operator\">=</span> a <span class=\"token operator\">^</span> b<span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">=</span> a <span class=\"token operator\">^</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// b ^ (a ^ b) == b ^ (b ^ a) == a 이제, b == a</span>\na <span class=\"token operator\">=</span> a <span class=\"token operator\">^</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// a ^ b ^ a == a ^ a ^ b == 0 ^ b == b 이제, a == b</span>\n\na <span class=\"token comment\">// 2</span>\nb <span class=\"token comment\">// 1</span></code></pre>\n<p>놀랍게도 스왑이 이루어졌습니다.</p>\n<p>bitwise operator의 숨은 장점은 잘 사용하는 경우 코딩을 정말 잘해보이는\n효과가 있습니다.\n🤣</p>\n",
			"date_published": "2024-02-12T13:37:49Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/algos/dfs/find-subsets/",
			"url": "https://zerozoo-a.github.io/blog/algos/dfs/find-subsets/",
			"title": "find subsets",
			"content_html": "<br>\n<br>\n<br>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {number[]} nums\n * */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">subset</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 공집합은 미리 넣어둡니다.</span>\n\n<span class=\"token comment\">/**\n * @param {number} index\n * @param {number[]} stack\n *\n * 제공받은 nums 배열의 길이만큼 반복합니다.\n * 배열의 길이가 2인 경우 2번 반복합니다.\n * 반복문 내에서 i를 증가하며 재귀함수를 호출합니다.\n * \n * 반복문의 i의 초기화 조건에 따라 제공받은 nums 배열의 i번째\n * 값부터 stack에 push 합니다.\n * \n * - 재귀 1회차: 1을 push하고 재귀 호출\n * result = [[], [1]] \n * stack = [1] \n * \n * - 재귀 2회차: 2를 push하고 재귀 호출\n * result = [[], [1], [1, 2]] \n * stack = [1, 2] \n * \n * - 재귀 3회차: 반복문이 종료되어 call stack pop 2회차의 재귀 call 다음으로 이어짐\n * \n * - 재귀 2회차: stack.pop하고 재귀 1회차의 재귀 call 다음으로 이어짐\n * stack = [1] \n * \n * - 재귀 1회차: stack.pop하고 반복문 i의 값을 올림\n * stack = [] \n * \n * - 이어지는 반복문 i 값이 올라가고 제공받은 nums 배열의 i+1값부터 위 과정을 반복\n * 이 때 stack은 비어져 있고\n * stack에는 2부터 채워짐\n * \n * 예를 들어 배열 [1, 2, 3, 4]에 대해\n * \n * result = [[], [1], [1, 2]] 까지 채우고 stack을 pop하며 비움\n * 반복문이 돌아서 2부터 subset을 채움\n * result = [[], [1], [1, 2], [2], [2, 3]]\n * 이를 배열의 길이만큼 반복합니다.\n * */</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> stack</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>stack<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 빈 배열을 stack으로 넘겨줍니다.</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">subset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n",
			"date_published": "2024-02-06T01:17:30Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/babylons/scene/",
			"url": "https://zerozoo-a.github.io/blog/babylons/scene/",
			"title": "babylon.js 알아보기",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"scene\" tabindex=\"-1\">Scene <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/babylons/scene/\">#</a></h2>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'renderCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> engine <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BABYLON<span class=\"token punctuation\">.</span>Engine</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createScene</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> scene <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BABYLON<span class=\"token punctuation\">.</span>Scene</span><span class=\"token punctuation\">(</span>engine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    scene<span class=\"token punctuation\">.</span>clearColor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BABYLON<span class=\"token punctuation\">.</span>Color3<span class=\"token punctuation\">.</span>Black</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> alpha <span class=\"token operator\">=</span>  Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> beta <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> radius <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BABYLON<span class=\"token punctuation\">.</span>Vector3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> camera <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BABYLON<span class=\"token punctuation\">.</span>ArcRotateCamera</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Camera\"</span><span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">,</span> beta<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    camera<span class=\"token punctuation\">.</span><span class=\"token function\">attachControl</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> light <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BABYLON<span class=\"token punctuation\">.</span>HemisphericLight</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"light\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BABYLON<span class=\"token punctuation\">.</span>Vector3</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> box <span class=\"token operator\">=</span> <span class=\"token constant\">BABYLON</span><span class=\"token punctuation\">.</span>MeshBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBox</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"box\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    box<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n    box<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> scene<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> sceneToRender <span class=\"token operator\">=</span> <span class=\"token function\">createScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nengine<span class=\"token punctuation\">.</span><span class=\"token function\">runRenderLoop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    sceneToRender<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n",
			"date_published": "2024-02-04T19:07:27Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/algos/dfs/maze/",
			"url": "https://zerozoo-a.github.io/blog/algos/dfs/maze/",
			"title": "dfs로 미로 풀기",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"dfs\" tabindex=\"-1\">dfs와 미로 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/dfs/maze/\">#</a></h2>\n<p>dfs는 그래프를 탐색하는 방법의 하나입니다.</p>\n<p>이 dfs를 통해 미로를 빠져 나올 수 있을지 알아보겠습니다.</p>\n<h2 id=\"\" tabindex=\"-1\">미로와 그래프 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/dfs/maze/\">#</a></h2>\n<p>미로는 그래프로 표현할 수 있습니다.\n예를 들어 아래와 같은 그래프가 있다고 하겠습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">/**\n * S = 시작,\n * 1 = 길,\n * 0 = 벽,\n * E = 출구\n */</span>\n<span class=\"token keyword\">const</span> graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"S\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"E\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span></code></pre>\n<ul>\n<li>시작을 S에서부터</li>\n<li>0은 벽으로 지나갈 수 없음</li>\n<li>1은 길로 지나갈 수 있음</li>\n<li>E는 종료조건</li>\n</ul>\n<p>시작위치에서 부터 이동가능한 방향은 동서남북입니다.</p>\n<p>동서남북 모두 이동해보고 더 이상 진행이 불가능하면 해당 루트를 포기합니다.\n물론 모든 위치이동마다 visited 변수에 기록하는 것과\n이동했던 행적을 표시하는 path 변수도 필수입니다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">미로찾기는 현위치에서 사방을 둘러보는 것의 반복 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/dfs/maze/\">#</a></h2>\n<p>S에서 부터 시작해 반복문을 통해 미로를 탈출해야 합니다.\n아래 미로를 S vertex에서 부터 시작해 탈출해보겠습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">/**\n * S = 시작,\n * 1 = 길,\n * 0 = 벽,\n * E = 출구\n */</span>\n<span class=\"token keyword\">const</span> graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"S\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"E\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span></code></pre>\n<p>S에서 사방을 둘러봅니다. 현재 위치는 2차원 배열을 기준으로 0, 0입니다.\n현 위치를 기준으로 사방의 효율적인 길찾기가 아닌,\n현 vertex를 기준으로 이동 가능한 4가지 방향을 모두 탐색합니다.</p>\n<ol>\n<li>현 위치를 x, y라고 하겠습니다.</li>\n<li>graph의 현 위치가 종료 지점인지 파악합니다. 맞다면 종료, 아니면 진행합니다.</li>\n<li>x, y에 <code>[-1, 0], [0, -1], [1, 0], [0, 1]</code>을 각각 대입해봅니다.\n<ol>\n<li><code>(x, y) = (0, 0)</code>일 때, 순서대로</li>\n<li><code>0 -1, 0 + 0</code>의 좌표에 대한 검사가 진행됩니다.\n<ol>\n<li>해당 좌표가 maze 범위 내인지,</li>\n<li>벽이 아닌지</li>\n<li>이미 방문했던 좌표인지</li>\n<li>x, y중 하나라도 음수인지</li>\n</ol>\n</li>\n<li>확인이 끝나고 위 조건을 모두 통과한다면 종료지점이거나 길인 경우입니다.</li>\n</ol>\n</li>\n<li>이 과정을 반복해 길을 찾아갑니다.</li>\n</ol>\n<h2 id=\"-2\" tabindex=\"-1\">코드 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/dfs/maze/\">#</a></h2>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">solveMaze</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">maze<span class=\"token punctuation\">,</span> startX<span class=\"token punctuation\">,</span> startY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> rows <span class=\"token operator\">=</span> maze<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> cols <span class=\"token operator\">=</span> maze<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> visited <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> rows <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>cols<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>startX<span class=\"token punctuation\">,</span> startY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 시작점 좌표를 stack에 쌓습니다.</span>\n\n  <span class=\"token comment\">// 이동 할 방향을 정의합니다.</span>\n  <span class=\"token keyword\">const</span> directions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  visited<span class=\"token punctuation\">[</span>startX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>startY<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// stack의 값을 pop합니다.</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maze<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"E\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// pop으로 꺼낸 좌표가 종료 좌표라면 마지막 좌표와 path를 merge해 반환합니다.</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>path<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 주변 탐색을 위해 이동 가능한 경로의 2차원 배열을 순회합니다.</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>dx<span class=\"token punctuation\">,</span> dy<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> directions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> newX <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 현재 위치에서 dx를 더합니다.</span>\n      <span class=\"token keyword\">const</span> newY <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 현재 위치에서 dy를 더합니다.</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token comment\">// 아래 조건은 모두 and 조건, </span>\n      <span class=\"token comment\">// 현재 vertex에 대한 탐색이 아닌 현재 vertex에 인접한 vertex에 대한 탐색</span>\n        newX <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token comment\">// newX는 0 이상이여야 합니다. 음수인경우 maze의 범위를 벗어납니다.</span>\n        newX <span class=\"token operator\">&lt;</span> rows <span class=\"token operator\">&amp;&amp;</span> <span class=\"token comment\">// newX는 maze의 가로길이를 넘어선 안됩니다.</span>\n        newY <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token comment\">// newY는 0 이상이여야 합니다. 음수인경우 maze의 범위를 벗어납니다.</span>\n        newY <span class=\"token operator\">&lt;</span> cols <span class=\"token operator\">&amp;&amp;</span> <span class=\"token comment\">// newY는 maze의 세로길이를 넘어선 안됩니다.</span>\n        <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>newX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newY<span class=\"token punctuation\">]</span> <span class=\"token comment\">// 이미 방문했는지 확인</span>\n        maze<span class=\"token punctuation\">[</span>newX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newY<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token comment\">// 탐색중인 주변 vertex가 벽이 아닌지 확인합니다.</span>\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token comment\">// 위 조건들을 통과했다면</span>\n          <span class=\"token punctuation\">[</span>newX<span class=\"token punctuation\">,</span> newY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// stack에 이동 가능한 다음 vertex 좌표를 stack에 밀어 넣습니다.</span>\n          <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>path<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// stack은 이동 가능한 다음 vertex를 모두 모아둡니다. </span>\n          <span class=\"token comment\">// (해결 가능한 다른 루트가 있다고 하더라도 먼저 pop되어 탐색하는 루트를 기준으로 출구까지 찾아감)</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        visited<span class=\"token punctuation\">[</span>newX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newY<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 길 혹은 출구라면 visited에 기록합니다.</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// stack이 모두 소진되는 경우 </span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Example maze</span>\n<span class=\"token comment\">// 0 = wall, 1 = path, S = start, E = end</span>\n<span class=\"token keyword\">const</span> maze <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"S\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"E\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">solveMaze</span><span class=\"token punctuation\">(</span>maze<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The starting point coordinates</span></code></pre>\n",
			"date_published": "2024-01-31T23:20:26Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/data-structure/reference-of-stack/",
			"url": "https://zerozoo-a.github.io/blog/data-structure/reference-of-stack/",
			"title": "reference of stack",
			"content_html": "<br>\n<br>\n<br>\n비어있는 스택은 아래와 같이 표현하겠습니다.\n<table>\n<thead>\n<tr>\n<th>nil</th>\n</tr>\n</thead>\n</table>\n<p>값이 들어있다면 이렇게 표현됩니다.</p>\n<table>\n<thead>\n<tr>\n<th>A</th>\n</tr>\n</thead>\n</table>\n<p>stack에 push를 해보겠습니다.\nB를 push하는 경우 아래와 같이 표현하겠습니다.</p>\n<table>\n<thead>\n<tr>\n<th>B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A</td>\n</tr>\n</tbody>\n</table>\n<p>pop하는 경우 B가 stack에서 제거됩니다.\n이는 pop 될 stack에 (p)를 붙여 표현하겠습니다.</p>\n<table>\n<thead>\n<tr>\n<th>B(p)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A</td>\n</tr>\n</tbody>\n</table>\n<p>pop 되어 아래와 같이 되어짐 A만 남게 됩니다.</p>\n<table>\n<thead>\n<tr>\n<th>A</th>\n</tr>\n</thead>\n</table>\n",
			"date_published": "2024-01-29T23:55:48Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/algos/dfs/iterative-dfs/",
			"url": "https://zerozoo-a.github.io/blog/algos/dfs/iterative-dfs/",
			"title": "반복문을 사용한 깊이 우선 탐색(dfs)에 대해",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">깊이 우선 탐색 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/dfs/iterative-dfs/\">#</a></h1>\n<ul>\n<li>깊이 우선 탐색: 트리를 포함한 그래프에서 사용되는 알고리즘으로 <br> 시작 그래프에서부터 가능한 깊게 탐색해 <br> 원하는 결과값을 찾는 알고리즘입니다.</li>\n</ul>\n<h2 id=\"-1\" tabindex=\"-1\">대상이 될 그래프 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/dfs/iterative-dfs/\">#</a></h2>\n<p>그래프를 한눈에 보기 쉽게 표현하면 아래와 같습니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\ngraph TD;\n    A-->B;\n    A-->C;\n    B-->D;\n    B-->E;\n    C-->F;\n    D-->G;\n    E-->H;\n    F-->I;\n</div>\n<p>자바스크립트로 표현하면 아래와 같이 표현 가능합니다. <br></p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">A</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">B</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"E\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">C</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"F\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">D</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"G\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">E</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"H\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">F</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"I\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이제 이 그래프를 dfs를 이용해서 탐색해보겠습니다.</p>\n<h2 id=\"dfs\" tabindex=\"-1\">dfs를 이용해서 탐색하기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/dfs/iterative-dfs/\">#</a></h2>\n<p>iterative한 dfs 탐색은 stack을 기반으로 탐색합니다.</p>\n<p>위에서 예시로 든 그래프를 기반으로 탐색하는 것은 생각보다 시간이 너무 오래걸리니 그래프를\n작게 다시 만들어 보겠습니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\ngraph TD;\nA-->B\nA-->C\nB-->D\n</div>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">A</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">B</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>만만해진 그래프를 가지고 dfs 알고리즘을 설명하겠습니다.</p>\n<p>dfs를 반복문으로 풀어내는 경우 stack이 사용됩니다.</p>\n<h2 id=\"dfs-stack\" tabindex=\"-1\">dfs와 잘어울리는 stack <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/dfs/iterative-dfs/\">#</a></h2>\n<p><a href=\"https://zerozoo-a.github.io/blog/data-structure/reference-of-stack/\"> stack의 표현</a>은\n링크의 설명을 참고해주세요</p>\n<p>위 그래프를 stack을 쌓고 터트리는 과정을 통해 설명하겠습니다.</p>\n<table>\n<thead>\n<tr>\n<th>nil</th>\n</tr>\n</thead>\n</table>\n<table>\n<thead>\n<tr>\n<th>A(p)</th>\n</tr>\n</thead>\n</table>\n<ul>\n<li>노드의 시작점인 A를 stack에 쌓습니다.</li>\n<li>stack을 pop하면서 log를 통해 내보냅니다.</li>\n<li>A가 가리키고 있는 노드에 대해 반복문을 돌고 차례대로 stack에 push 합니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>C(p)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>B</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>stack을 pop하면서 log를 통해 내보냅니다.</li>\n<li>C가 가리키고 있는 노드가 있는지 확인해보지만 C는 엣지를 가지고 있지 않습니다.</li>\n<li>pop되어집니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>B(p)</th>\n</tr>\n</thead>\n</table>\n<ul>\n<li>stack을 pop하면서 log를 통해 내보냅니다.</li>\n<li>B가 가리키고 있는 노드에 대해 반복문을 돌고 차례대로 stack에 push 합니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>D(p)</th>\n</tr>\n</thead>\n</table>\n<ul>\n<li>stack을 pop하면서 log를 통해 내보냅니다.</li>\n<li>D가 가리키고 있는 노드가 있는지 확인해보지만 D는 엣지를 가지고 있지 않습니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>nil</th>\n</tr>\n</thead>\n</table>\n<ul>\n<li>stack이 모두 비워졌습니다. 그래프를 모두 순회했습니다.</li>\n</ul>\n<h2 id=\"visited\" tabindex=\"-1\">이미 방문한 노드를 체크하는 visited <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/dfs/iterative-dfs/\">#</a></h2>\n<ul>\n<li>위 스택의 설명에는 나와있지 않지만 아래 dfs에선 하나의 자료구조를 더 사용합니다.</li>\n<li>Set입니다. 이는 이미 방문한적이 있는 node를 걸러주기 위해 존재합니다.</li>\n</ul>\n<p>예를 들어 그래프를 아래와 같이 작성한다면 어떨까요?</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">A</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">B</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>A는 B를 가리키고 C는 따로 가리키는 노드가 없습니다.\nB는 다시 A를 가리킵니다.</p>\n<p>반복문에서 B는 그래프의 A를 다시 지목해 B, C를 스택에 쌓고\nB를 pop할 때, B는 A를 다시 지목하여 무한 반복됩니다.\n따라서 이 순환을 끊기 위해서는 이를 기록하는 visited 변수가 필요합니다.</p>\n<h2 id=\"-2\" tabindex=\"-1\">구현 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/dfs/iterative-dfs/\">#</a></h2>\n<p>위 모든 과정을 코드로 표현하면 아래와 같이 표현됩니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">graph<span class=\"token punctuation\">,</span> start</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 시작 노드를 stack으로 만듭니다.</span>\n  <span class=\"token keyword\">const</span> visited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 방</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> currentNode <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    visited<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">[</span>currentNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      graph<span class=\"token punctuation\">[</span>currentNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">A</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">B</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"-3\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/dfs/iterative-dfs/\">#</a></h2>\n<p>기본적인 구현은 위와 같으나 이를 다양하게 응용한 문제와 사용례들이 존재합니다.</p>\n<p>다음엔 이를 응용한 미로탐색을 알아보겠습니다.</p>\n<p>감사합니다.</p>\n",
			"date_published": "2024-01-29T22:19:46Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IP-subnet/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IP-subnet/",
			"title": "큰 네트워크를 나누는 subnet",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">할당된 주소 범위를 나누는 서브넷 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IP-subnet/\">#</a></h1>\n<p>서브넷은 큰 네트워크를 정적 혹은 동적으로 나누는 것을 의미합니다.</p>\n<blockquote>\n<p>여기서 말하는 큰 네트워크라는 것은 할당된 주소 범위를 의미합니다.\n단일 주소가 아닌 주소의 범위를 ISP로부터 할당받은 주소 범위를 가리킵니다.</p>\n</blockquote>\n<h2 id=\"-1\" tabindex=\"-1\">서브넷을 나누는 두가지 방법 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IP-subnet/\">#</a></h2>\n<p>이 주소 범위를 나누는 것을 서브넷이라고 하며 서브넷은 두가지로 방법으로 나뉩니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\ngraph TD;\nA(\"서브넷\") --> B(\"가변길이 서브넷마스크 (FLSM)\")\nA(\"서브넷\") --> C(\"고정길이 서브넷마스크 (VLSM)\")\n</div>\n<h2 id=\"-2\" tabindex=\"-1\">장점 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IP-subnet/\">#</a></h2>\n<ul>\n<li>서브넷은 네트워크 트래픽을 분산해 성능을 개선합니다.</li>\n<li>각 서브넷은 서로 격리되어 있어 서브넷간 간섭이 없습니다.</li>\n<li>서브넷은 네트워크 관리를 단순하게합니다.</li>\n</ul>\n<h2 id=\"-3\" tabindex=\"-1\">예시 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IP-subnet/\">#</a></h2>\n<p>예를 들어,</p>\n<p>IP 주소 범위가 192.168.0.0 부터 192.168.255.255인 큰 네트워크 범위를 아래와 같이 나눌 수 있다.</p>\n<ul>\n<li>192.168.1.0/24 (0~255)</li>\n<li>192.168.2.0/24 (0~255)</li>\n<li>192.168.N.0/24 (0~255)</li>\n</ul>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\ngraph TD;\nA(\"192.168.0.0 ~ 192.168.255.255\") --> B(\"192.168.1.0/24\")\nA --> C(\"192.168.2.0/24\")\nA --> D(\"192.168.N.0/24\")\n</div>\n<p>각 서브넷은 256개(0-255)의 IP 주소를 가질 수 있으며, 각각 독립적으로 작동합니다.</p>\n<p>이제 서브넷을 나누는 알고리즘에 대해\n알아보겠습니다.</p>\n<h2 id=\"flsm\" tabindex=\"-1\">고정 길이 서브넷 마스크 (FLSM) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IP-subnet/\">#</a></h2>\n<ul>\n<li>\n<p>정의: FLSM은 모든 서브넷이 동일한 크기를 가지는 서브넷팅 방식입니다. 즉, 모든 서브넷에 동일한 길이의 서브넷 마스크를 사용합니다.</p>\n</li>\n<li>\n<p>사용: FLSM은 네트워크의 각 부분이 유사한 크기의 호스트 그룹을 필요로 할 때 사용됩니다.</p>\n</li>\n<li>\n<p>단점: IP 주소 공간이 낭비될 수 있습니다. 예를 들어, 몇 개의 호스트만 필요한 작은 네트워크에도 불구하고, 더 큰 서브넷을 할당해야 할 수 있습니다.</p>\n</li>\n</ul>\n<h3 id=\"-4\" tabindex=\"-1\">예시 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IP-subnet/\">#</a></h3>\n<ul>\n<li>네트워크 주소 <code>192.168.1.0</code>를 가진 <code>/24</code> 서브넷 마스크를 가진 네트워크가 있는 경우를 가정하겠습니다.</li>\n</ul>\n<p><code>/24</code>는 CIDR 표기법으로 첫 24비트 즉 3 옥텟이 네트워크 ID로 사용되는 것을 의미하며\n3 옥텟이 네트워크 ID로 사용되었으므로 마지막 옥텟을 호스트 ID로 사용 할 수 있습니다.</p>\n<p>따라서 0부터 255까지 256개의 IP 주소를 포함하게 됩니다.</p>\n<blockquote>\n<p>단, 실제 사용가능한 주소는 <code>256 - 2</code>개인데 두 주소를 빼는 이유는 prefix된 주소이기 때문입니다.</p>\n<ul>\n<li>네트워크 주소: <code>192.168.1.0</code>은 해당 주소를 식별하기 위한 네트워크 주소로 이미 정해져 있는 값입니다.</li>\n<li>브로드캐스트 주소: <code>192.168.1.255</code>는 해당 네트워크를 사용하는 모두에게 데이터를 동시에 전송하기 위한 주소입니다.</li>\n</ul>\n</blockquote>\n<p>256개의 호스트를 4개의 서브넷으로 나누기 위해 호스트 주소 공간에서 2 비트를 네트워크 주소 공간으로 재할당합니다.\n이는 위에서 설명한 <code>/24</code>가 <code>/26</code>이 된다는 의미입니다.</p>\n<ul>\n<li>2 비트는 00, 01, 10, 11로 4개의 서브넷을 만들 수 있는 자리로 충분합니다.</li>\n</ul>\n<blockquote>\n<p>네트워크 주소: <code>11111111 11111111 11111111</code> + 호스트 주소: <code>11111111</code><br>\n네트워크 주소: <code>11111111 11111111 11111111 11</code> + 호스트 주소: <code>111111</code></p>\n</blockquote>\n<p>호스트 주소 2비트를 네트워크 주소로 재할당했기 때문에 이제 호스트 주소는 6비트만이 남았습니다.</p>\n<h3 id=\"192-168-1-0-24-4\" tabindex=\"-1\">네트워크 주소 <code>192.168.1.0/24</code>일 때 서브넷을 4개로 나누기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IP-subnet/\">#</a></h3>\n<p>원래의 서브넷 마스크: <code>255.255.255.0</code> = (network)<code>11111111.11111111.11111111</code>.(host)<code>00000000</code>\n원래의 호스트 주소 범위: <code>192.168.1.1 ~ 192.168.1.254</code> = <code>11111111.11111111.11111111.00000000</code> (254개의 호스트)</p>\n<p>위 호스트 주소 범위를 4등분 하기 위해선 호스트 주소의 2 자리를 네트워크 주소에 내주어야 합니다.</p>\n<p>2 자리를 내주는 것은 서브넷 마스크를 아래와 같이 변경한다는 것입니다.\n<code>11111111.11111111.11111111.11000000</code> (CIDR = /26)</p>\n<p>4번째 옥텟이 <code>11000000</code>로 변경되었습니다. 이는 10진수로 192입니다.\n따라서 새로운 서브넷 마스크는 <code>255.255.255.192/26</code>입니다.</p>\n<ul>\n<li>첫 번째 서브넷:\n<ul>\n<li>유효 서브넷 ID: <code>11000000.10101000.00000001.00000000</code></li>\n<li>네트워크 주소: 192.168.1.0/26</li>\n<li>사용 가능한 호스트 범위: 192.168.1.1 ~ 192.168.1.62</li>\n<li>브로드캐스트 주소: 192.168.1.63</li>\n</ul>\n</li>\n<li>두 번째 서브넷:\n<ul>\n<li>유효 서브넷 ID: <code>11000000.10101000.00000001.01000000</code></li>\n<li>네트워크 주소: 192.168.1.64/26</li>\n<li>사용 가능한 호스트 범위: 192.168.1.65 ~ 192.168.1.126</li>\n<li>브로드캐스트 주소: 192.168.1.127</li>\n</ul>\n</li>\n<li>세 번째 서브넷:\n<ul>\n<li>유효 서브넷 ID: <code>11000000.10101000.00000001.10000000</code></li>\n<li>네트워크 주소: 192.168.1.128/26</li>\n<li>사용 가능한 호스트 범위: 192.168.1.129 ~ 192.168.1.190</li>\n<li>브로드캐스트 주소: 192.168.1.191</li>\n</ul>\n</li>\n<li>네 번째 서브넷:\n<ul>\n<li>유효 서브넷 ID: <code>11000000.10101000.00000001.11000000</code></li>\n<li>네트워크 주소: 192.168.1.192/26</li>\n<li>사용 가능한 호스트 범위: 192.168.1.193 ~ 192.168.1.254</li>\n<li>브로드캐스트 주소: 192.168.1.255</li>\n</ul>\n</li>\n</ul>\n<p>만약 3번째 서브넷의 4번째 사용 가능한 IP를 계산하라 하는 문제가 있다면</p>\n<p>세 번째 유효 서브넷 ID에서 네트워크 주소와 브로드캐스트 주소를 빼고 계산해야 합니다.</p>\n<ol>\n<li>세 번째 서브넷: <code>11000000.10101000.00000001.10000000</code></li>\n<li>4번째 옥텟의 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span>까지 사용 가능한 호스트 ID입니다: <code>000000</code></li>\n<li>주소들\n<ol>\n<li>1번째 주소: <code>000001</code></li>\n<li>2번째 주소: <code>000010</code></li>\n<li>3번째 주소: <code>000011</code></li>\n<li>4번째 주소: <code>000100</code></li>\n</ol>\n</li>\n<li>이제 서브넷과 호스트ID를 전부 이어주면 <code>11000000.10101000.00000001.10000100</code>입니다.</li>\n<li>마지막으로 10진수로 치환하면 <code>192.168.1.132</code>가 됩니다.</li>\n</ol>\n<h2 id=\"-5\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IP-subnet/\">#</a></h2>\n<p>서브넷팅은 할당 받은 IP 주소 범위를 나누어 사용하고\n나눌땐 호스트 ID 자리를 네트워크 ID로 바꿔주어야 한다.</p>\n<p>9개의 서브넷팅의 경우 2의 지수로 나누어 떨어지지 않아 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>4</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span></span>개로 서브넷팅 해야 한다.</p>\n",
			"date_published": "2024-01-24T21:47:32Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IPv4-class/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IPv4-class/",
			"title": "IPv4를 용도별로 나눈 IPv4의 class",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"ipv4-ip\" tabindex=\"-1\">IPv4의 IP를 나누는 방법인 클래스 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IPv4-class/\">#</a></h1>\n<p>IPv4는 4개의 옥텟으로 이루어진 주소입니다.</p>\n<ul>\n<li>옥텟은 8비트를 뜻합니다.</li>\n</ul>\n<p>4개의 옥텟으로 나누어진 IPv4의 주소는 아래의 표와 같이</p>\n<p>첫 옥텟부터 세번째 옥텟까지 네트워크 ID를 할당하는 방식에 따라 클래스가 나뉩니다.</p>\n<table>\n<thead>\n<tr>\n<th>클래스</th>\n<th>주소 범위</th>\n<th>네트워크 ID와 호스트 ID</th>\n<th>특징</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A</td>\n<td>1.0.0.0 - 126.255.255.255</td>\n<td>첫 번째 옥텟은 네트워크 ID,<br>나머지는 호스트 ID</td>\n<td>큰 조직 또는 ISP에 할당,<br>첫 비트는 항상 0</td>\n</tr>\n<tr>\n<td>B</td>\n<td>128.0.0.0 - 191.255.255.255</td>\n<td>첫 두 옥텟은 네트워크 ID,<br>나머지는 호스트 ID</td>\n<td>중간 규모 네트워크에 적합,<br>첫 두 비트는 항상 10</td>\n</tr>\n<tr>\n<td>C</td>\n<td>192.0.0.0 - 223.255.255.255</td>\n<td>첫 세 옥텟은 네트워크 ID,<br>마지막 옥텟은 호스트 ID</td>\n<td>소규모 네트워크에 적합,<br>첫 세 비트는 항상 110</td>\n</tr>\n<tr>\n<td>D</td>\n<td>224.0.0.0 - 239.255.255.255</td>\n<td>네트워크 ID와 호스트 ID 구분 없음</td>\n<td>멀티캐스트 주소에 사용, <br>첫 네 비트는 항상 1110</td>\n</tr>\n<tr>\n<td>E</td>\n<td>240.0.0.0 - 255.255.255.255</td>\n<td>네트워크 ID와 호스트 ID 구분 없음</td>\n<td>실험 및 연구 용도,<br>첫 다섯 비트는 항상 11110</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"isp-internet-service-provider\" tabindex=\"-1\">ISP(Internet Service Provider) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IPv4-class/\">#</a></h2>\n<p>인터넷 서비스를 제공하는 제공자를 말합니다. 한국에선 KT, SK, LG등의 통신사등을 의미합니다.</p>\n<h2 id=\"\" tabindex=\"-1\">여러 수신자에게 동시에 전송하는 멀티캐스트 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IPv4-class/\">#</a></h2>\n<h3 id=\"-1\" tabindex=\"-1\">멀티캐스란 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IPv4-class/\">#</a></h3>\n<ul>\n<li>멀티캐스트는 여러 수신자에게 데이터를 동시에 전송하는 용도의 특별한 주소입니다.</li>\n</ul>\n<h4 id=\"-2\" tabindex=\"-1\">멀티캐스트의 효율 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IPv4-class/\">#</a></h4>\n<ul>\n<li>멀티캐스트는 같은 데이터를 여러 수신자에게 단 한번 전송하고 네트워크 내의 라우터들이 데이터를 멤버들에게 분산합니다.</li>\n</ul>\n",
			"date_published": "2024-01-24T21:22:09Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IPv4-address/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IPv4-address/",
			"title": "IPv4 address에 대해",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"ipv4-address\" tabindex=\"-1\">IPv4 address에 대해서 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IPv4-address/\">#</a></h1>\n<ul>\n<li>구조</li>\n</ul>\n<h2 id=\"\" tabindex=\"-1\">구조 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IPv4-address/\">#</a></h2>\n<p>IPv4 주소는 network ID와 host ID로 이루어져있습니다.</p>\n<p>이를 그래프로 표현하면 아래와 같습니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\ngraph TD;\n\nIPv4 --> network_ID\nIPv4 --> host_ID\n</div>\n<p>실제 값을 대입해서 다시 그래프를 그려보겠습니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\ngraph TD;\n\nIPv4[\"IPv4 = 192.168.0.10\"] --> network_ID[\"network_ID = 192.168.0\"]\nIPv4 --> host_ID[\"host_ID = 10\"]\n</div>\n<h3 id=\"network-id-host-id\" tabindex=\"-1\">클래스에 따라 달라지는 network ID와 host ID의 길이 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IPv4-address/\">#</a></h3>\n<p>network ID와 host ID는 IPv4의 네트워크 클래스에 따라\nnetwork ID의 길이가 달라집니다.</p>\n<p>총 32비트 길이에서 network ID가 네트워크 클래스에 의해 정해지면\n나머지 비트는 host ID로 지정됩니다.</p>\n<p>예를 들어 <code>클래스 A</code>는 <code>0.0.0.0 ~ 127.255.255.255</code>의 범위를 가지며\n<code>클래스 A</code>의 host는 <code>0 ~ 127</code>까지이며\n나머지는 255.255.255 host ID가 됩니다.</p>\n<p>클래스 A의 경우 호스트 하나당 <code>2^8 * 2^8 * 2^8 -2</code>의 범위를 가집니다.\n이 때, -2는 network ID와 broadcast 주소를 빼준 값입니다.</p>\n<h4 id=\"-1\" tabindex=\"-1\">서브넷 마스크 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IPv4-address/\">#</a></h4>\n<p>위에서 32비트로 IP주소를 표현한 것을 서브넷 마스크라고 합니다.</p>\n<h2 id=\"ipv4-32\" tabindex=\"-1\">IPv4 주소를 이루는 32비트 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IPv4-address/\">#</a></h2>\n<p>IPv4는 <code>0.0.0.0 ~ 255.255.255.255</code>까지 각 자리수는 8비트입니다.</p>\n<ul>\n<li>0부터 255까지 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>8</mn></msup><mo>=</mo><mn>256</mn></mrow><annotation encoding=\"application/x-tex\">2^8 = 256</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">6</span></span></span></span>입니다. 반대로 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mn>256</mn><mo>=</mo><mn>8</mn></mrow><annotation encoding=\"application/x-tex\">log_2{256}=8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">6</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">8</span></span></span></span>입니다. 이 때, 0을 포함해야하므로 -1을 해주면 255까지 입니다.</li>\n<li>255는 <code>11111111</code>으로 8비트를 나타냅니다.</li>\n<li>이를 4번 반복하여 IPv4는 32비트로 구성된다고 합니다.</li>\n<li><code>192.168.1.10</code>을 2진수로 치환하면 <code>11000000.10101000.00000001.00001010</code>이 됩니다.</li>\n</ul>\n<h2 id=\"host-id\" tabindex=\"-1\">host ID <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IPv4-address/\">#</a></h2>\n<p><code>192.168.1.10</code>에서 <code>10</code>은 host ID를 나타냅니다.\n<code>192.168.1</code>이라는 네트워크 ID에서 특정 기기를 구분하기 위해 host ID가 존재합니다.</p>\n<p>네트워크 모두에게 패킷을 보내는 특별한 주소를 broadcast IP라고 합니다.</p>\n<p>host ID를 모두 1로 채운 경우 해당 네트워크의 broadcast IP가 됩니다.</p>\n<p><code>192.168.1.0</code>의 네트워크를 사용하는 경우 <code>192.168.1.255</code>가 broadcast IP가됩니다.</p>\n<h2 id=\"-2\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IPv4-address/\">#</a></h2>\n<ul>\n<li>\n<p>IPv4는 <a href=\"https://ko.wikipedia.org/wiki/%EB%B6%80%EB%B6%84%EB%A7%9D\">서브넷마스크</a> 형태로 제공됩니다. <code>0.0.0.0 ~ 255.255.255.255</code></p>\n</li>\n<li>\n<p>서브넷 마스크는 A클래스부터 E클래스까지 구분됩니다.</p>\n</li>\n<li>\n<p>서브넷 마스크의 network ID를 제외한 부분은 host ID가 되며, network ID는 네트워크에서 네트워크를 특정하기 위함이며 host ID는 특정 네트워크에서 각 기기를 특정하기 위함입니다.</p>\n</li>\n<li>\n<p>서브넷 마스크의 각 자리는 0부터 255까지 8비트이며 8비트가 4개 모여 32비트로 표현됩니다.</p>\n</li>\n<li>\n<p>브로드캐스트 IP와 네트워크 IP등 미리 지정된 IP가 존재합니다.</p>\n</li>\n</ul>\n",
			"date_published": "2024-01-22T22:23:52Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/sliding-window/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/sliding-window/",
			"title": "sliding window",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">슬라이딩 윈도우 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/sliding-window/\">#</a></h1>\n<p>슬라이딩 윈도우는 알고리즘에서도 유명합니다만,\n네트워크의 TCP 통신에서도 사용되는 기술입니다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">사용 목적 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/sliding-window/\">#</a></h2>\n<ul>\n<li>데이터 통신에서 흐름 제어, 혼잡 제어를 위해 사용됩니다.</li>\n<li>TCP에서 주로 사용됩니다.</li>\n<li>네트워크의 효율성과 신뢰성을 높이는데 중요한 역할을 합니다.</li>\n</ul>\n<h2 id=\"-2\" tabindex=\"-1\">원리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/sliding-window/\">#</a></h2>\n<p>슬라이딩 윈도우를 이루는 두가지 주요한 개념은\n윈도우와 슬라이딩입니다.</p>\n<ol>\n<li>\n<p>윈도우: 송신자가 한 번에 전송 가능한 데이터의 양을 나타냅니다.\n송신자가 수신자의 응답인 ACK없이 보낼 수 있는 데이터 패킷의 최대 수를 가리킵니다.</p>\n</li>\n<li>\n<p>슬라이딩: 데이터 전송이 성공하고 수신자로부터 ACK가 돌아오면,\n송신자는 데이터를 슬라이드하여 더 많은 데이터를 전송합니다.</p>\n</li>\n</ol>\n<p>이는 연속적인 데이터 스트림을 효율적으로 관리할 수 있게 합니다.</p>\n<h3 id=\"-3\" tabindex=\"-1\">사용목적 &gt; 흐름제어 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/sliding-window/\">#</a></h3>\n<ul>\n<li>\n<p>송신자와 수신자 간의 조정: 송신자가 한 번에 너무 많은 데이터를 보내 수신자를 압도하지 않도록 조정합니다.</p>\n</li>\n<li>\n<p>윈도우 크기의 조절: 수신자의 버퍼 크기와 처리 능력에 따라 윈도우 크기를 조절됩니다. 수신자는 송신자에게 현재 처리 가능한 데이터 양을 알려줍니다.</p>\n</li>\n</ul>\n<h3 id=\"-4\" tabindex=\"-1\">사용목적 &gt; 혼잡제어 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/sliding-window/\">#</a></h3>\n<ul>\n<li>네트워크의 혼잡도를 감지해 전송 속도를 조절합니다.</li>\n<li>윈도우 크기를 동적으로 조절, 네트워크의 혼잡을 줄여 성능을 개선합니다.</li>\n</ul>\n",
			"date_published": "2024-01-21T20:17:37Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/OSI-7-layer-L3-router/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/OSI-7-layer-L3-router/",
			"title": "OSI 7 layer L3 라우터",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"l3\" tabindex=\"-1\">L3 네트워크 계층의 역할 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/OSI-7-layer-L3-router/\">#</a></h1>\n<ul>\n<li>네트워크 계층은 데이터 패킷의 최적 경로를 찾습니다.</li>\n</ul>\n<p>위 역할을 수행하기 위한 기능으로 아래 4 가지가 중요하게 작용합니다.</p>\n<ol>\n<li>\n<p>라우팅(Routing): 네트워크 계층의 가장 중요한 기능으로 패킷이 목적지까지 가장 효과적인 경로로 이동되도록 <strong>경로를 결정함</strong></p>\n</li>\n<li>\n<p>논리적 주소 지정(Logical Addressing): 네트워크에서 데이터 패킷은 IP 주소를 목적지로하여 전송됩니다. 이 주소를 지정하는 것도 L3 계층의 역할입니다.</p>\n</li>\n<li>\n<p>패킷 형성(Packet Formation): 데이터를 패킷 단위로 나누고,\n각 패킷에 목적지 주소, 출발지 주소, 제어 정보를 포함합니다.</p>\n</li>\n<li>\n<p>오류처리 및 진단(Error Handling and Diagnostics): 데이터 전송 과정시 발생할 수 있는 오류 감지와 처리를 담당합니다.</p>\n</li>\n</ol>\n<h2 id=\"\" tabindex=\"-1\">주요 프로토콜 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/OSI-7-layer-L3-router/\">#</a></h2>\n<p>네트워크 계층에서 사용되는 주요 프로토콜</p>\n<ul>\n<li>\n<p>IP(Internet Protocol):</p>\n<ul>\n<li>IPv4: 프로토콜의 4번째 버전이며 전 세계적으로 사용된 첫 프로토콜입니다.\n<ul>\n<li>호스트의 수에 따라 A ~ E까지 클래스로 나누어집니다.</li>\n<li>32비트 주소공간을 제공합니다.</li>\n<li>0.0.0.0 ~ 255.255.255.255까지의 숫자 조합으로 이루어집니다.\n<ul>\n<li>이 주소체계는 32비트 주소 공간을 의미합니다.</li>\n<li>한 자리수를 0부터 255까지 채울 경우, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>8</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span></span></span>만큼 차지합니다. 8비트는 0부터 255까지 자리를 채울 수 있습니다.<code>Math.log2(256) = 8</code>이 주소공간을 총 4개 제공하므로 32비트입니다.</li>\n<li>각 자리를 모두 채울 경우 가능한 이론상 주소의 수는 2^32입니다.(4,294,967,296개)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>IPv6\n<ul>\n<li>IPv6는 6버전 인터넷 프로토콜 버전입니다.</li>\n<li>IPv4의 제한된 주소 공간 및 국가별로 할당된 주소가 거의 소진되고 있어 개발 되었습니다.</li>\n<li>IPv6는 모바일 기기 및 컴퓨터에 할당되어지고 있습니다.</li>\n<li>가장 큰 차이점은 비트의 길이가 32비트에서 128비트로 늘어났다는 점입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>ICMP(Internet Control Message Protocol): 네트워크 오류 메시지와 운영 정보의 전달</p>\n</li>\n<li>\n<p>IGMP(Internet Group Management Protocol): 호스트 컴퓨터와 인접 라우터가 멀티캐스트 그룹 멤버십을 구성하는데 사용하는 통신 프로토콜</p>\n</li>\n<li>\n<p>라우팅 프로토콜:</p>\n<ul>\n<li>OSPF(Open Shortest Path First): 대기업망에서 가장 널리 쓰이는 내부 게이트웨이 프로토콜</li>\n<li>BGP(Border Gateway Protocol): 경계 경로 프로토콜(BGP) 인터넷의 라우팅 프로토콜입니다. BGP는 우편물을 처리하는 우체국처럼 인터넷 트래픽을 전송하기 위해 가장 효율적인 경로를 선택합니다.</li>\n</ul>\n</li>\n</ul>\n",
			"date_published": "2024-01-21T17:48:47Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/OSI-7-layer-L2-switch/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/OSI-7-layer-L2-switch/",
			"title": "네트워크 7계층 OSI의 L2 스위치",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"l2\" tabindex=\"-1\">L2 스위치(물리) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/OSI-7-layer-L2-switch/\">#</a></h1>\n<ul>\n<li>\n<p>L2 스위치는 7 계층 중 두 번째 레이어입니다.</p>\n</li>\n<li>\n<p>L2 스위치는 물리적 레이어 (Physical Layer)입니다.</p>\n</li>\n</ul>\n<h1 id=\"\" tabindex=\"-1\">특징 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/OSI-7-layer-L2-switch/\">#</a></h1>\n<ul>\n<li><strong>MAC(media access control) 주소 테이블</strong>: L2 스위치는 MAC 주소를 MAC 주소 테이블을 통해 관리합니다.\n<ul>\n<li>MAC 주소는 L2에서 통신을 위해 네트워크 인터페이스에 할당된 고유 식별자입니다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<ul>\n<li><strong>사용되는 영역</strong>: L2 스위치는 국소적인 영역인 LAN에서 사용됩니다.</li>\n</ul>\n<br>\n<ul>\n<li><strong>스위칭</strong>: MAC 주소를 기반으로 스위칭 결정을 수행합니다. 3 계층의 스위치나 라우터가 사용하는 IP 주소와 달리 MAC 주소가 어떤 물리적 포트와 연결되어 있는지를 기억하기 위해 MAC 주소 테이블을 유지합니다.</li>\n</ul>\n<br>\n<ul>\n<li><strong>이더넷</strong>: 이더넷 네트워크를 통해 기기간 연결을 지원하는 네트워크의 한 종류입니다. 여러분들이 보통 컴퓨터에 랜선을 꼽는 경우 이 이더넷 네트워크를 사용하고 있는 중입니다.\n<ul>\n<li>규격: LAN, MAN, WAN에서 가장 많이 활용되는 기술 규격을 의미합니다.</li>\n<li>규약:  IEEE 802.3 규약으로 표준화 되어 있습니다.</li>\n<li>이더넷 프레임: 데이터 전송을 위한 데이터 패킷의 구조</li>\n</ul>\n</li>\n</ul>\n<br>\n<ul>\n<li><strong>VLAN</strong>: L2 스위치는 동일한 물리적 네트워크 내에서 별도의 네트워크 세그먼트인 VLAN을 생성할 수 있습니다.</li>\n<li>오류 검사와 프레임의 처리: 오류를 감지하고 수정하는 책임을 가집니다.\n<ul>\n<li>L2 스위치는 FCS(Frame Check Sequence), CRC(Cyclic Redundancy Check)를 통해 전달하는 프레임을 검사합니다.</li>\n<li>FCS: 전송되는 이더넷 프레임의 끝에는 FCS 필드가 존재하며 전송 과정 중 손실여부를 판단하는데 사용됩니다.</li>\n<li>CRC:\n<ol>\n<li>전송 전 계산: 송신자는 전송하려는 데이터에 대해 CRC 값을 계산합니다. 이를 위해 원본 데이터 끝에 특정 길이의 CRC 비트(일반적으로 16비트 또는 32비트)를 추가합니다.</li>\n<li>다항식 나눗셈: 데이터와 CRC 비트의 조합은 미리 정의된 다항식으로 나누어집니다. 나눗셈의 결과 (즉, 나머지)는 전송된 데이터 끝에 첨부됩니다.</li>\n<li>수신자에서의 검증: 수신자는 전체 메시지(원본 데이터와 수신된 CRC 값)를 같은 다항식으로 나누어서 나머지를 계산합니다. 만약 이 나머지가 0이 아니라면, 데이터에 오류가 있는 것으로 간주됩니다.</li>\n<li>오류 발생시: CRC 검사에서 오류가 감지되면, 수신자는 데이터의 재전송을 요청할 수 있습니다.</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n<ul>\n<li><strong>QoS(Quality of Service)</strong>: 네트워크 트래픽을 관리, 특정 트래픽에 우선 순위를 부여합니다.</li>\n</ul>\n<br>\n<ul>\n<li><strong>PPP(Point-to-Point Protocol)</strong> 프레임: 직접 연결된 두 네트워크 장치 간 데이터 전송에 사용됩니다.</li>\n</ul>\n<h2 id=\"-1\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/OSI-7-layer-L2-switch/\">#</a></h2>\n<p>L2 스위치는</p>\n<ul>\n<li>프레임의 생성과 처리</li>\n<li>MAC 주소를 이용한 물리적 주소의 지정</li>\n<li>프레임 오류 검출과 수정</li>\n<li>네트워크 효율성을 위한 흐름 제어, 액세스 제어</li>\n<li>네트워크의 물리적 및 논리적 구조를 결정하고 이더넷, PPP, HDLC등의 다양한 프레임 프로토콜을 사용해 네트워 장비 간 통신을 가능케 합니다.</li>\n</ul>\n",
			"date_published": "2024-01-18T21:39:12Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/end-system-of-network/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/end-system-of-network/",
			"title": "네트워크 종단 시스템",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"\" tabindex=\"-1\">네트워크의 종단 시스템이란 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/end-system-of-network/\">#</a></h2>\n<p><strong>종단</strong>（終段） 시스템은 말 그대로 network의 양 끝단에 위치하는 장치나 시스템을 의미합니다.</p>\n<p>인터넷을 통해 데이터를 서로 주고받는 사용자 장치나 서버 같은 기기들입니다.</p>\n<p>인터넷 통신의 시작점과 종료점의 역할을 하며 네트워크를 이어주는 라우터나 스위치 같은 중간지점의 네트워크와 구별되어집니다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">특징 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/end-system-of-network/\">#</a></h2>\n<ol>\n<li>사용자 인터페이스: 종단 시스템은 사용자가 사용하는 기기(스마트폰, pc등)의 장치와 서비스를 제공하는 쪽의 서버(웹 서버, 메일 서버 등)으로 이루어집니다.</li>\n<li>통신의 양 끝점: 웹 브라우징시 사용자가 보고 있는 기기는 통신의 종단 시스템이며, 이를 제공하는 서버는 반대편의 종단 시스템이 됩니다.</li>\n<li>데이터의 생성과 처리: 이들은 데이터를 생성하고 처리하는 주체가 됩니다. (인터넷에 글이나 영상등을 올리면 서버는 이를 저장하고 다른 유저는 이를 제공받는 등)</li>\n</ol>\n<h2 id=\"-2\" tabindex=\"-1\">용어 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/end-system-of-network/\">#</a></h2>\n<ul>\n<li>\n<p>호스트(host): 호스트는 종단 시스템에서 일반적으로 pc, 모바일 기기등이 됩니다. 호스트는 데이터를 생성, 전송, 수신을 처리하는 주체입니다.</p>\n</li>\n<li>\n<p>서버(server): 서버는 웹 페이지, 파일, 앱, DB의 접근등 다양한 서비스를 제공하며, 보통 24시간 서비스가 제공됩니다.</p>\n</li>\n<li>\n<p>통신 링크</p>\n<ul>\n<li>유선\n<ul>\n<li>동축 케이블: TV, Internet에 연결 됨,</li>\n<li>광섬유 케이블: 빛을 사용해 데이터를 전송, 매우 높은 속도, 대여폭을 가집니다.</li>\n</ul>\n</li>\n<li>무선\n<ul>\n<li>위성 통신: 위성을 사용해 데이터를 전송합니다.</li>\n<li>라디오 파: 모바일 네트워크와 무선 LAN에서 사용됨</li>\n<li>적외선: 짧은 거리의 데이터 전송에 사용</li>\n</ul>\n</li>\n<li>대여폭(BandWidth): 링크가 전송할 수 있는 최대 데이터 속도</li>\n<li>지연(Latency): 데이터가 송신지에서 수신지까지 도달하는데 걸린 시간</li>\n<li>에러율(Error Rate): 데이터 전송중 발생하는 오류 비율</li>\n</ul>\n</li>\n</ul>\n",
			"date_published": "2024-01-17T21:45:08Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/OSI-7-layer-L1-switch/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/OSI-7-layer-L1-switch/",
			"title": "네트워크 7계층 OSI의 L1 스위치",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"l1\" tabindex=\"-1\">L1 스위치(물리) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/OSI-7-layer-L1-switch/\">#</a></h1>\n<ul>\n<li>\n<p>L1 스위치는 7 계층 중 첫 번째 레이어입니다.</p>\n</li>\n<li>\n<p>L1 스위치는 물리적 레이어 (Physical Layer)입니다.</p>\n</li>\n</ul>\n<p>이렇게 생겼습니다. &gt;&gt;&gt;</p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/nt8GB4FRz3-900.webp\" width=\"100%\" height=\"auto\" alt=\"L1 switch\" loading=\"lazy\" decoding=\"async\"></div>\n<h1 id=\"\" tabindex=\"-1\">특징 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/OSI-7-layer-L1-switch/\">#</a></h1>\n<ul>\n<li>\n<p>물리적 레이어이므로 7계층을 통과한 데이터를 전기적 신호나 광신호로 전송합니다. 물리적인 매체인 광섬유 케이블을 통해 이루어집니다.</p>\n</li>\n<li>\n<p>신호를 장거리로 보내야 할 경우, 데이터의 재생과 증폭 기능을 담당합니다.</p>\n<ul>\n<li>재생에 대해: 재생은 영어로 repeat입니다. 중계기(repeater)라고도 합니다.</li>\n</ul>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/rcjOJKgjo4-1200.webp\" width=\"100%\" height=\"auto\" alt=\"https://ko.wikipedia.org/wiki/%EC%A4%91%EA%B3%84%EA%B8%B0#/media/%ED%8C%8C%EC%9D%BC:Repeater-schema.svg\" loading=\"lazy\" decoding=\"async\"></div> \n- repeater는 전파가 닿기 힘든 곳이나 전파의 세기를 강하게 증폭시켜 거리가 멀어도 안정적으로 데이터를 전송합니다.\n</li>\n<li>\n<p>L1 스위치는 네트워크를 통해 전송되는 신호름 감지합니다.</p>\n</li>\n<li>\n<p>약해진 신호를 원래의 형태로 복원하는 역할을 합니다.</p>\n</li>\n<li>\n<p>약해진 신호를 증폭시켜 다음 목적지까지 보냅니다.</p>\n</li>\n<li>\n<p>L1 스위치는 프레이밍이나 주소를 지정하지 않습니다.</p>\n<ul>\n<li>이는 L2 스위치에서 이루어집니다.</li>\n</ul>\n</li>\n<li>\n<p>물리적 스위치이므로 데이터의 내용을 처리 및 가공하거나 에러에 대한 수정 기능은 없습니다.</p>\n</li>\n</ul>\n<h2 id=\"hub\" tabindex=\"-1\">hub와의 비교 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/OSI-7-layer-L1-switch/\">#</a></h2>\n<h3 id=\"hub-1\" tabindex=\"-1\">hub <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/OSI-7-layer-L1-switch/\">#</a></h3>\n<p>허브는 물리적 레이어에서 작동한다는 동일성이 있으나,\n신호를 네트워크 내의 모든 장치에 브로드캐스트합니다.</p>\n<p>즉 허브에 꽂은 랜선, 랜선과 연결된 기기들은 허브에게 데이터를\n분배받는 것 뿐입니다.</p>\n<h3 id=\"l1-switch\" tabindex=\"-1\">L1 switch <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/OSI-7-layer-L1-switch/\">#</a></h3>\n<p>스위치는 위에서 언급한 특성과 함께,</p>\n<p>원하는 목적지까지 데이터의 무결성을 유지하며 패킷을 전송하는 기기입니다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/OSI-7-layer-L1-switch/\">#</a></h2>\n<h3 id=\"-2\" tabindex=\"-1\">이것을 함 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/OSI-7-layer-L1-switch/\">#</a></h3>\n<ul>\n<li>L1 스위치는 목적지까지 <strong>데이터의 무결성을 지키기 위해\n증폭과 재생</strong>을 하며, 물리적 케이블에 데이터를 보내주는 기기입니다.</li>\n</ul>\n<h3 id=\"-3\" tabindex=\"-1\">이것을 하지 않음 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/OSI-7-layer-L1-switch/\">#</a></h3>\n<ul>\n<li>L1 스위치는 데이터 패킷의 내용을 처리하지 않습니다.</li>\n<li>MAC주소와 같은 주소의 해석등을 하지 않습니다.</li>\n</ul>\n",
			"date_published": "2024-01-10T22:21:32Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-process-status/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-process-status/",
			"title": "os process의 상태",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">프로세스의 상태 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-process-status/\">#</a></h1>\n<p>프로세스는 <code>라이프사이클</code>을 갖습니다.</p>\n<p>프로세스 라이프사이클은 프로세스의 생애주기를 나타냅니다.</p>\n<p><code>graph</code>로 나타내면 아래와 같이 표현됩니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\ngraph LR;\nA(\"생성\")\nB(\"준비\")\nC(\"실행\")\nD(\"대기\")\nE(\"종료\")\n\nA --> B\nB --> |\"dispatch\"| C\nD --> |\"wake up\"| B\nC --> |\"할당시간 초과 | 선점형에 의해 뺏김\"| B\nC --> |\"I/O\"| D\nC --> E\n</div>\n<p>그 주요 주기는 아래의 5가지입니다.</p>\n<ul>\n<li>\n<p>생성: 프로세스가 생성되고 초기화됩니다.</p>\n<ul>\n<li>전환: 프로세스가 모든 자원을 필요한 자원을 할당받으면, <code>준비 상태로 전환</code>됩니다.</li>\n</ul>\n</li>\n<li>\n<p>준비: 프로세스가 CPU를 제외한 모든 자원을 할당받은 상태입니다.</p>\n<ul>\n<li>전환: 프로세스가 CPU 할당을 받으면 <code>실행 상태로 전환</code>됩니다.</li>\n</ul>\n</li>\n<li>\n<p>실행: CPU를 할당받아 명령어를 실행하는 상태입니다.</p>\n<ul>\n<li>전환 1: I/O 요청에 들어가면 <code>대기 상태로 전환</code>되며 프로세스를 놓아줍니다.</li>\n<li>전환 2: <a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-process-scheduling/\">선점형 스케줄링</a>에 의해 CPU를 빼앗기면, <code>준비 상태로 전환</code>됩니다.</li>\n<li>전환 3: 실행을 완료하면, <code>종료 상태로 전환</code>됩니다.</li>\n</ul>\n</li>\n<li>\n<p>대기: 프로세스가 I/O 작업과 같은 이벤트의 완료를 기다립니다.</p>\n<ul>\n<li>전환: CPU가 언제 끝날지 알 수 없는 대기 작업에 할당되지 않도록\n<code>준비 상태로 전환</code>됩니다.</li>\n</ul>\n</li>\n<li>\n<p>종료: 실행이 완료된 상태입니다. 할당받은 자원을 모두 OS에 반납하고 프로세스 테이블에서 제거됩니다.</p>\n<ul>\n<li>전환: 없음</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"dispatch\" tabindex=\"-1\">dispatch(디스패치) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-process-status/\">#</a></h3>\n<p>준비 상태에 있는 여러 프로세스 중 실행될 프로세스를 선정해\nCPU를 할당(dispatch)합니다. 이 때, context switch 비용이 발생됩니다.</p>\n<h3 id=\"timeout\" tabindex=\"-1\">timeout | 선점형 스케줄링에 의해 뺏김 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-process-status/\">#</a></h3>\n<p>프로세스는 스케줄링된 조건에 따라 CPU 할당을 빼앗길 수 있습니다.\n스케줄러에 의해 PCB에 내용을 저장, CPU를 반납하게 되고\n<code>준비상태로 전환</code>됩니다.</p>\n<h3 id=\"i-o\" tabindex=\"-1\">I/O <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-process-status/\">#</a></h3>\n<p>I/O와 즉시 실행 불가능한 시스템 콜, 프로세스간 통신(IPC)등 Block이 발생됩니다.</p>\n<p>이 때 CPU를 할당을 반납하고 <code>대기상태로 전환</code>됩니다.</p>\n<h3 id=\"wake-up\" tabindex=\"-1\">Wake up <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-process-status/\">#</a></h3>\n<p>입출력이 종료되면 대기 상태의 프로세스에게 전달합니다.\n대기 상태에서 <code>준비 상태로 전환</code>되며 스케줄링에 의해 다시 실행을 기다립니다.</p>\n",
			"date_published": "2024-01-04T22:19:20Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-process-scheduling/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-process-scheduling/",
			"title": "os 프로세스 스케줄링",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"os\" tabindex=\"-1\">OS의 프로세스 스케줄링 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-process-scheduling/\">#</a></h1>\n<p>서로 다른 프로세스에서 돌고 있는 프로그램들은\n하나의 CPU를 두고 함께 사용해야 합니다.</p>\n<p>이는 공유 자원에 접근하는 쓰레드의 그것과\nDB의 transition의 그것과 동일한 내용입니다.</p>\n<p>스케줄링은 크게 아래와 같이 두가지로 나뉩니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\ngraph TD;\nA(\"스케줄링\") --> B(\"선점형 스케줄링\")\nA --> C(\"비선점형 스케줄링\")\n</div>\n<p>선점형과 비선점형 스케줄링의 차이를 알아보겠습니다.</p>\n<h2 id=\"\" tabindex=\"-1\">선점형 스케줄링 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-process-scheduling/\">#</a></h2>\n<blockquote>\n<p>선점형 스케줄링은 한 프로세스가 CPU를 사용중이더라도\n해당 CPU의 사용을 중단,\n다른 스케줄링을 CPU에 선점 할 수 있게 합니다.</p>\n</blockquote>\n<ul>\n<li>특징:\n<ul>\n<li><code>응답 시간의 개선</code>: 다수의 사용자, 중요한 프로세스에 대해 빠른 응답을 제공합니다.</li>\n<li><code>자원의 공유</code>: CPU를 공정하게 여러 프로세스 간에 공유되도록 합니다.</li>\n<li><code>복잡성</code>: 스케줄링 알고리즘이 이미 CPU를 점유하고 있는 프로그램의 실행 상태를 대기로 변경시키고 자신의 프로세스를 CPU에 태우는 것이므로 보다 복잡해집니다.\n<ul>\n<li>스케줄링 알고리즘에 따라 특정 프로세스는 <code>기아 상태</code>에 빠질 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"-1\" tabindex=\"-1\">선점형 스케줄링에서 사용되는 알고리즘 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-process-scheduling/\">#</a></h3>\n<ul>\n<li>Round Robin: <a href=\"https://ko.wikipedia.org/wiki/%EB%9D%BC%EC%9A%B4%EB%93%9C_%EB%A1%9C%EB%B9%88_%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81\">라운드 로빈 스케줄링</a>은 시분할 시스템을 위해 설계된 선점형 스케줄링입니다.</li>\n</ul>\n<p>프로세스들간의 우선순위 없이 각 프로세스를 공평하게 시분할로 나누어\nQueue에 담아둡니다.</p>\n<p>시간만큼 CPU를 차지한 프로세스는 종료 상태가 아니라면 Queue의 맨 뒤에 다시 추가합니다.</p>\n<ul>\n<li>우선순위 기반 스케줄링</li>\n<li>다단계 피드백 큐 스케줄링\n등이 있습니다.</li>\n</ul>\n<h2 id=\"-2\" tabindex=\"-1\">비선점형 스케줄링 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-process-scheduling/\">#</a></h2>\n<blockquote>\n<p>비선점형 스케줄링은 한 프로세스가 CPU를 할당받으면 작업을 완료하거나 I/O요청으로 블록될 때까지 CPU를 선점합니다.</p>\n</blockquote>\n<ul>\n<li>특징:\n<ul>\n<li>단순함: 이미 CPU를 차지한 경우 프로세스가 완료되기 전까지\n혹은 I/O 블록이 생기기 전까지 CPU를 계속 독점합니다.</li>\n<li>자원 활용 문제: 프로세스가 긴 경우 자원이 독점될 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"-3\" tabindex=\"-1\">비선점형 스케줄링에서 사용되는 알고리즘 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-process-scheduling/\">#</a></h3>\n<ul>\n<li>First-Come</li>\n<li>First-Served</li>\n<li>Shortest Job First</li>\n<li>우선순위 스케줄링(비선점형 버전)\n등이 존재합니다.</li>\n</ul>\n",
			"date_published": "2024-01-04T21:52:22Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-address-translation/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-address-translation/",
			"title": "os address translation",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">논리적 주소와 물리적 주소 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-address-translation/\">#</a></h1>\n<p>논리적 주소와 물리적 주소는 컴퓨터의 메모리 관리와 접근에 관한 내용입니다.</p>\n<p>운영 체제의 메모리 관리 메커니즘에서 사용됩니다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">논리적 주소 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-address-translation/\">#</a></h2>\n<ul>\n<li>정의: 논리적 주소는 프로그램이 사용하는 주소입니다.</li>\n<li>생성: 컴파일러나 인터프리터(JS, Ruby, Python)에 의해 생성되며 컴파일 시점(C, C++, Java, Rust 등)에 결정되거나 프로그램이 실행되는 동안 동적으로 생성됩니다.</li>\n<li>목적: 논리적 주소가 존재하는 이유는 프로그램이 실제 물리적 메모리 주소에 직접적으로 의존하지 않게 함으로써 프로그램을 유연하게 만듭니다.</li>\n<li>예시: 프로그램에서 변수에 접근할 때 사용하는 주소가 논리적 주소입니다.</li>\n</ul>\n<h2 id=\"-2\" tabindex=\"-1\">물리적 주소 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-address-translation/\">#</a></h2>\n<ul>\n<li>정의: 물리적 주소는 실제 메모리 상에서 메모리의 위치를 나타냅니다.</li>\n<li>생성: 메모리 컨트롤러가 데이터를 메모리의 실제 위치에 저장하거나 위치를 읽어옵니다.</li>\n<li>목적: 실제 메모리 장치 내에서 데이터의 위치를 정확하게 지정하는 역할을 합니다.</li>\n<li>예시: RAM의 실제 데이터가 저장 되어지는 물리적 셀의 주소</li>\n</ul>\n<h2 id=\"memory-management-unit\" tabindex=\"-1\">주소의 변환과 Memory Management Unit <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-address-translation/\">#</a></h2>\n<p>아래는 실제 MMU의 사진이다.</p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/yJB18c1mXq-440.webp\" width=\"100%\" height=\"auto\" alt=\"image alt\" loading=\"lazy\" decoding=\"async\"></div>\n<p>(최근은 CPU에 통합 되었습니다.)</p>\n<p>MMU는 논리적 주소를 물리적 주소로 변환하는 하드웨어 장치입니다.\n운영체제는 MMU를 통해 논리적 주소와 물리적 주소 사이의 매핑을 관리합니다.</p>\n<p>매핑은 주로 주소 사상 기법이며 운영체제에 의해 실행 되어집니다.</p>\n<p>정리하자면</p>\n<p>운영체제는 MMU를 통해 물리적 주소와 가상 주소를 매핑하는 주소 사상 기법을 사용합니다.</p>\n<h3 id=\"-3\" tabindex=\"-1\">주소 사상 기법 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-address-translation/\">#</a></h3>\n<p>주소 사상 기법은 페이징과 세그멘테이션을 통해 구현되고,\n추가적으로 직접 사상 방식이 추가됩니다.</p>\n<h4 id=\"-4\" tabindex=\"-1\">직접 사상 방법 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-address-translation/\">#</a></h4>\n<ul>\n<li>개념: 논리적 주소와 물리적 주소 사이에 직접적인 매핑 관계를 설정합니다.</li>\n<li>주소 변환: 덧셈 뺄셈을 통해 주소 변환이 이루어집니다.</li>\n<li>특징: 단순하지만, 메모리 관리의 유연성이 제한됩니다.</li>\n</ul>\n",
			"date_published": "2023-12-31T22:17:39Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/git/git-revert-with-head/",
			"url": "https://zerozoo-a.github.io/blog/git/git-revert-with-head/",
			"title": "git의 revert와 `is a merge but no -m option was given.`",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"git-revert-head-conflict\" tabindex=\"-1\">git, revert, head, 🪦conflict <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/git/git-revert-with-head/\">#</a></h1>\n<p>프로젝트에 투입되다 보면 여러 작업자들과 함께 일하게 됩니다.</p>\n<p>자연스럽게 conflict는 발생하게 됩니다.</p>\n<p>conflict를 피하기 위한\nrevert, head에 대해 알아보겠습니다.</p>\n<h2 id=\"conflict\" tabindex=\"-1\">conflict 만들어보기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/git/git-revert-with-head/\">#</a></h2>\n<p>conflict를 만들어서 문제 상황을 재현하겠습니다.</p>\n<blockquote>\n<p>요약</p>\n<ol>\n<li>main branch에서 foo와 bar 브랜치를 각각 생성합니다.</li>\n<li>같은 라인을 수정합니다.</li>\n<li>각각 main branch에 foo를 merge하고, bar를 merge합니다.</li>\n<li>conflict를 만들었습니다.</li>\n</ol>\n</blockquote>\n<hr>\n<h4 id=\"head-main-branch\" tabindex=\"-1\">[head &gt;] main branch <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/git/git-revert-with-head/\">#</a></h4>\n<p>main branch에서 hello.txt 파일을 생성하고\n아래와 같이 Hello, World를 입력합니다.</p>\n<pre class=\"language-md\" tabindex=\"0\"><code class=\"language-md\">Hello, World</code></pre>\n<hr>\n<h4 id=\"head-foo-branch\" tabindex=\"-1\">[head &gt;] foo branch <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/git/git-revert-with-head/\">#</a></h4>\n<p>main branch에서 foo branch를 만들고,\nfoo branch로 이동합니다.</p>\n<p>Hello, world위에 Oh,를 작성하고 커밋하겠습니다.</p>\n<pre class=\"language-md\" tabindex=\"0\"><code class=\"language-md\">Hello, World</code></pre>\n<p>⬇️⬇️⬇️️⬇️️</p>\n<pre class=\"language-md\" tabindex=\"0\"><code class=\"language-md\">Oh, \nHello, World</code></pre>\n<hr>\n<h4 id=\"head-bar-branch\" tabindex=\"-1\">[head &gt;] bar branch <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/git/git-revert-with-head/\">#</a></h4>\n<p>다시 main branch에서 bar branch를 만들고,\nbar branch로 이동합니다.</p>\n<p>Hello, world위에 Huh,를 작성하고 커밋하겠습니다.</p>\n<pre class=\"language-md\" tabindex=\"0\"><code class=\"language-md\">Hello, World</code></pre>\n<p>⬇️⬇️⬇️️⬇️️</p>\n<pre class=\"language-md\" tabindex=\"0\"><code class=\"language-md\">Huh,\nHello, World</code></pre>\n<h2 id=\"conflict-merge\" tabindex=\"-1\">conflict 해결하고 merge하기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/git/git-revert-with-head/\">#</a></h2>\n<hr>\n<h4 id=\"head-main-branch-1\" tabindex=\"-1\">[head &gt;] main branch <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/git/git-revert-with-head/\">#</a></h4>\n<p>main branch로 이동해 아래와 같이 foo, bar branch를 merge합니다.</p>\n<ul>\n<li>main branch에서 foo branch를 merge합니다.</li>\n<li>main branch에서 bar branch를 merge합니다.</li>\n<li>같은 영역을 수정한 foo와 bar의 conflict 발생</li>\n</ul>\n<p>conflict가 나면 아래와 같은 화면을 보게 됩니다. (vscode 기준)</p>\n<pre class=\"language-md\" tabindex=\"0\"><code class=\"language-md\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n<span class=\"token title important\">Oh,\n<span class=\"token punctuation\">=======</span></span>\nHuh,\n<span class=\"token blockquote punctuation\">>>>>>>></span> bar\nHello, World</code></pre>\n<p>이 때의 git graph를 확인하면 아래와 같습니다.</p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/d-wVv01k1l-796.webp\" width=\"100%\" height=\"auto\" alt=\"image alt\" loading=\"lazy\" decoding=\"async\"></div>\n<p>conflict를 해결하고 commit 하면 merged 상태가 됩니다.</p>\n<ul>\n<li>적당히 conflict를 해결만 하면 됩니다.</li>\n</ul>\n<p>merge를 하는 것으로 하나의 commit hash가 생긴것을 확인 할 수 있습니다.</p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/ofHzxS-fXO-776.webp\" width=\"100%\" height=\"auto\" alt=\"image alt\" loading=\"lazy\" decoding=\"async\"></div>\n<ul>\n<li>05bbbb51이라는 이름의 commit 내역이 생겼습니다.</li>\n</ul>\n<h2 id=\"head\" tabindex=\"-1\">HEAD에 대해 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/git/git-revert-with-head/\">#</a></h2>\n<p>head란 git의 커밋 혹은 브랜치를 가리키는 pointer입니다.\n메모리에서 메모리 주소를 담고 있는 pointer와 같은 역할을 합니다.</p>\n<p>git 명령어에서 commit hash를 작성하기 힘들 때,\nHEAD~0을 쓰면 현재 가리키고 있는 브랜치의 hash를 의미합니다.</p>\n<p>HEAD~1은 브랜치의 부모 커밋을 의미합니다.\nHEAD~2는 그 부모의 부모..</p>\n<p>이런식입니다.</p>\n<h2 id=\"merge-commit-revert\" tabindex=\"-1\">merge commit에 revert하는 것이 거절되는 이유 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/git/git-revert-with-head/\">#</a></h2>\n<p>merge commit을 revert</p>\n<p>merge commit은 여러 commit들이 <strong>동시</strong>에 merge되어 있는 commit입니다.</p>\n<p>revert를 했을 때, 어떤 상태가 되어야 하는 것일까요?</p>\n<p>위 예시에서 Oh,와 Huh,는 conflict 발생 후 merge 되었습니다.\nrevert로 merge를 풀면 git은 main에 merge되어진 foo 혹은 bar 중 어떤 부모를\nrevert 할 것인지 물어봅니다.</p>\n<p>선택한 부모를 revert하고 선택되지 않은 부모의 commit(변경 이력)은 살아남게 됩니다.</p>\n<h3 id=\"\" tabindex=\"-1\">예시 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/git/git-revert-with-head/\">#</a></h3>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/ofHzxS-fXO-776.webp\" width=\"100%\" height=\"auto\" alt=\"image alt\" loading=\"lazy\" decoding=\"async\"></div>\n<ul>\n<li>여기서 부모의 번호가 정해지는 기준은 stack입니다.</li>\n<li>선택된 부모의 commit을 revert합니다.</li>\n</ul>\n<p>즉 아래의 명령어는</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">git</span> revert HEAD~0 <span class=\"token parameter variable\">-m</span> <span class=\"token number\">1</span></code></pre>\n<ul>\n<li>현재 내가 바라보고 있는 commit을 revert할 것</li>\n<li>해당 commit은 merge commit</li>\n<li>revert 할 부모는 1번 (foo)</li>\n<li>즉 bar commit은 살리고 foo commit을 revert 함</li>\n</ul>\n<h3 id=\"-1\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/git/git-revert-with-head/\">#</a></h3>\n<ul>\n<li>HEAD는 branch 혹은 commit을 가리키는 pointer이다.</li>\n<li>HEAD~0은 제자리,</li>\n<li>HEAD~1은 한 부모 위를 가리킨다.</li>\n<li>merge commit을 revert하는 경우 삭제할 부모를 선택해야 한다.</li>\n</ul>\n",
			"date_published": "2023-12-29T23:36:31Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-memory-page-and-segment/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-memory-page-and-segment/",
			"title": "메모리 저장 방식인 페이지와 세그먼트",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">페이지와 세그먼트 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-memory-page-and-segment/\">#</a></h1>\n<p>페이지와 세그먼트는 os가 <strong>메모리를 관리하는 방식</strong>입니다.</p>\n<p>페이지와 세그먼트는 각각 관리 방식에 차이를 가집니다.</p>\n<h2 id=\"page\" tabindex=\"-1\">고정크기의 페이지(Page) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-memory-page-and-segment/\">#</a></h2>\n<ul>\n<li>페이지는 메모리를 고정된 크기의 블록으로 나눕니다.\n<ul>\n<li>일반적으로 킬로바이트, 메가바이트 크기를 가집니다.</li>\n</ul>\n</li>\n<li>주로 가상 메모리에 사용됩니다.\n<ol>\n<li>프로그램이 여러 페이지로 나뉘어집니다.</li>\n<li>필요에 따라 실제 물리 메모리에 적재됩니다.</li>\n</ol>\n</li>\n<li>가상 주소를 물리 주소로 변환하기 위한 테이블을 사용합니다.</li>\n<li>고정된 크기에 의해 내부 단편화 문제가 발생할 수 있습니다.</li>\n</ul>\n<h2 id=\"segment\" tabindex=\"-1\">가변크기의 세그먼트(Segment) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-memory-page-and-segment/\">#</a></h2>\n<ul>\n<li>\n<p>세그먼트는 메모리를 가변적인 크기의 블록으로 나눕니다.</p>\n<ul>\n<li>프로그램의 논리적 단위를 기반으로 크기가 정해집니다.\n<ul>\n<li>예를 들어 함수, 배열, 객체, 프로시저, 스택, 자료구조 등이 세그먼트로 구분됩니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>프로그램의 논리적 구조를 메모리에 반영합니다.</p>\n<ul>\n<li>디버깅에 직관적입니다.</li>\n</ul>\n</li>\n<li>\n<p>가변적인 크기를 설정하기 때문에 메모리 상에서 사용되지 않는 공간 낭비가 발생 할 수 있습니다.</p>\n</li>\n<li>\n<p>세그먼트의 물리적 주소와 크기 정보를 보관하기 위해 가상 주소를\n물리주소로 변환하는 테이블을 사용합니다.</p>\n</li>\n<li>\n<p>세그먼트 메모리 관리는 프로그램의 논리적 구조를 반영합니다.</p>\n<ul>\n<li>세그먼트로 나누어진 메모리들 중 하나의 세그먼트는 힙 메모리일 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>세그먼트 테이블을 가지는 시스템에서 논리 주소(s, d)가 주어지면\n논리주소 (s)에 속하는 세그먼트 테이블에서 s에 속하는 해당 base주소를 찾고,\n해당 base 주소에 변위 d값을 더해줘서 물리주소를 계산합니다.</p>\n</li>\n</ul>\n<h3 id=\"-1\" tabindex=\"-1\">세그먼트 테이블 예시 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-memory-page-and-segment/\">#</a></h3>\n<p>세그먼트 테이블은 각 세그먼트의 시작 주소와 길이를 관리합니다.</p>\n<p>아래는 이를 나타낸 예시 표입니다.</p>\n<table>\n<thead>\n<tr>\n<th>세그먼트 번호</th>\n<th>시작 주소 (Base)</th>\n<th>길이 (Limit)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0x0000</td>\n<td>0x1000</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0x1000</td>\n<td>0x2000</td>\n</tr>\n<tr>\n<td>2</td>\n<td>0x3000</td>\n<td>0x1000</td>\n</tr>\n<tr>\n<td>3</td>\n<td>0x4000</td>\n<td>0x3000</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>세그먼트 번호</strong>: 프로세스 내 각 세그먼트를 식별하는 번호입니다.</li>\n<li><strong>시작 주소 (Base)</strong>: 해당 세그먼트의 물리적 메모리 시작 주소입니다.</li>\n<li><strong>길이 (Limit)</strong>: 세그먼트의 길이를 나타내며, 시작 주소로부터 얼마나 많은 메모리가 할당되었는지를 나타냅니다.</li>\n</ul>\n<p>이 표는 각 세그먼트가 메모리 상에서 어떻게 배치되어 있는지를 보여줍니다.\n예를 들어, 세그먼트 번호 0은 물리적 주소 0x0000부터 시작하여, 0x1000 크기의 메모리를 차지합니다.</p>\n<h3 id=\"-2\" tabindex=\"-1\">세그먼트 테이블 찾아가보기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-memory-page-and-segment/\">#</a></h3>\n<p>세그먼트 테이블은 pagination과 비슷합니다.</p>\n<p>세그먼트 번호와 오프셋이 주어지면 아래의 테이블에서\n메모리 주소를 찾아가고 저장 가능한지 확인 할 수 있습니다.</p>\n<table>\n<thead>\n<tr>\n<th>세그먼트 번호</th>\n<th>시작 주소 (Base)</th>\n<th>길이 (Limit)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0x0000</td>\n<td>0x1000</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0x1000</td>\n<td>0x2000</td>\n</tr>\n<tr>\n<td>2</td>\n<td>0x3000</td>\n<td>0x1000</td>\n</tr>\n<tr>\n<td>3</td>\n<td>0x4000</td>\n<td>0x3000</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>세그먼트 번호: 2</li>\n<li>오프셋: 0x0800\n을 예시로 들겠습니다.</li>\n</ul>\n<ol>\n<li>\n<p>세그먼트 확인: 테이블에서 세그먼트 번호를 찾아갑니다.</p>\n</li>\n<li>\n<p>오프셋 검증: 시작 주소가 0x3000입니다.\n해당 세그먼트의 길이가 0x1000으로 오프셋은\n유효 범위 내에 있습니다.</p>\n</li>\n<li>\n<p>논리주소를 물리주소로 변환하기: 논리주소의 물리적 주소를 찾아가기 위해 세그먼트의 시작 주소에 오프셋을 더합니다.</p>\n</li>\n</ol>\n<ul>\n<li>물리주소 = 세그먼트의 시작주소 + 오프셋입니다.</li>\n<li>0x3000 + 0x08000 = 0x38000</li>\n</ul>\n<p>논리주소는 (2, 0x0800)입니다.\n물리주소는 0x38000입니다.</p>\n<p>만약 오프셋이 세그먼트 테이블의 길이를 넘으면 적재 할 수 없게 됩니다.</p>\n<h2 id=\"-3\" tabindex=\"-1\">페이지와 세그멘테이션 혼용 기법 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-memory-page-and-segment/\">#</a></h2>\n<ul>\n<li>페이지의 외부 단편화, 세그멘테이션의 내부 단편화 문제를 최소화 하기 위해 개발됨</li>\n<li>세그멘트로 메모리를 나눈 후, 세그먼트 내부에서 동일한 크기로 페이징하는 기법이다.</li>\n</ul>\n",
			"date_published": "2023-12-28T22:19:30Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-management-memory/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-management-memory/",
			"title": "운영체제의 메모리 관리 기법",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">메모리 관리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-management-memory/\">#</a></h1>\n<h2 id=\"-1\" tabindex=\"-1\">메모리 관리 기법들 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-management-memory/\">#</a></h2>\n<ul>\n<li>반입 기법</li>\n<li>배치 기법</li>\n<li>할당 기법</li>\n<li>교체 기법</li>\n</ul>\n<h3 id=\"-2\" tabindex=\"-1\">반입 기법 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-management-memory/\">#</a></h3>\n<p><a href=\"https://zerozoo-a.github.io/blog/temp/os-memory-page-and-segment/\">페이지나 세그먼트</a>가 보조 기억장치(ex: HDD, SSD)에서 주기억장치로 적재될 때,\n어느 시기에 적재 할 것인지를 결정하는 전략입니다.</p>\n<p>반입 기법은 다시 2가지로 나뉩니다.</p>\n<ul>\n<li>요구 반입\n<ul>\n<li>가장 일반적입니다</li>\n<li>프로그램이 특정 메모리를 요구할 때 요구된 페이지를 주 메모리로 반입합니다.</li>\n</ul>\n</li>\n<li>예측 반입\n<ul>\n<li>시스템이 필요 할 것으로 예상되는 메모리를 미리 주 메모리로 반입합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"-3\" tabindex=\"-1\">배치 기법 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-management-memory/\">#</a></h3>\n<p>배치 기법은 프로그램이나 작업을 메모리에 할당하는 방법을 의미합니다.</p>\n<p>배치는 말그대로 적당한 프로그램을 메모리의 <strong>어디에 배치</strong> 할 것인지를 다룹니다.</p>\n<p>배치 기법은 다시 3가지로 나뉩니다.</p>\n<ul>\n<li>\n<p>First-Fit (첫 번째 적합)</p>\n<ul>\n<li>배치할 메모리 공간중 가장 처음 만나는 적재 가능한 공간에 적재합니다.</li>\n<li>탐색시간이 매우 빠릅니다. 메모리 앞부분에 작은 빈 공간을 많이 만들 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>Best-Fit (최적 적합)</p>\n<ul>\n<li>남은 메모리 공간중 가장 빈공간이 적은 공간에 적재합니다.</li>\n<li>모든 공간을 탐색하기 때문에 타 방법에 비해 시간이 걸립니다.</li>\n<li>외부 단편화가 줄어들지만 사용하기 힘든 매우 작은 공간이 생겨날 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>Worst-Fit (최악 적합)</p>\n<ul>\n<li>가장 큰 공간에 적재합니다.</li>\n<li>큰 공간이 다 차게되면 빈 공간을 찾기 어려워집니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"-4\" tabindex=\"-1\">할당 기법 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-management-memory/\">#</a></h3>\n<p>실행해야 할 프로세스를 주기억장치에 어떤 방법으로\n할당할 것인지 결정하는 기법을 의미합니다.</p>\n<p>할당 기법은 다시 2가지로 나뉩니다.</p>\n<ul>\n<li>\n<p>연속 할당</p>\n<ul>\n<li>하나의 프로세스가 필요로 하는 메모리를 메모리 상의 연속적인 위치에 할당합니다.</li>\n</ul>\n<p>연속 할당은 다시 3가지로 나뉘어집니다.</p>\n<ul>\n<li>단일 분할 할당\n<ul>\n<li>모든 사용 가능한 메모리가 하나의 큰 블록으로 할당됩니다.</li>\n<li>가장 간단하고, 비효율적입니다..</li>\n</ul>\n</li>\n<li>고정 분할 할당\n<ul>\n<li>메모리를 고정된 크기의 분할로 나눕니다.</li>\n<li>각 분할당 하나의 프로세스를 매핑합니다.</li>\n</ul>\n</li>\n<li>동적 분할 할당\n<ul>\n<li>프로세스 요구에 따라 동적 분할 합니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>분산 할당</p>\n<ul>\n<li>페이징</li>\n<li>세그멘테이션</li>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-memory-page-and-**segment**/\"> 페이징과 세그멘테이션 </a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-address-translation/\">논리 주소와 물리주소, 주소 사상 기법</a></p>\n</li>\n</ul>\n<h2 id=\"-5\" tabindex=\"-1\">교체 기법 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-management-memory/\">#</a></h2>\n<p>교체 기법(Replacement Algorithms)은 운영 체제가 시스템의 사용 가능한 메모리가 부족할 때, 어떤 페이지(또는 세그먼트)를 제거하고 새로운 페이지를 로드할지 결정하는 방법을 말합니다.</p>\n<ul>\n<li>주기억 장치에 있는 프로세스 중 어떤 프로세스를 제거할 것인지 결정하는 기법</li>\n<li>새로운 페이지를 할당하기 위해 현재 할당된 페이지 중 어느 것과 교체할지 결정</li>\n<li>메모리 교체 대상을 결정한다.</li>\n<li>교체 기법의 유형으로는\n<ul>\n<li>FIFO (First-In, First-Out)\n<ul>\n<li>원리: 가장 오래 전에 메모리에 로드된 페이지를 가장 먼저 교체</li>\n<li>특징: 구현이 간단하나, 중요한 페이지가 교체되는 경우가 있을 수 있음</li>\n</ul>\n</li>\n<li>LRU (Least Recently Used)\n<ul>\n<li>원리: 가장 오랫동안 사용되지 않은 페이지를 교체</li>\n<li>특징: <a href=\"https://en.wikipedia.org/wiki/Locality_of_reference\">프로그램의 지역성 원리</a>를 잘 활용하나, 구현이 복잡하고 오버헤드가 있을 수 있음</li>\n</ul>\n</li>\n<li>LFU (Least Frequently Used)\n<ul>\n<li>원리: 가장 적게 사용된 페이지를 교체합니다.</li>\n<li>특징: 사용 빈도를 추적해 초기에 자주 사용되었던 페이지가 장기적으로 사용되지 않더라도 메모리에 남아있을 수 있습니다.</li>\n</ul>\n</li>\n<li>NRU (Not Recently Used)\n<ul>\n<li>원리: 최근에 사용되지 않은 페이지 중 하나를 무작위로 교체합니다.</li>\n<li>특징: 구현이 간단하며, 일반적인 성능이 좋습니다.</li>\n</ul>\n</li>\n<li>Clock (Second Change Algorithm)\n<ul>\n<li>원리: FIFO에 사용됨 플래그를 추가해 구현합니다. 페이지에 두 번째 기회를 주어 사용됨 플래그가 설정된 페이지는 플래그를 해제하고 다시 순환하도록 합니다.</li>\n<li>특징: LRU의 <a href=\"https://ko.wikipedia.org/wiki/%EA%B7%BC%EC%82%AC_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">근사 알고리즘</a>으로, 구현이 간단하고 효과적입니다.</li>\n</ul>\n</li>\n<li>Optimal Page Replacement\n<ul>\n<li>원리: 미래에 가장 오랫동안 사용되지 않을 페이지를 교체합니다.</li>\n<li>특징: 이론적 모델로 실제 시스템에서는 미래의 참조를 예측 할 수 없기에 구현 할 수 는 없습니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
			"date_published": "2023-12-28T22:01:21Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/algos/traversal/DFS-recursive-iterable/",
			"url": "https://zerozoo-a.github.io/blog/algos/traversal/DFS-recursive-iterable/",
			"title": "자바스크립트 깊이 우선 탐색(DFS) iterative 접근",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"dfs\" tabindex=\"-1\">깊이 우선 탐색(DFS)이란 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/traversal/DFS-recursive-iterable/\">#</a></h1>\n<p>깊이 우선 탐색은 트리나 그래프 자료구조를 깊이를 우선해서 탐색하는\n알고리즘을 의미합니다.</p>\n<h2 id=\"\" tabindex=\"-1\">수도 코드 예시 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/traversal/DFS-recursive-iterable/\">#</a></h2>\n<p>대략 아래와 같은 그래프가 존재할 때,</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\nclassDiagram\n    class A {\n    }\n\n    A <--> B\n    A <--> C\n</div>\n<p>서로 존재를 알고 있어야 하는 그래프이므로\n간단한 수도코드처럼 작성해보겠습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// 그래프</span>\n<span class=\"token keyword\">const</span> graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 각 vertex 생성</span>\ngraph<span class=\"token punctuation\">.</span><span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\ngraph<span class=\"token punctuation\">.</span><span class=\"token constant\">B</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\ngraph<span class=\"token punctuation\">.</span><span class=\"token constant\">C</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// edge 연결</span>\n\n<span class=\"token comment\">// A와 B연결 </span>\ngraph<span class=\"token punctuation\">.</span><span class=\"token constant\">A</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngraph<span class=\"token punctuation\">.</span><span class=\"token constant\">B</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// C와 A연결</span>\ngraph<span class=\"token punctuation\">.</span><span class=\"token constant\">A</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngraph<span class=\"token punctuation\">.</span><span class=\"token constant\">C</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>연결이라고 해도, 각 vertex를 서로 찾아갈 수 있는\n해시 키를 상호간 등록하는 것이 전부입니다.</p>\n<p>위 코드로인해 각 vertex의 간선(edge)들은 연결되었습니다.</p>\n<h2 id=\"iterative-dfs\" tabindex=\"-1\">iterative dfs <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/traversal/DFS-recursive-iterable/\">#</a></h2>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">iterativeDFS</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">startVertex<span class=\"token punctuation\">,</span> adjacencyGraph</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>startVertex <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>adjacencyGraph<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>startVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// stack에 가장 첫 vertex 값을 넣습니다.</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n  <span class=\"token keyword\">const</span> visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 방문한 vertex를 기록하고 두번 방문하지 않도록 체크하는 용도입니다.</span>\n  <span class=\"token keyword\">let</span> currentVertex<span class=\"token punctuation\">;</span>\n\n  visited<span class=\"token punctuation\">[</span>startVertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 첫 vertex</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    currentVertex <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 현재 stack을 Pop해서 현재 vertex로 이동합니다.</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>currentVertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// vertex에 도착했으므로 중복된 방문이 아닙니다, result에 값을 밀어 넣습니다.</span>\n\n    adjacencyGraph<span class=\"token punctuation\">[</span>currentVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">neighbor</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 현재 vertex와 연결된 vertex 수 만큼 반복문을 실행합니다.</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>neighbor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이미 방문한적이 있다면 스킵합니다.</span>\n\n      visited<span class=\"token punctuation\">[</span>neighbor<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 방문한적이 없다면 visited에 해당 vertex를 true로 기록합니다.</span>\n      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>neighbor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// stack에 밀어 넣습니다.</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">// 반복문이 종료되면 stack의 수가 늘어나 while문이 종료되지 않습니다. stack에 밀어넣어 두었던</span>\n    <span class=\"token comment\">// vertex들이 stack pop에 의해 currentVertex가 됩니다.</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"-1\" tabindex=\"-1\">사유실험하기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/traversal/DFS-recursive-iterable/\">#</a></h2>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// 그래프</span>\n<span class=\"token keyword\">const</span> graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 각 vertex 생성</span>\ngraph<span class=\"token punctuation\">.</span><span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\ngraph<span class=\"token punctuation\">.</span><span class=\"token constant\">B</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\ngraph<span class=\"token punctuation\">.</span><span class=\"token constant\">C</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// edge 연결</span>\n\n<span class=\"token comment\">// A와 B연결 </span>\ngraph<span class=\"token punctuation\">.</span><span class=\"token constant\">A</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngraph<span class=\"token punctuation\">.</span><span class=\"token constant\">B</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// C와 A연결</span>\ngraph<span class=\"token punctuation\">.</span><span class=\"token constant\">A</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngraph<span class=\"token punctuation\">.</span><span class=\"token constant\">C</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">iterativeDFS</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">startVertex<span class=\"token punctuation\">,</span> adjacencyGraph</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>startVertex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>startVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> currentVertex<span class=\"token punctuation\">;</span>\n\n  visited<span class=\"token punctuation\">[</span>startVertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    currentVertex <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>currentVertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    adjacencyGraph<span class=\"token punctuation\">[</span>currentVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">neighbor</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>neighbor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n      visited<span class=\"token punctuation\">[</span>neighbor<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>neighbor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위 코드를 머리속으로 실행해보겠습니다.</p>\n<p>DFS의 시작점이되는 A는 visited에 true로 표기되어집니다. ⤵️</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">A</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>vertex A는 vertex B, C를 가리키고 있고,\nB, C는 A를 가리키고 있습니다. ⤵️</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"> <span class=\"token keyword\">const</span> graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token constant\">A</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   <span class=\"token constant\">B</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   <span class=\"token constant\">C</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code>vertex A</code>의 배열 값을 순회하면서</p>\n<ul>\n<li><code>stack</code>에 <code>B, C</code>를 추가합니다.</li>\n<li><code>B, C</code>를 <code>visited</code>에 추가합니다.\n<ul>\n<li>현재 vertex에서 이동 가능한 모든 경로를 확인하고 <code>visited</code>에 추가하는 것입니다.</li>\n<li>그 후에 stack에 모두 밀어넣습니다.</li>\n</ul>\n</li>\n</ul>\n<p><code>stack.pop()</code>을 통해 값을 꺼내오므로\n<code>C</code> 값을 먼저 꺼내옵니다.</p>\n<p><code>C</code>가 가진 근접 <code>vertex</code>들을 순회합니다.\n<code>A</code>밖에 없습니다. visited에 의해 더 확인할 vertex가 없습니다.</p>\n<p>다시 <code>while</code>문 검사로 올라갑니다.\nstack을 터트려 <code>B</code>를 확인합니다.</p>\n<p><code>B</code> 또한 근접 <code>vertex</code>는 <code>A</code>밖에 없습니다.</p>\n<p><code>stack</code>의 길이는 모두 소진되어 반복문을 빠져나오게 됩니다.\n<code>dfs함수</code>는 <code>result</code>를 반환하고 종료됩니다.</p>\n<h2 id=\"-2\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/traversal/DFS-recursive-iterable/\">#</a></h2>\n<ul>\n<li>사용예</li>\n</ul>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">A</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">B</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">C</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">D</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">iterativeDFS</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [A, C, D, B]</span></code></pre>\n<ul>\n<li>각 vertex는 서로를 link하기 위해 아래와 같은 형태로 저장 될 수 있다.</li>\n</ul>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"> <span class=\"token keyword\">const</span> graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token constant\">A</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   <span class=\"token constant\">B</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   <span class=\"token constant\">C</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>첫 시작 vertex는 근접 vertex를 방문한적 있는지 검사한다.</li>\n<li>방문한적이 없다면 stack에 밀어넣는다.</li>\n<li>처음 방문한 vertex는 result stack에 push한다.</li>\n</ul>\n",
			"date_published": "2023-12-26T22:41:14Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-control-programs/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-control-programs/",
			"title": "운영체제의 제어 프로그램들",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"\" tabindex=\"-1\">목차 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-control-programs/\">#</a></h2>\n<ul>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/concept-of-Operating-System/\">운영체제의 개념</a>\n<ul>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-control-programs/\">운영체제의 제어 프로그램</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"-1\" tabindex=\"-1\">운영체제의 제어 프로그램 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-control-programs/\">#</a></h1>\n<p>운영체제의 기능에는 제어프로그램이 있다.</p>\n<p>제어프로그램은 아래의 3 프로그램을 가진다.</p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/XNIMbdeE3X-828.webp\" width=\"100%\" height=\"auto\" alt=\"image alt\" loading=\"lazy\" decoding=\"async\"></div>\n<ol>\n<li>Supervisor Program</li>\n<li>Job Control Program</li>\n<li>Data Management Program</li>\n</ol>\n<p>하나씩 알아보겠습니다.</p>\n<h2 id=\"supervisor-program\" tabindex=\"-1\">Supervisor Program <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-control-programs/\">#</a></h2>\n<p>Supervisor Program은 감시프로그램으로 각종 프로그램의 실행과 시스템 전체의 작동 상태를\n감시, 감독합니다.</p>\n<p>역할로는 아래와 같은 역할들이 있습니다.</p>\n<ul>\n<li>시스템 리소스 관리: 컴퓨터의 하드웨어 리소스를 관리합니다.</li>\n<li>작업 스케줄링과 프로세스 관리: 여러 사용자간의 cpu 사용 시간을 조정해 시스템 리소스를 공정하게 사용 할 수 있도록 함</li>\n<li>시스템 보안과 보호: 시스템의 보안을 유지하고, 사용자 간의 충돌을 방지하며, 무단 접근으로부터 시스템을 보호하는 역할을 수행합니다.</li>\n<li>오류 감지와 복구: 시스템상 오류를 감지하고 복구해 시스템의 안전성을 유지합니다.</li>\n<li>인터페이스 제공: 사용자와 다른 시스템 프로그램 간의 인터페이스 역할을 합니다. 이를 통해 사용자와 프로그램은 시스템 리소스에 더 쉽게 접근할 수 있습니다.</li>\n<li>인터럽트 처리: 외부 또는 내부 인터럽트를 처리하고, 적절한 서비스 루틴을 실행하여 시스템의 연속적인 운영을 보장합니다. (인터럽트는 사용자 io나 이벤트등을 의미합니다.)</li>\n</ul>\n<h2 id=\"job-control-program\" tabindex=\"-1\">Job Control Program <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-control-programs/\">#</a></h2>\n<p>Job Control Program은 시스템에 제출된 batch 작업의 실행을 관리, 제어합니다.</p>\n<p>역할로는 아래와 같은 역할들이 있습니다.</p>\n<ul>\n<li>작업 스케줄링: 다수의 작업들을 관리해 시스템 리소스를 공정하게 사용하도록 합니다.</li>\n<li>작업 대기열의 관리: 시스템에 제출된 작업들을 대기열에 배치시키고 관리합니다. 다음 실행될 작업이 어떤 작업인지 결정합니다.</li>\n<li>자원 할당과 관리: 작업이 cpu를 차지하는 시간, 메모리, io등의 자원을 할당, 관리합니다.</li>\n<li>작업 실행의 감독: 작업이 실행되면 실행을 감독하며 상태에 대한 정보를 제공합니다.</li>\n<li>에러 처리: 작업 실행중 에러를 감지하고 처리합니다.</li>\n<li>사용자 피드백 제공: 작업의 완료 상태, 실행 시간, 사용한 리소스등에 대한 정보를 사용자에게 제공합니다.</li>\n</ul>\n<h2 id=\"data-management-program\" tabindex=\"-1\">Data Management Program <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-control-programs/\">#</a></h2>\n<p>Data management Program은 데이터를 저장, 검색, 수정, 삭제, 관리합니다.</p>\n<p>데이터의 무결성, 접근성, 일관성, 보안을 유지하며 대량의 데이터를 효율적으로 처리합니다.</p>\n<p>역할로는 아래와 같은 역할들이 있습니다.</p>\n<ul>\n<li>데이터의 저장 및 조직화: 데이터를 저장하고 조직화합니다. DB, 파일 시스템, 클라우드 등 다양한 형태로 구현됩니다.</li>\n<li>데이터 검색: 사용자나 application의 요구에 따라 데이터를 빠르게 검색합니다.</li>\n<li>데이터 수정 및 갱신: 저장된 데이터를 수정, 갱신합니다. 현재성과 정확성을 유지합니다.</li>\n<li>데이터 무결성 및 일관성 유지: DB의 트랜잭션 관리, 오류 복구 등의 기능을 제공합니다.</li>\n<li>보안 관리: 데이터에 대한 무단 접근을 방지하고, 암호화, 접근 제어 목록, 사용자 인증등의 기능을 제공합니다.</li>\n<li>백업 및 복구: 데이터 손실 방지를 위한 백업, 복구 기능등을 제공합니다.</li>\n<li>데이터 분석 및 보고: 데이터를 분석하고 이를 바탕으로 보고합니다.</li>\n</ul>\n",
			"date_published": "2023-12-25T11:59:52Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/concept-of-Operating-System/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/concept-of-Operating-System/",
			"title": "운영체제의 개념",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"\" tabindex=\"-1\">목차 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/concept-of-Operating-System/\">#</a></h2>\n<ul>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/concept-of-Operating-System/\">운영체제의 개념</a>\n<ul>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/os-control-programs/\">운영체제의 제어 프로그램</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"-1\" tabindex=\"-1\">운영체제의 개념 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/concept-of-Operating-System/\">#</a></h1>\n<p>운영체제는 컴퓨터와 사용자간의 인터페이스 역할을 하는 시스템 소프트웨어</p>\n<h2 id=\"-2\" tabindex=\"-1\">주요 기능 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/concept-of-Operating-System/\">#</a></h2>\n<ul>\n<li>\n<p>자원관리</p>\n<ul>\n<li>cpu, memory, disk, io등 하드웨어 자원을 관리합니다.</li>\n</ul>\n</li>\n<li>\n<p>프로세스 관리</p>\n<ul>\n<li>운영체제 위에서 작동하는 프로세스들(프로그램이 사용하는)을 관리합니다.</li>\n<li>프로세스의 생성, 스케줄링, 동기화, 종료를 관리합니다.</li>\n</ul>\n</li>\n<li>\n<p>메모리 관리</p>\n<ul>\n<li>프로그램이 사용하는 메모리의 할당과 해제를 관리합니다.</li>\n</ul>\n</li>\n<li>\n<p>보안</p>\n<ul>\n<li>시스템 보안을 유지, 사용자 인증 및 권한을 관리합니다.</li>\n</ul>\n</li>\n<li>\n<p>사용자에게 인터페이스 제공</p>\n<ul>\n<li>GUI 혹은 CLI를 제공해 사용자가 시스템과 상호작용 할 수 있게 합니다.</li>\n</ul>\n</li>\n</ul>\n<p>대표적으로는 윈도우, macOS, iOS, 리눅스, 유닉스, 페도라 등등이 존재합니다.</p>\n",
			"date_published": "2023-12-25T11:27:57Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/rust/rust-analyzer-for-vscode/",
			"url": "https://zerozoo-a.github.io/blog/rust/rust-analyzer-for-vscode/",
			"title": "vscode로 rust 개발시 formatter, prettier처럼 적용하기",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"\" tabindex=\"-1\">개요 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/rust/rust-analyzer-for-vscode/\">#</a></h2>\n<p>rust 개발중 저장시마다 auto format되지 않는 경우</p>\n<h2 id=\"-1\" tabindex=\"-1\">해결 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/rust/rust-analyzer-for-vscode/\">#</a></h2>\n<ol>\n<li>\n<p>vscode를 켜줍니다.</p>\n</li>\n<li>\n<p>command + ,를 눌러 settings로 접근합니다.</p>\n</li>\n<li>\n<p>settings.json에서 아래 처럼 json을 추가합니다.</p>\n</li>\n</ol>\n<blockquote>\n<p>editor.defaultFormatter에 들어가는 값은 rust-analyzer의 업데이트시 변경될 수 있습니다.</p>\n</blockquote>\n<blockquote>\n<p>노란 밑줄이 생기면서 vscode가 못알아 먹겠습니다. 라는 warning을 보내면서 대체될만한 value를 추천합니다.</p>\n</blockquote>\n<pre class=\"language-json\" tabindex=\"0\"><code class=\"language-json\">  <span class=\"token property\">\"rust-analyzer.rustfmt.enableRangeFormatting\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"[rust]\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"editor.defaultFormatter\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"rust-lang.rust-analyzer\"</span> \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre>\n",
			"date_published": "2023-12-23T22:25:15Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/square-number/",
			"url": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/square-number/",
			"title": "square number = 제곱수 = 정사각수",
			"content_html": "<br>\n<br>\n<br>\n<ul>\n<li>\n<p>수학에서 제곱수 또는 정사각수는 어떤 자연수를 <strong>두 번 곱해서 나오는 정수</strong>입니다.</p>\n</li>\n<li>\n<p>세번 곱해서 나오는 수는 <strong>세제곱수</strong>입니다.</p>\n<ul>\n<li>네제곱수, 다섯제곱수 등 n 제곱수가 있습니다.</li>\n</ul>\n</li>\n</ul>\n<p>시그마를 사용한 수열의 합 공식과 비슷한 제곱수의 합 공식이 존재합니다.</p>\n<blockquote>\n<p>1부터, n까지의 자연수의 제곱수의 합 공식</p>\n</blockquote>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mi>k</mi><mn>2</mn></msup><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mn>6</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\sum_{k=1}^{n}k^2 = \\frac{n(n+1)(2n+1)}{6}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.9535100000000005em;vertical-align:-1.302113em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.302113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>그 형태가 등차수열의 합 공식과 매우 닮아 있는데 등차수열의 합으로부터 유도되기 때문입니다.</p>\n<blockquote>\n<p>1부터, n까지의 등차수열의 합 공식</p>\n</blockquote>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>k</mi><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\sum_{k-1}^{n}k = \\frac{n(n+1)}{2}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.0118410000000004em;vertical-align:-1.360444em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.360444em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<h2 id=\"\" tabindex=\"-1\">제곱수의 합을 구하는 과정 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/square-number/\">#</a></h2>\n<p>제곱수의 합을 구할 때는 변변 더해서 서로 소거시키는 방법을 사용합니다.</p>\n<p>항등식 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mn>3</mn></msup><mo>−</mo><msup><mi>x</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">(x+1)^3 - x^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span>을 재료로 사용하겠습니다.\n나머지 재료는 변변 더해서 소거시킨다는 생각입니다.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mn>3</mn></msup><mo>−</mo><msup><mi>x</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">(x+1)^3 - x^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span>을 전개하겠습니다.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>−</mo><msup><mi>x</mi><mn>3</mn></msup><mo>=</mo><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><mi>x</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>−</mo><msup><mi>x</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">(x+1)^2(x+1) - x^3 = (x^2+2x+1)(x+1) - x^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mn>2</mn><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>x</mi><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><mi>x</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>−</mo><msup><mi>x</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">(x^3 + 2x^2 + x + x^2 + 2x + 1) - x^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mn>3</mn><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><mi>x</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>−</mo><msup><mi>x</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">(x^3 + 3x^2 + 3x + 1) - x^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mn>3</mn></msup><mo>−</mo><msup><mi>x</mi><mn>3</mn></msup><mo>=</mo><mn>3</mn><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">(x+1)^3 - x^3 = 3x^2 + 3x + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></p>\n<p>전개해보니 최고차항이 2입니다.</p>\n<p>수열 하던 느낌을 살려 1 부터 n까지 x에 대입해보면</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mn>3</mn></msup><mo>−</mo><msup><mn>1</mn><mn>3</mn></msup><mo>=</mo><mn>3</mn><mo>×</mo><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><mn>3</mn><mo>×</mo><mn>1</mn><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">(1+1)^3-1^3 = 3 \\times 1^2 + 3 \\times 1 + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mo>+</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mn>3</mn></msup><mo>−</mo><msup><mn>2</mn><mn>3</mn></msup><mo>=</mo><mn>3</mn><mo>×</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mn>3</mn><mo>×</mo><mn>2</mn><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">(2+1)^3-2^3 = 3 \\times 2^2 + 3 \\times 2 + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>3</mn><mo>+</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mn>3</mn></msup><mo>−</mo><msup><mn>3</mn><mn>3</mn></msup><mo>=</mo><mn>3</mn><mo>×</mo><msup><mn>3</mn><mn>2</mn></msup><mo>+</mo><mn>3</mn><mo>×</mo><mn>3</mn><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">(3+1)^3-3^3 = 3 \\times 3^2 + 3 \\times 3 + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">\\dots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.12em;vertical-align:0em;\"></span><span class=\"minner\">…</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mn>3</mn></msup><mo>−</mo><msup><mi>n</mi><mn>3</mn></msup><mo>=</mo><mn>3</mn><mo>×</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><mo>×</mo><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">(n+1)^3-n^3 = 3 \\times n^2 + 3 \\times n + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></p>\n<p>이제 위 대입식들을 변변 더하는 것으로 정리하겠습니다.\n첫번째 대입식의 좌변 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">(1+1)^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span>과 두번째 대입식의 좌변 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">-2^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span>은 서로 소거 됩니다.</p>\n<p>이런 방식으로 n까지 쭉 소거해주세요</p>\n<p>이렇게 소거하면 좌변은 첫번째 식의 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>1</mn><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">-1^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span>\nn번째 식의 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">(n+1)^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span>이 남게 됩니다.\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mn>3</mn></msup><mo>−</mo><msup><mn>1</mn><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">(n+1)^3 - 1^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></p>\n<p>우변의 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>3</mn><mo>×</mo><msup><mn>1</mn><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mn>3</mn><mo>×</mo><msup><mn>2</mn><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mn>3</mn><mo>×</mo><msup><mn>3</mn><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">(3 \\times 1^2) + (3 \\times 2^2) + (3 \\times 3^2)\\dots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span></span></span></span>를 정리하면</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn><mo stretchy=\"false\">(</mo><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>3</mn><mn>2</mn></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">3(1^2+2^2+3^2+\\dots+n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>으로 정리됩니다.</p>\n<p>마찬가지로 우변의 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>3</mn><mo>×</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mn>3</mn><mo>×</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mn>3</mn><mo>×</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mo>…</mo><mo stretchy=\"false\">(</mo><mn>3</mn><mo>×</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(3 \\times 1) + (3 \\times 2) + (3 \\times 3) + \\dots (3 \\times n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>을 정리하면</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mn>3</mn><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">3(1 + 2 + 3 + \\dots + n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>으로 정리됩니다.</p>\n<p>마지막 1이 n개 있으므로 n을 더해주면</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mn>3</mn></msup><mo>−</mo><msup><mn>1</mn><mn>3</mn></msup><mo>=</mo><mn>3</mn><mo stretchy=\"false\">(</mo><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>3</mn><mn>2</mn></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mn>3</mn><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mn>3</mn><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">(n+1)^3 - 1^3 = 3(1^2+2^2+3^2+\\dots+n) + 3(1 + 2 + 3 + \\dots + n) + n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>이 됩니다.</p>\n<p>우변의 괄호 안 수열들을 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∑</mo></mrow><annotation encoding=\"application/x-tex\">\\sum</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span>을 통해 나타낼 수 있게 되었습니다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mn>3</mn></msup><mo>−</mo><msup><mn>1</mn><mn>3</mn></msup><mo>=</mo><mn>3</mn><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mi>k</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>k</mi><mo>+</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">(n+1)^3 - 1^3 = 3\\sum_{k=1}^{n}k^2 + 3\\sum_{k=1}^{n}k + n\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9535100000000005em;vertical-align:-1.302113em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.302113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9535100000000005em;vertical-align:-1.302113em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.302113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span></p>\n<p>이 식에서 저희가 이미 알고 있는 등차수열의 합은 계산하기 쉬운 형태로 변환해줍니다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mn>3</mn></msup><mo>−</mo><msup><mn>1</mn><mn>3</mn></msup><mo>=</mo><mn>3</mn><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mi>k</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><mfrac><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac><mo>+</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">(n+1)^3 - 1^3 = 3\\sum_{k=1}^{n}k^2 + 3\\frac{n(n+1)}{2} + n\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9535100000000005em;vertical-align:-1.302113em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.302113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\">3</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span></p>\n<p>이제 저희가 알고싶은 공식인 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msup><mi>k</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\sum_{k=1}^{n}k^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.113818em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>을 좌변에 두고 나머지를 모두 우변에 옮겨주고 정리하는 것으로\n제곱의 합 공식이 완성됩니다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mn>3</mn></msup><mo>−</mo><msup><mn>1</mn><mn>3</mn></msup><mo>=</mo><mn>3</mn><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mi>k</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><mfrac><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac><mo>+</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">(n+1)^3 - 1^3 = 3\\sum_{k=1}^{n}k^2 + 3\\frac{n(n+1)}{2} + n\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9535100000000005em;vertical-align:-1.302113em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.302113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\">3</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>3</mn><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mi>k</mi><mn>2</mn></msup><mo>=</mo><msup><mi>n</mi><mn>3</mn></msup><mo>+</mo><mn>3</mn><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><mi>n</mi><mo>−</mo><mfrac><mrow><mn>3</mn><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac><mo>−</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">3\\sum_{k=1}^{n}k^2 = n^3+3n^2+3n-\\frac{3n(n+1)}{2}-n\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.9535100000000005em;vertical-align:-1.302113em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.302113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>3</mn><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mi>k</mi><mn>2</mn></msup><mo>=</mo><msup><mi>n</mi><mn>3</mn></msup><mo>+</mo><mn>3</mn><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><mi>n</mi><mo>−</mo><mfrac><mrow><mn>3</mn><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac><mo>−</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">3\\sum_{k=1}^{n}k^2 = n^3+3n^2+3n-\\frac{3n(n+1)}{2}-n\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.9535100000000005em;vertical-align:-1.302113em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.302113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>3</mn><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mi>k</mi><mn>2</mn></msup><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mn>2</mn><msup><mi>n</mi><mn>3</mn></msup><mo>+</mo><mn>3</mn><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">3\\sum_{k=1}^{n}k^2 = \\frac{n(2n^3+3n^2+n)}{2}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.9535100000000005em;vertical-align:-1.302113em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.302113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">3</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mi>k</mi><mn>2</mn></msup><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mn>2</mn><msup><mi>n</mi><mn>3</mn></msup><mo>+</mo><mn>3</mn><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><mn>6</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\sum_{k=1}^{n}k^2 = \\frac{n(2n^3+3n^2+n)}{6}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.9535100000000005em;vertical-align:-1.302113em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.302113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">3</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mi>k</mi><mn>2</mn></msup><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mn>6</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\sum_{k=1}^{n}k^2 = \\frac{n(n+1)(2n+1)}{6}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.9535100000000005em;vertical-align:-1.302113em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.302113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>으로 정리됩니다.</p>\n",
			"date_published": "2023-12-19T22:14:35Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/inverse-function/",
			"url": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/inverse-function/",
			"title": "역함수",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">역함수의 정의 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/inverse-function/\">#</a></h1>\n<ul>\n<li>함수의 정의: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>A</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">f: A → B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>는 집합 A의 각 원소를 B의 원소에 대응시킵니다.</li>\n<li>역함수의 정의: 함수 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>의 역함수는 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">f^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>로 작성합니다.\n함수가 A의 원소를 B에 대응시켰다면 역함수는 B의 각 원소를 A에 대응시킵니다.\n(치역을 역함수에 넣으면 그에 해당하는 정의역이 나오는 느낌)</li>\n<li>1:1 대응: 역함수를 가지려면 함수는 정의역에 대한 치역이 정확히 하나여야 합니다.\n전사단사라고도 합니다.</li>\n</ul>\n<h1 id=\"-1\" tabindex=\"-1\">역함수의 특성 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/inverse-function/\">#</a></h1>\n<ul>\n<li>입출력 관계: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">f(x) = y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>일 때, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">f^{-1}(y) = x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>입니다.</li>\n<li>함수의 복합: 함수 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>와 역함수 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">f^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>에 대해, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">f(x) = y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>일 때, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">f^{-1}(y) = x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>입니다.\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">f(f^{-1}(y)) = y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>가 성립합니다.\n역시 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">f^{-1}(f(x)) = x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>도 성립합니다.</li>\n</ul>\n<h1 id=\"-2\" tabindex=\"-1\">역함수 구해보기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/inverse-function/\">#</a></h1>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>2</mn><mi>x</mi><mo>+</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">f(x) = 2x + 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>일 떄, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>=</mo><mn>2</mn><mi>x</mi><mo>+</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">y=2x+3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>이므로 x, y의 위치를 변경하면\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi>y</mi><mo>−</mo><mn>3</mn></mrow><mn>2</mn></mfrac><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\frac{y-3}{2}=x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.242216em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.897216em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.446108em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">3</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></p>\n<p>역함수에 대해 다시 정의(x, y를 다시 정의)하면</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mi>x</mi><mo>−</mo><mn>3</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">f^{-1}(x) = \\frac{x-3}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">3</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>이 됩니다.</p>\n",
			"date_published": "2023-12-13T23:28:12Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/product-rule-of-logarithms/",
			"url": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/product-rule-of-logarithms/",
			"title": "로그 곱셈 법칙",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">성질 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/product-rule-of-logarithms/\">#</a></h1>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>b</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>b</mi></msub><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>b</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">log_b(x) + log_b(y) = log_b(xy)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"-1\" tabindex=\"-1\">증명 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/product-rule-of-logarithms/\">#</a></h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mn>8</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">log_2(8) = 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">8</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mn>4</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">log_2(4) = 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span></p>\n<p>위 두 식을 곱해 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mn>8</mn><mi>x</mi><mn>4</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">log_2(8x4)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">8</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">4</span><span class=\"mclose\">)</span></span></span></span>라고 한다면,\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mn>8</mn><mi>x</mi><mn>4</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mn>32</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">log_2(8x4) = log_2(32) = 5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">8</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">4</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span></span></span></span>입니다.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>b</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>b</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>b</mi></msub><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">log_b(xy) = log_b(x) + log_b(y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>가 성립하는지 대입해보겠습니다.\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>b</mi></msub><mo stretchy=\"false\">(</mo><mn>32</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>b</mi></msub><mo stretchy=\"false\">(</mo><mn>8</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>b</mi></msub><mo stretchy=\"false\">(</mo><mn>4</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>3</mn><mo>+</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">log_b(32) = log_b(8) + log_b(4) = 3 + 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">8</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span></p>\n<p>잘 대입됩니다.</p>\n",
			"date_published": "2023-12-13T22:50:12Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/log-function/",
			"url": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/log-function/",
			"title": "로그함수",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">로그함수란 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/log-function/\">#</a></h1>\n<p>로그함수 혹은 로가리즘 함수는 지수 함수의 역함수입니다.</p>\n<p>로그함수의 형태로부터 용어를 정의해보겠습니다.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>b</mi></msub><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">log_b{x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span></span></span> b는 밑, x는 로그함수의 입력값입니다.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>b</mi><mi>y</mi></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">b^y = x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>일 때, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>b</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">log_b(x) = y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>입니다.</p>\n<blockquote>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mo>=</mo><mn>8</mn></mrow><annotation encoding=\"application/x-tex\">2^3 = 8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">8</span></span></span></span>일 때, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mn>8</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">log_2(8) = 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">8</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>입니다.</p>\n</blockquote>\n<h2 id=\"-1\" tabindex=\"-1\">사용 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/log-function/\">#</a></h2>\n<p>2를 몇번 제곱해야 8이 될까요?</p>\n<p>어렵지않게 3이라는 것을 알 수 있습니다.\n로그함수로 나타내면 아래와 같습니다.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mn>8</mn><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">log_2{8} = 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\">8</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span></p>\n<h2 id=\"-2\" tabindex=\"-1\">로그함수의 성질 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/log-function/\">#</a></h2>\n<ul>\n<li>곱의 로그</li>\n<li>밑변환 공식</li>\n<li>나눗셈</li>\n<li>지수</li>\n</ul>\n",
			"date_published": "2023-12-13T22:15:52Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/monotonic-function/",
			"url": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/monotonic-function/",
			"title": "단조함수",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">단조함수란 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/monotonic-function/\">#</a></h1>\n<p>단조함수란 입력값이 입력값에 따라 출력값이 일정한 방향으로만 변화하는 함수를 의미합니다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">종류 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/monotonic-function/\">#</a></h2>\n<ul>\n<li>\n<p>단조증가 함수 (Monotonically Increasing Function)</p>\n<ul>\n<li>조건\n<ul>\n<li>함수 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>에 대해 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>에 대해 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>&lt;</mo><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_1 &lt; x_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>이면\n항상 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo><mo>≤</mo><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x_1) \\le f(x_2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>이다.</li>\n<li>함수값이 증가하면 함수의 출력값이 <strong>증가</strong>하거나 동일하게 유지됩니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>단조감수 함수 (Monotonically Decreasing Function)</p>\n<ul>\n<li>조건\n<ul>\n<li>함수 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>에 대해 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>에 대해 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>&lt;</mo><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_1 &lt; x_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>이면\n항상 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo><mo>≥</mo><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x_1) \\ge f(x_2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>이다.</li>\n<li>함수값이 증가하면 함수의 출력값이 <strong>감소</strong>하거나 동일하게 유지됩니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>단조함수는 단조증가, 단조감수한다면 역함수를 가집니다.</p>\n</li>\n</ul>\n<h2 id=\"-2\" tabindex=\"-1\">단조함수의 엄격함 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/monotonic-function/\">#</a></h2>\n<p>단조함수에서 엄격하다는 것은 단조함수의 동일하게 유지된다는 특성이 성립하지 않음을 의미합니다.</p>\n<h2 id=\"-3\" tabindex=\"-1\">엄격한 단조증가 함수의 예 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/monotonic-function/\">#</a></h2>\n<p>예시로 아주 단순한 단조증가 함수를 생각해보겠습니다.</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f(x) = x + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n</ul>\n<p>엄격하고, 입력값을 단조증가하는 함수입니다.\n증명해보겠습니다.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>는 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>&lt;</mo><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_1 &lt; x_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>를 만족한다고 합시다.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f(x_1) = x_1 + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f(x_2) = x_2 + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></p>\n<p>위 식은 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mn>1</mn><mo>&lt;</mo><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x_1 + 1 &lt; x_2 + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>을 만족합니다.\n따라서, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x_1) &lt; f(x_2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>을 만족합니다.</p>\n<p>역함수가 존재하는지 확인해보겠습니다. (지수함수는 모두 역함수를 가지므로 당연합니다.)</p>\n<p>아무튼 역함수를 구해보겠습니다.</p>\n<ol>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f(x)=x+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n<li>x, y(f(x))의 역할(위치)을 변경합니다. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>y</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x = y + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n<li>정리하면 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>−</mo><mn>1</mn><mo>=</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x - 1 = y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>=</mo><mi>x</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">y=x-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f(x)=x+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>의 역함수는 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f^{-1}(x) = x - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>입니다.</li>\n</ol>\n",
			"date_published": "2023-12-13T21:29:10Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Exponential-Expansion-rational/",
			"url": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Exponential-Expansion-rational/",
			"title": "지수의 확장: 유리수의 지수",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">지수의 확장: 유리수의 지수 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Exponential-Expansion-rational/\">#</a></h1>\n<h1 id=\"-1\" tabindex=\"-1\">지수의 확장 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Exponential-Expansion-rational/\">#</a></h1>\n<ul>\n<li><a href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Exponential-Expansion-negative-integer/\">지수의 확장: 음의 정수 지수</a></li>\n<li><a href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Exponential-Expansion-rational/\">지수의 확장: 유리수의 지수 ✨</a></li>\n</ul>\n<h2 id=\"-2\" tabindex=\"-1\">지수가 유리수인 경우 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Exponential-Expansion-rational/\">#</a></h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mfrac><mi>n</mi><mi>m</mi></mfrac></msup><mo>=</mo><mroot><msup><mi>a</mi><mi>n</mi></msup><mi>m</mi></mroot></mrow><annotation encoding=\"application/x-tex\">a^{\\frac{n}{m}} = \\sqrt[m]{a^n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84708em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.84708em;\"><span style=\"top:-3.363em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mopen nulldelimiter sizing reset-size3 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6915428571428572em;\"><span style=\"top:-2.656em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span style=\"top:-3.2255000000000003em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:0.049em;\"></span></span><span style=\"top:-3.384em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.344em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size3 size6\"></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.15980399999999995em;\"></span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6475152000000001em;\"><span style=\"top:-2.9322352em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801960000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.590392em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.840196em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15980399999999995em;\"><span></span></span></span></span></span></span></span></span></p>\n<h2 id=\"-3\" tabindex=\"-1\">원리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Exponential-Expansion-rational/\">#</a></h2>\n<ul>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><msup><mn>7</mn><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>3</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">27^{1/3}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord\">7</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<ol>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><msup><mn>7</mn><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>3</mn></mrow></msup><mo>=</mo><mroot><mrow><mn>2</mn><msup><mn>7</mn><mn>1</mn></msup></mrow><mn>3</mn></mroot></mrow><annotation encoding=\"application/x-tex\">27^{1/3}=\\sqrt[3]{27^1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord\">7</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.08494599999999997em;\"></span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8442848000000001em;\"><span style=\"top:-3.0220648em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9550540000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord\">7</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.915054em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.08494599999999997em;\"><span></span></span></span></span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∗</mo><mi>x</mi><mo>∗</mo><mi>x</mi><mo>=</mo><mn>27</mn></mrow><annotation encoding=\"application/x-tex\">x * x * x = 27</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">7</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">x = 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>3</mn><mn>3</mn></msup><mo>=</mo><mn>27</mn></mrow><annotation encoding=\"application/x-tex\">3^3 = 27</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">7</span></span></span></span></li>\n</ol>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>6</mn><msup><mn>4</mn><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>6</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">64^{1/6}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<ol>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>6</mn><msup><mn>4</mn><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>6</mn></mrow></msup><mo>=</mo><mroot><mrow><mn>6</mn><msup><mn>4</mn><mn>1</mn></msup></mrow><mn>6</mn></mroot></mrow><annotation encoding=\"application/x-tex\">64^{1/6}=\\sqrt[6]{64^1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.08494599999999997em;\"></span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8442848000000001em;\"><span style=\"top:-3.0220648em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9550540000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">6</span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.915054em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.08494599999999997em;\"><span></span></span></span></span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∗</mo><mi>x</mi><mo>∗</mo><mi>x</mi><mo>∗</mo><mi>x</mi><mo>∗</mo><mi>x</mi><mo>=</mo><mn>64</mn></mrow><annotation encoding=\"application/x-tex\">x * x * x * x * x = 64</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">x = 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>5</mn></msup><mo>=</mo><mn>64</mn></mrow><annotation encoding=\"application/x-tex\">2^5 = 64</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span></span></span></span></li>\n</ol>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">x^{1/2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>3</mn></msup><mo>=</mo><mi>x</mi><mo>∗</mo><mi>x</mi><mo>∗</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x^{3} = x * x * x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>=</mo><mi>x</mi><mo>∗</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x^{2} = x * x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>1</mn></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x^{1} = x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup><mo>=</mo><mroot><mi>x</mi><mn>2</mn></mroot></mrow><annotation encoding=\"application/x-tex\">x^{1/2} = \\sqrt[2]{x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.23972em;\"></span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6585560000000001em;\"><span style=\"top:-2.836336em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8002800000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-2.76028em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.23972em;\"><span></span></span></span></span></span></span></span></span>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><msqrt><mi>x</mi></msqrt><mo>∗</mo><msqrt><mi>x</mi></msqrt></mrow><annotation encoding=\"application/x-tex\">x = \\sqrt{x} * \\sqrt{x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.23972em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8002800000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-2.76028em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.23972em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.23972em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8002800000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-2.76028em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.23972em;\"><span></span></span></span></span></span></span></span></span></li>\n</ul>\n</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>3</mn></mrow></msup><mo>=</mo><mroot><mi>x</mi><mn>3</mn></mroot></mrow><annotation encoding=\"application/x-tex\">x^{1/3} = \\sqrt[3]{x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.23972em;\"></span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6585560000000001em;\"><span style=\"top:-2.836336em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8002800000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-2.76028em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.23972em;\"><span></span></span></span></span></span></span></span></span></li>\n</ul>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>10</mn><msup><mn>0</mn><mn>1.5</mn></msup><mo>=</mo><mn>10</mn><msup><mn>0</mn><mrow><mn>3</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup><mo>=</mo><mroot><mrow><mn>10</mn><msup><mn>0</mn><mn>3</mn></msup></mrow><mn>2</mn></mroot><mo>=</mo><mn>100</mn><mroot><mrow><mn>1</mn><msup><mn>0</mn><mn>2</mn></msup></mrow><mn>2</mn></mroot><mo>=</mo><mn>100</mn><mo>∗</mo><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">100^{1.5} = 100^{3/2} = \\sqrt[2]{100^3} = 100\\sqrt[2]{10^2} = 100 * 10</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">.</span><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.08494599999999997em;\"></span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8442848000000001em;\"><span style=\"top:-3.0220648em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9550540000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.915054em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.08494599999999997em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.08494599999999997em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8442848000000001em;\"><span style=\"top:-3.0220648em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9550540000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.915054em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.08494599999999997em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span></span></p>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>10</mn><msup><mn>0</mn><mn>1.5</mn></msup><mo>=</mo><mn>10</mn><msup><mn>0</mn><mrow><mn>3</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup><mo>=</mo><mo stretchy=\"false\">(</mo><mrow><mn>10</mn><msup><mn>0</mn><mn>3</mn></msup></mrow><msup><mo stretchy=\"false\">)</mo><mn>0.5</mn></msup><mo>=</mo><mo stretchy=\"false\">(</mo><mrow><mn>10</mn><msup><mn>0</mn><mn>3</mn></msup></mrow><msup><mo stretchy=\"false\">)</mo><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup><mo>=</mo><mroot><mrow><mn>10</mn><msup><mn>0</mn><mn>3</mn></msup></mrow><mn>2</mn></mroot><mo>=</mo><mn>100</mn><mroot><mrow><mn>1</mn><msup><mn>0</mn><mn>2</mn></msup></mrow><mn>2</mn></mroot><mo>=</mo><mn>100</mn><mo>∗</mo><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">100^{1.5} = 100^{3/2} = ({100^3})^{0.5} = ({100^3})^{1/2} = \\sqrt[2]{100^3} = 100\\sqrt[2]{10^2} = 100 * 10</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">.</span><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mord mtight\">.</span><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.08494599999999997em;\"></span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8442848000000001em;\"><span style=\"top:-3.0220648em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9550540000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.915054em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.08494599999999997em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.08494599999999997em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8442848000000001em;\"><span style=\"top:-3.0220648em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9550540000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.915054em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.08494599999999997em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span></span></p>\n</li>\n</ul>\n<h3 id=\"-4\" tabindex=\"-1\">(지수 = <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Exponential-Expansion-rational/\">#</a></h3>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>4</mn><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup><mo>=</mo><mroot><msup><mn>4</mn><mn>1</mn></msup><mn>2</mn></mroot><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">4^{1/2} = \\sqrt[2]{4^1} = 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.08494599999999997em;\"></span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8442848000000001em;\"><span style=\"top:-3.0220648em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9550540000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\"><span class=\"mord\">4</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.915054em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.08494599999999997em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>8</mn><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>4</mn></mrow></msup><mo>=</mo><mroot><msup><mn>8</mn><mn>1</mn></msup><mn>4</mn></mroot><mo>≈</mo><mn>1.682</mn></mrow><annotation encoding=\"application/x-tex\">8^{1/4} = \\sqrt[4]{8^1} ≈ 1.682</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">8</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.08494599999999997em;\"></span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8442848000000001em;\"><span style=\"top:-3.0220648em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9550540000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\"><span class=\"mord\">8</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.915054em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.08494599999999997em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">6</span><span class=\"mord\">8</span><span class=\"mord\">2</span></span></span></span></li>\n</ul>\n",
			"date_published": "2023-12-12T23:49:34Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Exponential-Expansion-negative-integer/",
			"url": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Exponential-Expansion-negative-integer/",
			"title": "지수의 확장: 음의 정수 지수",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">지수의 확장 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Exponential-Expansion-negative-integer/\">#</a></h1>\n<ul>\n<li><a href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Exponential-Expansion-negative-integer/\">지수의 확장: 음의 정수 지수 ✨</a></li>\n<li><a href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Exponential-Expansion-rational/\">지수의 확장: 유리수의 지수</a></li>\n</ul>\n<h2 id=\"-1\" tabindex=\"-1\">지수가 음수인 경우 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Exponential-Expansion-negative-integer/\">#</a></h2>\n<h3 id=\"0\" tabindex=\"-1\">(지수 = 0) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Exponential-Expansion-negative-integer/\">#</a></h3>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mn>0</mn></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a^0 = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n</ul>\n<h3 id=\"1\" tabindex=\"-1\">(지수 = -1) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Exponential-Expansion-negative-integer/\">#</a></h3>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mfrac><mn>1</mn><msup><mi>a</mi><mn>1</mn></msup></mfrac></mrow><annotation encoding=\"application/x-tex\">a^{-1} = \\frac{1}{a^1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></li>\n</ul>\n<h3 id=\"n\" tabindex=\"-1\">(지수 = -n) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Exponential-Expansion-negative-integer/\">#</a></h3>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mrow><mo>−</mo><mi>n</mi></mrow></msup><mo>=</mo><mfrac><mn>1</mn><msup><mi>a</mi><mi>n</mi></msup></mfrac></mrow><annotation encoding=\"application/x-tex\">a^{-n} = \\frac{1}{a^n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935428571428571em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></li>\n</ul>\n<h3 id=\"-2\" tabindex=\"-1\">지수가 자연수 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Exponential-Expansion-negative-integer/\">#</a></h3>\n<p>1. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>0</mn></msup><mo>=</mo><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">10^0 = 10</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span></span>\n2. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>2</mn></msup><mo>=</mo><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">10^2 = 100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>\n3. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup><mo>=</mo><mn>1000</mn></mrow><annotation encoding=\"application/x-tex\">10^3 = 1000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>\n4. ...</p>\n<h3 id=\"-3\" tabindex=\"-1\">지수를 음수로 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Exponential-Expansion-negative-integer/\">#</a></h3>\n<ol>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mfrac><mn>1</mn><mn>10</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">10^{-1} = \\frac{1}{10}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>2</mn></mrow></msup><mo>=</mo><mfrac><mn>1</mn><mn>100</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">10^{-2} = \\frac{1}{100}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">0</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>3</mn></mrow></msup><mo>=</mo><mfrac><mn>1</mn><mn>1000</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">10^{-3} = \\frac{1}{1000}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">0</span><span class=\"mord mtight\">0</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></li>\n</ol>\n<ul>\n<li>연속적으로</li>\n</ul>\n<ol>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup><mo>=</mo><mn>1000</mn></mrow><annotation encoding=\"application/x-tex\">10^{3} = 1000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>2</mn></msup><mo>=</mo><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">10^{2} = 100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>1</mn></msup><mo>=</mo><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">10^{1} = 10</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>0</mn></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">10^{0} = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mfrac><mn>1</mn><mn>10</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">10^{-1} = \\frac{1}{10}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>2</mn></mrow></msup><mo>=</mo><mfrac><mn>1</mn><mn>100</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">10^{-2} = \\frac{1}{100}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">0</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>3</mn></mrow></msup><mo>=</mo><mfrac><mn>1</mn><mn>1000</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">10^{-3} = \\frac{1}{1000}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">0</span><span class=\"mord mtight\">0</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></li>\n</ol>\n",
			"date_published": "2023-12-12T23:16:49Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/algos/reduce/create-deep-object/",
			"url": "https://zerozoo-a.github.io/blog/algos/reduce/create-deep-object/",
			"title": "create deep object",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">깊은 객체를 만드는 것 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/reduce/create-deep-object/\">#</a></h1>\n<p>배열을 객체로 만드는 방법은 보통 reduce를 사용합니다.\nreduce로 배열을 접어가며 객체를 생성합니다.</p>\n<p>다만 만들고 싶은 것은 깊이가 깊은 객체입니다.\n예를 들어 아래와 같습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token function\">arrToObj</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { a: { b: {c:{} } } }</span></code></pre>\n<h2 id=\"-1\" tabindex=\"-1\">구현 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/reduce/create-deep-object/\">#</a></h2>\n<p>구현은 아래와 같습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">arrToObj</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> res <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n",
			"date_published": "2023-12-10T18:56:09Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/algos/reduce/deep-merge/",
			"url": "https://zerozoo-a.github.io/blog/algos/reduce/deep-merge/",
			"title": "자바스크립트의 deepMerge에 대해 - deep merge in js",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"\" tabindex=\"-1\">서론 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/reduce/deep-merge/\">#</a></h2>\n<p>자바스크립트에서 객체를 합치는 작업은 흔히 발생합니다.\n특히, 복잡한 구조를 가진 객체들을 효율적으로 합치는 것은 매우 중요한 작업이 될 수 있습니다.</p>\n<p>자바스크립트의 deep merge에 대해 알아보겠습니다.</p>\n<h2 id=\"deep-merge\" tabindex=\"-1\">deep merge란? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/reduce/deep-merge/\">#</a></h2>\n<p>deep merge를 이해하기 위해선 merge를 먼저 알아두는 것이 좋습니다.</p>\n<h3 id=\"case-1\" tabindex=\"-1\">case 1 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/reduce/deep-merge/\">#</a></h3>\n<p>아래는 흔히 사용되는 덮어 씌우기 merge입니다.</p>\n<ul>\n<li>key가 중복되면 나중에 덮어 씌우는 쪽인 변수 b의 값으로 덮어 씌웁니다.</li>\n</ul>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> merged <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>b<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {a:1, b: 3}</span></code></pre>\n<h3 id=\"case-2\" tabindex=\"-1\">case 2 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/reduce/deep-merge/\">#</a></h3>\n<p>아래의 경우는 어떨까요?</p>\n<p>객체 a, b는 key b를 똑같이 가지고 있습니다.\n하지만 b의 value는 서로 다른 값입니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">d</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> merged <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>b<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ??</span></code></pre>\n<p>이 시점부터는 유저마다 원하는 결과값이 다를 수 있습니다.\n예상되는 결과값들은 아래와 같습니다.</p>\n<ol>\n<li><code>{a: 1, b: {c:3, d: 4}}</code></li>\n<li><code>{a: 1, b: {d: 4}}</code></li>\n<li><code>{a: 1, b: {c: 3}}</code></li>\n</ol>\n<p><code>1</code>을 반환해주면 별로 할 일이 없어서 좋습니다만\n애석하게도 자바스크립트는 그리 친절하지 않습니다.</p>\n<p>위 두 객체 <code>a, b</code>는 서로 다른 메모리에 있습니다.\n서로 <code>스키마</code>가 같더라도 다른 객체로 인식합니다.</p>\n<p>따라서 나중에 온 값으로 덮어 씌운다는 방식을 그대로 따르게 됩니다.</p>\n<p>이제 deep merge라는 함수가 왜 만들어졌는지 알 수 있습니다.</p>\n<p>바로 아래와 같은 결과값을 받고 싶기 때문입니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">d</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> merged <span class=\"token operator\">=</span> <span class=\"token function\">deepMerge</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {a: 1, b: {c:3, d: 4}}</span></code></pre>\n<h2 id=\"-1\" tabindex=\"-1\">구현하기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/reduce/deep-merge/\">#</a></h2>\n<p>구현하고자 하는 것은 단순합니다.\n두 객체의 key를 배열로 뽑아 순회합니다.</p>\n<ul>\n<li>key를 통해 객체의 값을 확인합니다.</li>\n<li>type이 object인 경우 재귀함수를 호출합니다.\n<ul>\n<li>object가 아닌 경우 result에 obj2의 key, value를 추가합니다.</li>\n</ul>\n</li>\n<li>object가 아닌 경우는 그냥 추가합니다.</li>\n</ul>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">deepMerge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj1<span class=\"token punctuation\">,</span> obj2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>obj1 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Create a copy of obj1</span>\n\n\tObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> obj2<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> result<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tresult<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">deepMerge</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> obj2<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Recursively merge nested objects</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tresult<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> obj2<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Assign if the property does not exist in obj1 or is not an object</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tresult<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> obj2<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Assign non-object properties</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"-2\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/reduce/deep-merge/\">#</a></h2>\n<p>deep merge에 대해 알아보았습니다.</p>\n<p>두 객체를 합칠 때, 서로 다른 키임에도 불구하고 merge로 인해\n데이터가 손실되는 것을 막을 수 있습니다.</p>\n",
			"date_published": "2023-12-10T12:13:26Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/algos/convert/decimal-to-binary/",
			"url": "https://zerozoo-a.github.io/blog/algos/convert/decimal-to-binary/",
			"title": "10진수를 2진수로 변환하기",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"10-2\" tabindex=\"-1\">10진수를 2진수로 변환하기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/convert/decimal-to-binary/\">#</a></h1>\n<h2 id=\"js\" tabindex=\"-1\">js의 방법 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/algos/convert/decimal-to-binary/\">#</a></h2>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> dec <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bin <span class=\"token operator\">=</span> dec<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1010;</span></code></pre>\n<p>위와 같은 방법을 사용하는게 좋습니다.</p>\n<p>아래는 직접구현하는 방법입니다.\nLinked List인 js array로 구현 할 수 있지만</p>\n<p>아래는 일반 string으로 구현하는 방법입니다.\n방식은 string으로 stack을 쌓는 것과 동일합니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {number} n decimal\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">decToBin</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2로 나눈 나머지와 그동안 구한 값을 붙입니다.</span>\n      n <span class=\"token operator\">=</span> <span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// n을 2로 나눈 값을 다시 n에 초기화</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n",
			"date_published": "2023-12-05T22:59:59Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Super-key/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Super-key/",
			"title": "Database에서 Super Key에 대해",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"super-key\" tabindex=\"-1\">Super Key란? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Super-key/\">#</a></h1>\n<p>Super Key는 테이블의 각 행(레코드)을 고유하게 식별 할 수 있는 하나 이상의 속성(열, attribute)의 조합입니다.\n테이블에서 각 행을 유일하게 식별하는 데 필요한 모든 정보를 포함합니다.</p>\n<h2 id=\"\" tabindex=\"-1\">특징 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Super-key/\">#</a></h2>\n<ol>\n<li>unique(유일성): Super Key는 모든 행을 유일하게 식별 할 수 있기 때문에 unique합니다.</li>\n<li>redundancy(과잉성): Super Key는 필요 이상의 속성을 포함할 수 있기 때문에 최소성을 만족하지 않을 수 있습니다.</li>\n</ol>\n<h3 id=\"-1\" tabindex=\"-1\">유일성의 예 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Super-key/\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>학생 ID</th>\n<th>이름</th>\n<th>연락처</th>\n<th>주소</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>001</td>\n<td>김영희</td>\n<td>010-1234-5678</td>\n<td>서울시 강남구</td>\n</tr>\n</tbody>\n</table>\n<p>위 테이블에서\n학생 ID는 Super Key이자 Primary key입니다. 이는 유일성을 가지는 key입니다.</p>\n<h3 id=\"-2\" tabindex=\"-1\">과잉성의 예 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Super-key/\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>학생 ID</th>\n<th>이름</th>\n<th>연락처</th>\n<th>주소</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>001</td>\n<td>김영희</td>\n<td>010-1234-5678</td>\n<td>서울시 강남구</td>\n</tr>\n<tr>\n<td>002</td>\n<td>이철수</td>\n<td>010-2345-6789</td>\n<td>부산시 해운대구</td>\n</tr>\n<tr>\n<td>003</td>\n<td>박지민</td>\n<td>010-3456-7890</td>\n<td>대구시 중구</td>\n</tr>\n</tbody>\n</table>\n<p>위 테이블에서 과잉성의 예를 위해\n학생 ID, 이름, 연락처, 주소를 Super Key로 잡아보겠습니다.</p>\n<p>(당연하게도 학생 ID만으로 각 튜플을 조회 가능합니다.)</p>\n<pre class=\"language-sql\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Students\n<span class=\"token keyword\">WHERE</span> StudentID <span class=\"token operator\">=</span> <span class=\"token string\">'001'</span> <span class=\"token operator\">AND</span> Name <span class=\"token operator\">=</span> <span class=\"token string\">'김영희'</span> <span class=\"token operator\">AND</span> Contact <span class=\"token operator\">=</span> <span class=\"token string\">'010-1234-5678'</span> <span class=\"token operator\">AND</span> Address <span class=\"token operator\">=</span> <span class=\"token string\">'서울시 강남구'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이렇게 분별을 위해 과잉하게 key를 잡는 것을 의미합니다.</p>\n<h2 id=\"-3\" tabindex=\"-1\">다른 키와의 관계 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Super-key/\">#</a></h2>\n<ul>\n<li>\n<p>Candidate Key: Super Key에서 불필요한 속성을 제거, 최소성을 만족하는 key를 Candidate key라고 합니다.\n테이블을 유일하게 식별할 수 있는 가장 작은 속성의 집합입니다.</p>\n<ul>\n<li>그냥 key라고도 합니다.</li>\n</ul>\n</li>\n<li>\n<p>Primary Key: Candidate Key에서 선택된 주 Key입니다. 각 행을 고유하게 식별하는데 사용됩니다.</p>\n</li>\n</ul>\n<p>key들의 관계를 정리하면 아래와 같습니다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>P</mi><mi>r</mi><mi>i</mi><mi>m</mi><mi>a</mi><mi>r</mi><mi>y</mi><mi>K</mi><mi>e</mi><mi>y</mi><mi>s</mi><mo>⊆</mo><mi>C</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>d</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>K</mi><mi>e</mi><mi>y</mi><mi>s</mi><mo>⊆</mo><mi>S</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>K</mi><mi>e</mi><mi>y</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">Primary Keys ⊆ Candidate Keys ⊆ Super Keys\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\">s</span></span></span></span></span></p>\n<h2 id=\"-4\" tabindex=\"-1\">결론 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Super-key/\">#</a></h2>\n<ul>\n<li>Primary keys는 Candidate keys의 부분집합이다.</li>\n<li>Candidate keys는 Super Keys의 부분집합이다.</li>\n</ul>\n",
			"date_published": "2023-12-02T12:29:17Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Relational-database-atomicity/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Relational-database-atomicity/",
			"title": "데이터베이스 필드의 값이 원자적이여야 하는 이유",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">정규화의 원자성 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Relational-database-atomicity/\">#</a></h1>\n<p>정규화의 1NF에서 DB의 속성값은 원자성을 가져야 한다는 말이 나옵니다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">원자성이란 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Relational-database-atomicity/\">#</a></h2>\n<p>원자성은 테이블의 속성값이 원자적이여야 한다는 말입니다.</p>\n<p>이는 테이블을 보면 바로 이해 할 수 있습니다.</p>\n<h4 id=\"-2\" tabindex=\"-1\">원자성을 지키지 않는 테이블 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Relational-database-atomicity/\">#</a></h4>\n<table>\n<thead>\n<tr>\n<th>이름</th>\n<th>등록번호</th>\n<th>주소</th>\n<th>성별</th>\n<th>나이</th>\n<th>연락처</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>김민수</td>\n<td>900101-1******</td>\n<td>서울시 강남구</td>\n<td>남</td>\n<td>30</td>\n<td>010-1234-5678, 02-1234-5678</td>\n</tr>\n</tbody>\n</table>\n<p>주민 테이블이 있고 테이블에는 연락처 속성이 있습니다.\n테이블의 연락처에는 김민수씨의 휴대전화 번호와 집 전화번호가 함께 들어있습니다.</p>\n<p>이는 원자성을 지키지 않은 테이블입니다.</p>\n<hr>\n<h4 id=\"-3\" tabindex=\"-1\">원자성을 지키는 테이블 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Relational-database-atomicity/\">#</a></h4>\n<table>\n<thead>\n<tr>\n<th>이름</th>\n<th>등록번호</th>\n<th>주소</th>\n<th>성별</th>\n<th>나이</th>\n<th>휴대전화</th>\n<th>집전화</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>김민수</td>\n<td>900101-1******</td>\n<td>서울시 강남구</td>\n<td>남</td>\n<td>30</td>\n<td>010-1234-5678</td>\n<td>02-1234-5678</td>\n</tr>\n</tbody>\n</table>\n<p>연락처 속성을 나누어 휴대전화, 집전화로 분리했습니다.</p>\n<p>이제 각 필드는 고유하며 원자성을 가집니다.</p>\n",
			"date_published": "2023-12-02T11:44:34Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Transitive-Dependency/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Transitive-Dependency/",
			"title": "관계형 데이터베이스 - 정규화 - 이행적 종속성",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">이행적 종속성에 대해 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Transitive-Dependency/\">#</a></h1>\n<p>테이블 내의 비주요 속성이 다른 비주요 속성에 대해\n함수적으로 종속되지 않아야 합니다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">예시 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Transitive-Dependency/\">#</a></h2>\n<p>아래와 같은 학생 테이블이 있다고 하겠습니다.</p>\n<h3 id=\"students\" tabindex=\"-1\">학생 테이블 (Students) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Transitive-Dependency/\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>학생 ID</th>\n<th>학생 이름</th>\n<th>학과 ID</th>\n<th>학과 위치</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1001</td>\n<td>홍길동</td>\n<td>D01</td>\n<td>A123</td>\n</tr>\n<tr>\n<td>1002</td>\n<td>김철수</td>\n<td>D02</td>\n<td>B221</td>\n</tr>\n<tr>\n<td>1003</td>\n<td>이영희</td>\n<td>D01</td>\n<td>C231</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>학생 ID는 PK로 주요 속성입니다.</li>\n<li>나머지는 모두 비주요 속성입니다.</li>\n</ul>\n<p>함수적 종속성 관계를 확인해보겠습니다.</p>\n<ul>\n<li>학생 ID -&gt; 학생 이름: 학생 ID는 각 학생에 대해 고유한 식별자입니다. 학생 이름을 결정합니다. (학생 ID로 학생 이름을 찾을 수 있음)</li>\n<li>학생 ID -&gt; 학과 ID: 학생은 특정 학과에 소속되어 있으므로 학생 ID를 통해 학과 ID를 알 수 있습니다.</li>\n<li>학생 ID -&gt; 학과 이름, 학과 위치: 학과 ID와 같은 이유로 학생 ID를 통해 학과의 이름과 위치를 알 수 있습니다.</li>\n</ul>\n<p>학과 이름과 학과 위치는 학생ID에 이행적으로 종속됩니다. (Transitive dependency)</p>\n<p>학생ID -&gt; 학과ID -&gt; 학과 이름, 학과 위치의 관계가 있습니다.</p>\n<p>학생 ID를 알면 학과 ID를 알 수 있고 학과 ID를 알면 학과 위치를 알 수 있습니다.</p>\n<p>결과적으로 학생 ID는 학과 ID에 종속된다고 볼 수 있습니다.</p>\n<p>이를 정리하면</p>\n<p>A -&gt; B,\nB -&gt; C 일 때</p>\n<p>A -&gt; C임을 알 수 있습니다.</p>\n",
			"date_published": "2023-11-30T23:59:00Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Functional-Dependent-attribute/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Functional-Dependent-attribute/",
			"title": "관계형 데이터베이스 - 정규화 - FD: 함수적 종속성",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">함수적 종속성에대해 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Functional-Dependent-attribute/\">#</a></h1>\n<p>함수적 종속성은 테이블의 속성에서 한 속성이 다른 속성에 의해 값이 결정되는 관계를 뜻합니다.</p>\n<p>하나의 속성이 다른 속성에 의존하는 경우 이 경우를 함수적 종속성이라 합니다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">예시 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Functional-Dependent-attribute/\">#</a></h2>\n<p>학생 정보를 테이블이 있다고 합시다.</p>\n<p>속성으로는 학생 ID, 이름, 주소와 같은 속성이 있을 수 있습니다.\n학생 ID는 학생마다 고유한 값을 가집니다.</p>\n<p>학생 이름은 학생 ID에 종속됩니다.</p>\n<p>표현은 아래와 같이합니다.</p>\n<pre><code>학생 ID -&gt; 학생 이름\n</code></pre>\n",
			"date_published": "2023-11-30T23:37:41Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Data-modeling-normalization/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Data-modeling-normalization/",
			"title": "데이터 모델링 및 설계 - 정규화 1 ~ BCNF",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">데이터 모델링에서 정규화에 대해 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Data-modeling-normalization/\">#</a></h1>\n<p>DB 정규화는 데이터를 구조화하여 중복을 최소화하고\n데이터 조작시 발생할 수 있는 오류와 데이터 중복을 방지합니다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">정규화의 의미 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Data-modeling-normalization/\">#</a></h2>\n<pre class=\"language-md\" tabindex=\"0\"><code class=\"language-md\">정규화는 데이터의 중복과 \n삽입(insertion), 삭제(deletion), 갱신(update)의 \n이상현상(anomaly)을 방지(최소화)하기 위해\nnormal form을 수행하는 것을 말합니다.</code></pre>\n<h3 id=\"-2\" tabindex=\"-1\">정규화의 단계 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Data-modeling-normalization/\">#</a></h3>\n<ul>\n<li>\n<p>정규화는 1NF, 2NF, 3NF, BCNF, 4NF, 5NF, 6NF 단계를 거칩니다.</p>\n</li>\n<li>\n<p>NF 단계는 테이블이 달성한 정규화 수준을 나타내는 척도입니다.</p>\n</li>\n<li>\n<p>NF는 테이블이 생성된 후 다음 NF를 순서대로 만족해야 합니다.\n예를 들어 1NF에서 3NF로 바로 건너 뛸 수 없으며 3NF는 2NF를 만족해야 한다는 속성을 가집니다.</p>\n</li>\n</ul>\n<h3 id=\"-3\" tabindex=\"-1\">정규화의 특징 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Data-modeling-normalization/\">#</a></h3>\n<ul>\n<li>NF는 normal form을 의미합니다.</li>\n<li>특정 테이블이 정규화 되었다라고 하기 위해선 <strong>최소 3NF는 만족</strong>해야 합니다.</li>\n<li>실무에선 3NF | BCNF까지만 진행하는 경우가 많습니다.</li>\n<li>1NF 부터 BCNF까지는 <a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Functional-Dependent-attribute/\">FD = 함수적 종속성</a>와 key만으로 정의되는 NF입니다.</li>\n</ul>\n<h2 id=\"-4\" tabindex=\"-1\">단계별 정규화 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Data-modeling-normalization/\">#</a></h2>\n<h3 id=\"1\" tabindex=\"-1\">제 1 정규형 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Data-modeling-normalization/\">#</a></h3>\n<ol>\n<li>모든 필드의 값이 <a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Relational-database-atomicity/\">원자적</a>이어야 합니다.</li>\n<li>각 레코드가 유일해야 합니다.</li>\n<li>테이블의 모든 컬럼은 중복되지 않고 단일 값을 가져야 합니다.</li>\n</ol>\n<h3 id=\"2\" tabindex=\"-1\">제 2 정규형 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Data-modeling-normalization/\">#</a></h3>\n<ol>\n<li>1 NF를 만족합니다.</li>\n<li>모든 비주요 속성이 완전 함수적 종속을 이루어야 합니다.</li>\n</ol>\n<ul>\n<li>비주요 속성: 테이블의 기본키가 아닌 다른 모든 속성을 뜻합니다.</li>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Functional-Dependent-attribute/\">함수적 종속성</a>: 하나의 속성이 다른 속성에 의해 결정되는 관계를 뜻합니다.</li>\n</ul>\n<ol start=\"3\">\n<li>모든 비주요 속성이 기본키(PK)에만 의존합니다.</li>\n</ol>\n<h3 id=\"3\" tabindex=\"-1\">제 3 정규형 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Data-modeling-normalization/\">#</a></h3>\n<ol>\n<li>2 NF를 만족합니다.</li>\n<li>모든 비주요 속성이 <a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Transitive-Dependency/\">이행적 종속성</a>을 갖지 않아야 합니다. (Transitive-Dependency)</li>\n<li>비주요 속성이 다른 비주요 속성을 의존하지 않아야 합니다.</li>\n</ol>\n<h3 id=\"bcnf\" tabindex=\"-1\">BCNF 정규형 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Data-modeling-normalization/\">#</a></h3>\n<p>BCNF는 보이스-코드 정규형(Boyce-Codd Normal Form) 입니다.</p>\n<ol>\n<li>3NF를 보다 엄격하게 적용합니다.</li>\n</ol>\n<ul>\n<li>3NF의 모든 조건을 만족하면서 추가로 모든 결정자가 후보키의 일부여야 한다는 조건을 추가합니다.\n<ul>\n<li>결정자는 한 속성의 값이 다른 하나 이상의 속성의 값을 결정하는 경우, 그 속성은 결정자입니다.</li>\n<li>주민등록 테이블에서 주민번호는 주민의 이름, 주소등을 결정할 수 있는 결정자입니다.</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>모든 결정자가 후보키: BCNF에서는 테이블 내의 모든 결정자(어떤 속성이 다른 속성을 함수적으로 결정하는 속성)가 후보키의 일부여야 합니다.\n이는 3NF에서 허용되는 비후보키 결정자에 의한 함수적 종속성을 허용하지 않는다는 것을 의미합니다.</li>\n</ol>\n<h4 id=\"bcnf-1\" tabindex=\"-1\">BCNF를 만족하는 예시 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Data-modeling-normalization/\">#</a></h4>\n<p>BCNF를 만족하기 위해서는 테이블의 모든 <strong>결정자</strong>가 **후보키 (Candidate Key)**여야 합니다.</p>\n<ul>\n<li>이는 결정자가 아니면 후보키가 아니여도 됩니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>학생 ID</th>\n<th>학생 이름</th>\n<th>학과 ID</th>\n<th>학과 이름</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>001</td>\n<td>김영희</td>\n<td>CS</td>\n<td>컴퓨터 과학</td>\n</tr>\n<tr>\n<td>002</td>\n<td>이철수</td>\n<td>ME</td>\n<td>기계 공학</td>\n</tr>\n<tr>\n<td>003</td>\n<td>박지민</td>\n<td>EE</td>\n<td>전기 공학</td>\n</tr>\n</tbody>\n</table>\n<p>위 예시로 결정자와 종속 속성을 분류해보겠습니다.</p>\n<ul>\n<li>학생 ID는 결정자이며 후보키입니다.\n<ul>\n<li>학생 ID에 의해 결정되는 종속 속성은 학생 이름입니다.</li>\n</ul>\n</li>\n<li>학과 ID는 결정자이며 후보키입니다.\n<ul>\n<li>학과 ID에 의해 결정되는 종속 속성은 학과 이름입니다.</li>\n</ul>\n</li>\n</ul>\n<p>위 테이블은 BCNF를 만족합니다. 즉 3 정규화 이상이라는 것이네요</p>\n",
			"date_published": "2023-11-30T23:00:49Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Relational-algebra-in-DBMS/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Relational-algebra-in-DBMS/",
			"title": "관계 데이터베이스 모델 순수 관계 연산자",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">순수 관계 연산자란? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Relational-algebra-in-DBMS/\">#</a></h1>\n<p>RDB에서 데이터를 조작하고 쿼리하는데 사용되는 연산자를 의미합니다.</p>\n<p>주요 순수 관계 연산자 6 가지를 알아보겠습니다.</p>\n<ol>\n<li>선택 연산자: σ (Sigma)</li>\n</ol>\n<ul>\n<li>조건에 맞는 튜플(레코드)을 선택합니다.\n<ul>\n<li>&quot;남자에 안경을 쓴 사람&quot;의 조건을 만족하는 튜플을 선택할 때 사용됩니다.</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>프로젝션 연산자: π (Pi)</li>\n</ol>\n<ul>\n<li>하나 이상의 속성을 선택해 새로운 릴레이션(테이블)을 생성합니다.\n<ul>\n<li>&quot;이름과 부서ID만을 선택&quot;할 때 사용됩니다.</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>교집합 연산자: ∩ (Cap)</li>\n</ol>\n<ul>\n<li>두 개의 릴레이션 간 공통된 튜플을 찾아 반환합니다.\n<ul>\n<li>MYSQL 기준 INNER JOIN 연산자</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>합집합 연산자: ∪ (Cup)</li>\n</ol>\n<ul>\n<li>두 개의 릴레이션을 합쳐서 중복을 제거하고 모든 튜플을 반환합니다.\n<ul>\n<li>MYSQL 기준 UNION 연산자</li>\n<li>합집합 연산자를 사용 할 때 각 SELECT 문의 열 수 와 데이터 유형이 동일해야 합니다.</li>\n</ul>\n</li>\n</ul>\n<ol start=\"5\">\n<li>차집합 연산자: - (Minus)</li>\n</ol>\n<ul>\n<li>첫 번째 릴레이션에서 두 번째 릴레이션의 튜플을 제외한 결과를 반환합니다.</li>\n</ul>\n<ol start=\"6\">\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/relational-model/\">카티션 곱: x (Cross)</a></li>\n</ol>\n<ul>\n<li>카티션 곱 = 카티션 프로덕트 = Cartesian Product</li>\n<li>두 개의 릴레이션을 모든 가능한 조합으로 조합해 새 릴레이션을 생성합니다.</li>\n</ul>\n<h2 id=\"s-sigma\" tabindex=\"-1\">선택 연산자: σ (Sigma) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Relational-algebra-in-DBMS/\">#</a></h2>\n<p>선택 연산자는 <strong>WHERE</strong>절에 속합니다.\n조건에 맞는 튜플을 선택하기 위해선 WHERE절을 사용하는데 바로 이 것이 선택 연산자\n<strong>σ (Sigma)입니다.</strong></p>\n<pre class=\"language-sql\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">FROM</span> TABLE1\n<span class=\"token keyword\">WHERE</span> age <span class=\"token operator\">></span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"p-pi\" tabindex=\"-1\">프로젝션 연산자: π (Pi) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Relational-algebra-in-DBMS/\">#</a></h2>\n<p>프로젝션 연산자는 SQL에서 &quot;선택&quot;을 한다고 했습니다.\n특정 column을 선택하고 다른 column을 무시하므로 <strong>SELECT</strong>연산자에 해당합니다.</p>\n<pre class=\"language-sql\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> 이름\n<span class=\"token keyword\">FROM</span> TABLE1\n<span class=\"token keyword\">WHERE</span> age <span class=\"token operator\">></span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"cap\" tabindex=\"-1\">교집합 연산자: ∩ (Cap) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Relational-algebra-in-DBMS/\">#</a></h2>\n<p>교집합 연산자는 INNER JOIN을 통해 교집합을 얻을 수 있습니다.\n조인의 조건에 따라 공통된 값을 가진 행만을 반환합니다.</p>\n<ul>\n<li>INNER JOIN은 MYSQL에서 INNER를 생략하고 JOIN으로 사용 할 수 있습니다.</li>\n</ul>\n<h4 id=\"1\" tabindex=\"-1\">테이블 1: 직원 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Relational-algebra-in-DBMS/\">#</a></h4>\n<table>\n<thead>\n<tr>\n<th>직원ID</th>\n<th>이름</th>\n<th>부서ID</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>홍길동</td>\n<td>101</td>\n</tr>\n<tr>\n<td>2</td>\n<td>이순신</td>\n<td>102</td>\n</tr>\n<tr>\n<td>3</td>\n<td>강감찬</td>\n<td>103</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"2\" tabindex=\"-1\">테이블 2: 부서 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Relational-algebra-in-DBMS/\">#</a></h4>\n<table>\n<thead>\n<tr>\n<th>부서ID</th>\n<th>부서명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>101</td>\n<td>개발</td>\n</tr>\n<tr>\n<td>102</td>\n<td>마케팅</td>\n</tr>\n<tr>\n<td>104</td>\n<td>인사</td>\n</tr>\n</tbody>\n</table>\n<p>위 두 테이블을 부서ID로 INNER JOIN 해보겠습니다.</p>\n<pre class=\"language-sql\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">FROM</span> 직원\n<span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> 부서\n<span class=\"token keyword\">ON</span> 직원<span class=\"token punctuation\">.</span>부서ID <span class=\"token operator\">=</span> 부서<span class=\"token punctuation\">.</span>부서ID</code></pre>\n<h4 id=\"-1\" tabindex=\"-1\">결과 테이블 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Relational-algebra-in-DBMS/\">#</a></h4>\n<table>\n<thead>\n<tr>\n<th>직원ID</th>\n<th>이름</th>\n<th>부서ID</th>\n<th>부서명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>홍길동</td>\n<td>101</td>\n<td>개발</td>\n</tr>\n<tr>\n<td>2</td>\n<td>이순신</td>\n<td>102</td>\n<td>마케팅</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"cup\" tabindex=\"-1\">합집합 연산자: ∪ (Cup) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Relational-algebra-in-DBMS/\">#</a></h2>\n<p>합집합 연산자는 UNION 연산자로 표현 할 수 있습니다.\n합집합은 집합 연산의 합집합의 그것과 같습니다.</p>\n<p>테이블 두 개를 합집합 연산을 해보겠습니다.</p>\n<p><strong>직원 테이블 (employees):</strong></p>\n<table>\n<thead>\n<tr>\n<th>직원ID</th>\n<th>이름</th>\n<th>직급</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>홍길동</td>\n<td>관리자</td>\n</tr>\n<tr>\n<td>2</td>\n<td>이순신</td>\n<td>직원</td>\n</tr>\n<tr>\n<td>3</td>\n<td>강감찬</td>\n<td>직원</td>\n</tr>\n</tbody>\n</table>\n<p><strong>계약직 테이블 (contractors):</strong></p>\n<table>\n<thead>\n<tr>\n<th>계약직ID</th>\n<th>이름</th>\n<th>직급</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>101</td>\n<td>박재영</td>\n<td>계약직</td>\n</tr>\n<tr>\n<td>102</td>\n<td>김민정</td>\n<td>계약직</td>\n</tr>\n<tr>\n<td>103</td>\n<td>정성훈</td>\n<td>계약직</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"language-sql\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> 직원ID<span class=\"token punctuation\">,</span> 이름<span class=\"token punctuation\">,</span> 직급\n<span class=\"token keyword\">FROM</span> employees\n<span class=\"token keyword\">UNION</span>\n<span class=\"token keyword\">SELECT</span> 계약직ID<span class=\"token punctuation\">,</span> 이름<span class=\"token punctuation\">,</span> 직급\n<span class=\"token keyword\">FROM</span> contractors<span class=\"token punctuation\">;</span></code></pre>\n<table>\n<thead>\n<tr>\n<th>직원ID</th>\n<th>이름</th>\n<th>직급</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>홍길동</td>\n<td>관리자</td>\n</tr>\n<tr>\n<td>2</td>\n<td>이순신</td>\n<td>직원</td>\n</tr>\n<tr>\n<td>3</td>\n<td>강감찬</td>\n<td>직원</td>\n</tr>\n<tr>\n<td>101</td>\n<td>박재영</td>\n<td>계약직</td>\n</tr>\n<tr>\n<td>102</td>\n<td>김민정</td>\n<td>계약직</td>\n</tr>\n<tr>\n<td>103</td>\n<td>정성훈</td>\n<td>계약직</td>\n</tr>\n</tbody>\n</table>\n<p>이렇게 두 테이블의 데이터가 하나의 결과로 합쳐졌습니다.</p>\n<h2 id=\"minus\" tabindex=\"-1\">차집합 연산자: - (Minus) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Relational-algebra-in-DBMS/\">#</a></h2>\n<p>차집합 연산자는 두 결과집합에서 첫 번째 집합에만 있는\n항목을 선택하는 연산으로 데이터베이스에서 두 테이블의 데이터를 비교,\n두 번째 테이블에는 없고 첫 번째 테이블에만 잇는 행을 가져옵니다.</p>\n<p>직원 테이블과 이직한 직원 테이블이 있을 때,\n직원 테이블에서 이직한 직원 테이블의 차집합을 구해보겠습니다.</p>\n<p><strong>직원 테이블 (employees):</strong></p>\n<table>\n<thead>\n<tr>\n<th>직원ID</th>\n<th>이름</th>\n<th>부서</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>홍길동</td>\n<td>개발</td>\n</tr>\n<tr>\n<td>2</td>\n<td>이순신</td>\n<td>마케팅</td>\n</tr>\n<tr>\n<td>3</td>\n<td>강감찬</td>\n<td>영업</td>\n</tr>\n<tr>\n<td>4</td>\n<td>김철수</td>\n<td>개발</td>\n</tr>\n<tr>\n<td>5</td>\n<td>박지영</td>\n<td>인사</td>\n</tr>\n</tbody>\n</table>\n<p><strong>이직한_직원 테이블 (former_employees):</strong></p>\n<table>\n<thead>\n<tr>\n<th>직원ID</th>\n<th>이름</th>\n<th>부서</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td>이순신</td>\n<td>마케팅</td>\n</tr>\n<tr>\n<td>5</td>\n<td>박지영</td>\n<td>인사</td>\n</tr>\n<tr>\n<td>6</td>\n<td>정미영</td>\n<td>영업</td>\n</tr>\n</tbody>\n</table>\n<p>쿼리는 아래와 같이 선택 할 테이블을 앞에\n빼줄 테이블을 <strong>MINUS</strong> 연산자 뒤에 둡니다.</p>\n<pre class=\"language-sql\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> 직원ID<span class=\"token punctuation\">,</span> 이름<span class=\"token punctuation\">,</span> 부서\n<span class=\"token keyword\">FROM</span> employees\nMINUS\n<span class=\"token keyword\">SELECT</span> 직원ID<span class=\"token punctuation\">,</span> 이름<span class=\"token punctuation\">,</span> 부서\n<span class=\"token keyword\">FROM</span> former_employees<span class=\"token punctuation\">;</span></code></pre>\n<p>결과는 다음과 같습니다</p>\n<table>\n<thead>\n<tr>\n<th>직원ID</th>\n<th>이름</th>\n<th>부서</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>홍길동</td>\n<td>개발</td>\n</tr>\n<tr>\n<td>3</td>\n<td>강감찬</td>\n<td>영업</td>\n</tr>\n<tr>\n<td>4</td>\n<td>김철수</td>\n<td>개발</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"x-cartesian-product\" tabindex=\"-1\">카티션 프로덕트 : x (Cartesian Product) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Relational-algebra-in-DBMS/\">#</a></h2>\n<p><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/relational-model/\">카티션 곱: x (Cross)</a>에 대한 설명은 해당 링크로 대체합니다.</p>\n<h2 id=\"-2\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Relational-algebra-in-DBMS/\">#</a></h2>\n<p>DBMS에서 사용되는 순수 관계 연산자를 알아봤습니다.</p>\n<p>Relational algebra로 수학에서 사용되는 집합간 연산의 그 것을\nRDB로 사용하는 느낌으로 바라보면 될 것 같습니다.</p>\n",
			"date_published": "2023-11-29T22:04:06Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Self-join/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Self-join/",
			"title": "SQL Join의 Self Join에 대해",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"joins\" tabindex=\"-1\">논리적 joins <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Self-join/\">#</a></h2>\n<p>논리적 join은 크게 아래의 네 가지로 나뉘어집니다.\n오늘은 이 중에서 Cross Join에 대해 알아보겠습니다.</p>\n<ol>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Inner-join/\">Inner Join</a></li>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Outer-join/\">Outer ️Join</a></li>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Cross-join/\">Cross Join </a></li>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Self-join/\">Self Join ⭐</a></li>\n</ol>\n<h1 id=\"self-join\" tabindex=\"-1\">Self Join이란 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Self-join/\">#</a></h1>\n<p>Self Join은 단일 테이블을 자기 자신과 조인하는 것을 의미합니다.</p>\n<ul>\n<li>조인은 Binary Operation입니다. 즉 피연산자가 둘이 필요합니다.</li>\n<li>Inner, Outer, Cross는 모두 각각 서로 다른 테이블을 두 개 사용해 하나의 조인된 결과를 만들었습니다.</li>\n<li>Self Join은 테이블 하나로 조인합니다.</li>\n</ul>\n<h2 id=\"\" tabindex=\"-1\">테이블 하나로 조인하는 방법 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Self-join/\">#</a></h2>\n<p>하나의 테이블로 자기 자신과 조인하는 방법은</p>\n<p>하나의 테이블에 별칭을 붙여 두 번 참조하는 것으로 Binary Operation인 join을 수행합니다.</p>\n<h3 id=\"-1\" tabindex=\"-1\">예시 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Self-join/\">#</a></h3>\n<p>아래와 같은 직원 테이블이 있습니다.</p>\n<h4 id=\"-2\" tabindex=\"-1\">직원 테이블 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Self-join/\">#</a></h4>\n<table>\n<thead>\n<tr>\n<th>직원ID</th>\n<th>이름</th>\n<th>상사ID</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>노튼 소장</td>\n<td>NULL</td>\n</tr>\n<tr>\n<td>2</td>\n<td>캡틴 해들리</td>\n<td>1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>레드 레딩</td>\n<td>1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>앤디</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p>상사ID와 직원ID는 서로 관련된 행입니다.\n직원은 상사ID를 속성으로 가지며 상사는 직원ID를 속성으로 갖습니다.\n튜플의 상사ID가 NULL인 경우 상사가 없는 것을 의미합니다.</p>\n<h4 id=\"sql-self-join\" tabindex=\"-1\">SQL 쿼리 (Self Join) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Self-join/\">#</a></h4>\n<pre class=\"language-sql\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> A<span class=\"token punctuation\">.</span>이름 <span class=\"token keyword\">AS</span> 직원<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">.</span>이름 <span class=\"token keyword\">AS</span> 상사\n<span class=\"token keyword\">FROM</span> 직원 A <span class=\"token comment\"># Alias 직원 테이블 = A</span>\n<span class=\"token keyword\">JOIN</span> 직원 B <span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span>상사ID <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span>직원ID<span class=\"token punctuation\">;</span> <span class=\"token comment\"># Alias 직원 테이블 = B</span></code></pre>\n<p>위 쿼리를 통해 하나의 테이블로 조인을 할 수 있습니다.</p>\n<h4 id=\"-3\" tabindex=\"-1\">결과 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Self-join/\">#</a></h4>\n<table>\n<thead>\n<tr>\n<th>직원</th>\n<th>상사</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>캡틴 해들리</td>\n<td>노튼 소장</td>\n</tr>\n<tr>\n<td>레드 레딩</td>\n<td>노튼 소장</td>\n</tr>\n<tr>\n<td>앤디</td>\n<td>캡틴 해들리</td>\n</tr>\n</tbody>\n</table>\n<p>직원 테이블을 A, B로 한 쿼리에서 두 번 참조함으로써\njoin의 테이블 두 개 참조 조건을 달성했습니다.</p>\n<h2 id=\"-4\" tabindex=\"-1\">사용례 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Self-join/\">#</a></h2>\n<p>같은 테이블을 두 번 참조하는 self join은 아래와 같은 용도로 사용됩니다.</p>\n<ul>\n<li>\n<p>위의 예와 같이 테이블 내에서의 연관 관계를 확인하는 용도,\n혹은 데이터 분석등을 위해 사용합니다.</p>\n</li>\n<li>\n<p>동일한 테이블 내의 행들을 서로 비교할 때 사용합니다.\n같은 테이블 내 다른 행들의 데이터 값을 비교해 차이점을 찾을 수 있습니다.</p>\n</li>\n</ul>\n<h2 id=\"alias\" tabindex=\"-1\">Alias 별칭 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Self-join/\">#</a></h2>\n<p>아래 쿼리에서 별칭을 부여하는 방식에 대해 알아보겠습니다.</p>\n<pre class=\"language-sql\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> A<span class=\"token punctuation\">.</span>이름 <span class=\"token keyword\">AS</span> 직원<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">.</span>이름 <span class=\"token keyword\">AS</span> 상사\n<span class=\"token keyword\">FROM</span> 직원 A\n<span class=\"token keyword\">JOIN</span> 직원 B <span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span>상사ID <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span>직원ID<span class=\"token punctuation\">;</span></code></pre>\n<p>직원이라는 하나의 테이블에서 A, B로 별칭을 붙여주었는데요</p>\n<p>별칭이 붙은 포인트를 짚어보겠습니다.</p>\n<pre class=\"language-sql\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">FROM</span> <span class=\"token operator\">&lt;</span>테이블명<span class=\"token operator\">></span> A\n<span class=\"token keyword\">JOIN</span> <span class=\"token operator\">&lt;</span>테이블명<span class=\"token operator\">></span> B <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre>\n<p>별칭을 붙일 테이블의 이름을 FROM과 JOIN 뒤에 붙이고\n별칭을 붙여줍니다.</p>\n<p>이 외에도 AS 등의 키워드로 참조를 하는 등의 방법이 있습니다.</p>\n<h2 id=\"-5\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Self-join/\">#</a></h2>\n<ul>\n<li>self join은 하나의 테이블을 별칭을 통해 두 개의 테이블인 것 처럼\njoin하는 것입니다.</li>\n<li>다른 테이블과 조인하지 않아 쿼리는 간소화됩니다.</li>\n<li>여러 테이블에 데이터를 중복 저장하지 않습니다. (왜나면 이미 하나거든요!)</li>\n<li>동일한 테이블 내에서 행들을 서로 비교하는 경우 유용합니다.</li>\n</ul>\n",
			"date_published": "2023-11-27T21:45:56Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/relational-model/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/relational-model/",
			"title": "Relational model",
			"content_html": "<br>\n<br>\n<br>\n<h3 id=\"logical-models\" tabindex=\"-1\">Logical models <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/relational-model/\">#</a></h3>\n<ul>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Logical-Database-Design/\">논리 데이터베이스의 설계</a>\n<ol>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/relational-model\">Relational model: 관계 모델 ⭐️</a></li>\n</ol>\n</li>\n</ul>\n<h1 id=\"relational-model\" tabindex=\"-1\">Relational model <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/relational-model/\">#</a></h1>\n<ul>\n<li>\n<p>관계 모델은 논리 데이터베이스 설계시 가장 많이 사용되는 모델입니다.</p>\n</li>\n<li>\n<p>실세계 데이터를 행과 열로 구성된 테이블 형태로 구성한 데이터 모델입니다.</p>\n</li>\n</ul>\n<h2 id=\"\" tabindex=\"-1\">관계 데이터 모델의 구성 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/relational-model/\">#</a></h2>\n<ul>\n<li>\n<p>관계 데이터모델은 데이터를 테이블의 형태로 표현합니다.</p>\n</li>\n<li>\n<p>테이블은 논리 데이터베이스 -&gt; 관계 데이터베이스 모델에서 릴레이션이라고 표현합니다. (Relation)</p>\n</li>\n<li>\n<p>관계 데이터 모델은 데이터를 테이블(릴레이션)의 형태로 표현합니다. 각 테이블은 여러 행(튜플)과 열(속성)으로 구성됩니다.</p>\n</li>\n</ul>\n<h3 id=\"relation\" tabindex=\"-1\">Relation 예시 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/relational-model/\">#</a></h3>\n<h4 id=\"-1\" tabindex=\"-1\">속성(열) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/relational-model/\">#</a></h4>\n<ul>\n<li>회원ID: 회원의 고유 식별자</li>\n<li>이름: 회원의 이름</li>\n<li>주소: 회원의 주소</li>\n</ul>\n<h4 id=\"relation-1\" tabindex=\"-1\">Relation <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/relational-model/\">#</a></h4>\n<table>\n<thead>\n<tr>\n<th>회원ID</th>\n<th>이름</th>\n<th>주소</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>101</td>\n<td>김철수</td>\n<td>서울시 강남구</td>\n</tr>\n<tr>\n<td>102</td>\n<td>이영희</td>\n<td>서울시 서초구</td>\n</tr>\n<tr>\n<td>103</td>\n<td>박지민</td>\n<td>부산시 해운대구</td>\n</tr>\n</tbody>\n</table>\n<p>릴레이션은 아래 5가지로 나뉩니다.</p>\n<h4 id=\"-2\" tabindex=\"-1\">릴레이션을 이루는 것들 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/relational-model/\">#</a></h4>\n<ul>\n<li>\n<p>각 행은 Tuple (튜플),</p>\n<ul>\n<li>(101, 김철수, 서울시 강남구) = 튜플</li>\n</ul>\n</li>\n<li>\n<p>각 속성은 Attribute (속성),</p>\n<ul>\n<li>회원ID = 속성</li>\n</ul>\n</li>\n<li>\n<p>카디널리티</p>\n<ul>\n<li>\n<p>튜플의 수는 <a href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/cardinality-of-sets/\">카디널리티 = cardinality </a>라고 합니다.</p>\n<ul>\n<li>\n<p>카디널리티란</p>\n<ul>\n<li>집합론에서, 집합의 크기 또는 농도는 집합의 &quot;원소 개수&quot;에 대한 척도이다. 유한 집합의 크기의 표현은 자연수로 충분하다. 임의의 집합의 크기는 단사 함수 및 전단사 함수를 통해 비교할 수 있으며, 기수로서 대상화할 수도 있다</li>\n</ul>\n</li>\n<li>\n<p>관계 데이터베이스 모델에서 카디널리티는 위 집합론에서의 의미와 같습니다.</p>\n</li>\n</ul>\n<p>릴레이션의 튜플의 수를 모두 구하면 그 것이 카디널리티의 값이 됩니다.</p>\n<p>위의 예시로 카디널리티의 값은 3 입니다.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>스키마(Schema)는 릴레이션의 구조를 설명합니다.</p>\n<ul>\n<li>릴레이션의 이름을 정의합니다.</li>\n<li>릴레이션의 속성의 이름과 타입을 정의합니다.\n<ul>\n<li>(회원ID = Integer, 이름 = String, 주소 = String)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>인스턴스(Instance)는 릴레이션에 실제 저장된 값들을 인스턴스라고 합니다.</p>\n<ul>\n<li>클래스를 통해 실제 생성된 객체를 인스턴스라고도 합니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"-3\" tabindex=\"-1\">관계 대수의 개념 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/relational-model/\">#</a></h2>\n<p>테이블(relation)들을 수학적인 관점으로 본다면 집합이라고도 할 수 있습니다.</p>\n<p>집합 연산자를 그대로 관계 모델 논리 데이터베이스 설계에 사용 할 수 있습니다.</p>\n<h3 id=\"-4\" tabindex=\"-1\">종류 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/relational-model/\">#</a></h3>\n<ul>\n<li>합집합: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∪</mo></mrow><annotation encoding=\"application/x-tex\">\\cup</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.55556em;vertical-align:0em;\"></span><span class=\"mord\">∪</span></span></span></span></li>\n<li>교집합: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∩</mo></mrow><annotation encoding=\"application/x-tex\">\\cap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.55556em;vertical-align:0em;\"></span><span class=\"mord\">∩</span></span></span></span></li>\n<li>차집합: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mi>c</mi></msup></mrow><annotation encoding=\"application/x-tex\">A^c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span></span></span></span></span></span></span></span></li>\n<li>카티션 프로덕트</li>\n</ul>\n<p><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Cross-join/\">카티션 프로덕트는 SQL cross join</a>의 개념입니다.</p>\n<p>반대로 말하면 cross join은 카티션 프로덕트의 구현이라고 할 수 있습니다.</p>\n<h2 id=\"-5\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/relational-model/\">#</a></h2>\n<ul>\n<li>\n<p><strong>관계 모델 데이터베이스</strong>는 논리 모델에서 가장 많이 사용되는\n모델입니다.</p>\n</li>\n<li>\n<p>relation은 테이블의 개념입니다.</p>\n</li>\n<li>\n<p>tuple은 테이블의 row의 개념입니다.</p>\n</li>\n<li>\n<p>attribute는 테이블의 column의 개념입니다.</p>\n</li>\n<li>\n<p>instance는 relation에 저장된 데이터입니다.</p>\n</li>\n<li>\n<p>관계 대수로는 합집합(<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∪</mo></mrow><annotation encoding=\"application/x-tex\">\\cup</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.55556em;vertical-align:0em;\"></span><span class=\"mord\">∪</span></span></span></span>), 교집합(<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∩</mo></mrow><annotation encoding=\"application/x-tex\">\\cap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.55556em;vertical-align:0em;\"></span><span class=\"mord\">∩</span></span></span></span>), 차집합(<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mi>c</mi></msup></mrow><annotation encoding=\"application/x-tex\">A^c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span></span></span></span></span></span></span></span>), 카티션 프로덕트가 있습니다.</p>\n</li>\n</ul>\n",
			"date_published": "2023-11-26T20:18:21Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Logical-Database-Design/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Logical-Database-Design/",
			"title": "Logical Database Design",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">논리 데이터베이스의 설계 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Logical-Database-Design/\">#</a></h1>\n<p>논리 데이터베이스 설계란 데이터베이스를 구축하는 과정 중 하나로 실제 데이터 구조를 정의하고 모델링하는 단계를 의미합니다.</p>\n<p>논리 데이터베이스 설계가 끝나면 물리 설계 단계로 넘어갑니다.</p>\n<p>논리 데이터베이스 설계는 3 가지로 나뉘어집니다.</p>\n<ol>\n<li>개념 데이터베이스 설계</li>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Logical-Database-Design/\">논리 데이터베이스 설계</a>\n<ol>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/relational-model\">Relational model: 관계 모델 </a></li>\n</ol>\n</li>\n<li>물리 데이터베이스 설계</li>\n</ol>\n<p>그 중에서 논리와 물리 데이터베이스 설계에 대해 알아보겠습니다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">논리 데이터베이스 설계 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Logical-Database-Design/\">#</a></h2>\n<p>논리 데이터베이스 설계는 데이터베이스를 구성하는 테이블, 속성, 관계등의 구조를 정의합니다.\n<strong>데이터 모델</strong>을 사용해 데이터베이스의 논리적 구조를 설계합니다.</p>\n<h3 id=\"-2\" tabindex=\"-1\">데이터 모델 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Logical-Database-Design/\">#</a></h3>\n<p>논리 데이터베이스 설계시 사용하는 데이터 모델의 종류는 아래 4 가지로 나뉩니다.</p>\n<ol>\n<li>관계 모델\n<ul>\n<li>가장 많이 사용됨</li>\n<li>테이블의 형태로 구성되며, 각 테이블은 행(레코드)과 열(속성)로 이루어짐</li>\n<li>테이블간 관계는 기본 키, 외래 키를 사용해 정의됨</li>\n<li>SQL을 사용해 데이터를 조작, 관리함</li>\n</ul>\n</li>\n<li>계층적 모델\n<ul>\n<li>데이터를 트리 구조로 생성하여 계층적 모델을 이룸</li>\n<li>각 레벨의 데이터 항목은 상위 레벨의 단일 항목과 연결됨</li>\n<li>상위-하위 관계가 명확한 경우 적합합니다.</li>\n</ul>\n</li>\n<li>네트워크 모델\n<ul>\n<li>복잡한 데이터 관계를 표현하기 위해 설계되었습니다.</li>\n<li>데이터 항목 간에 망의 구조를 이루며 한 데이터 항목이 여러 상위 항목과 연결 될 수 있습니다.</li>\n</ul>\n</li>\n<li>객체-관계형 모델\n<ul>\n<li>관계 모델과 객체 지향 모델의 특성을 결합한 형태</li>\n<li>데이터는 테이블로 저장되어지며 테이블의 열은 전통적인 데이터 타입뿐만 아니라 객체, 배열, 다중값을 저장 할 수 있습니다.</li>\n<li>객체 지향 프로그래밍과 데이터베이스 설계의 통합을 지향함</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"-3\" tabindex=\"-1\">물리 데이터베이스 설계 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Logical-Database-Design/\">#</a></h2>\n<p>물리 데이터베이스 설계는 논리 데이터베이스 설계가 완료된 다음 설계입니다.</p>\n<p>논리적으로 설계된 데이터 모델을 실제 시스템에서 작동 할 수 있도록 구현하는 것에 중점을 둠</p>\n<p>물리 데이터베이스에서 중요한 점은 아래와 같습니다.</p>\n<ol>\n<li>데이터 파일 구조: 데이터 파일은 실제로 데이터가 저장되는 방식을 결정합니다.\n데이터의 저장 위치, 포맷, 액세스 방법등을 결정합니다. (인덱스를 태운다던지..)</li>\n<li>인덱싱 전략: 데이터 검색을 위해 인덱스를 구축하여 조회 성능을 향상시킴</li>\n<li>분할(partitioning): 큰 테이블이나 인덱스를 더 작게 나누어 관리와 성능을 향상시킴</li>\n<li>클러스터링: 데이터가 저장되는 방식을 조정하여 관련 데이터가 가능한 가까운 위치에 저장되도록 함</li>\n<li>캐싱 및 버퍼링: 자주 접근하는 데이터를 메모리에 캐싱해 성능을 향상시킴</li>\n</ol>\n<h3 id=\"-4\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/Logical-Database-Design/\">#</a></h3>\n<p>DB를 설계하는데 논리 -&gt; 물리 순으로 설계를 진행</p>\n<p>논리에선 테이블과 속성, 관계등의 구조를 정의하고\n물리에선 이를 실제로 저장합니다.</p>\n",
			"date_published": "2023-11-26T18:49:10Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Cross-join/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Cross-join/",
			"title": "SQL Join의 Cross join에 대해",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"joins\" tabindex=\"-1\">논리적 joins <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Cross-join/\">#</a></h2>\n<p>논리적 join은 다시 아래의 네 가지로 나뉘어집니다.\n오늘은 이 중에서 Cross Join에 대해 알아보겠습니다.</p>\n<ol>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Inner-join/\">Inner Join</a></li>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Outer-join/\">Outer ️Join</a></li>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Cross-join/\">Cross Join ⭐</a></li>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Self-join/\">Self Join </a></li>\n</ol>\n<h1 id=\"cross-join\" tabindex=\"-1\">Cross Join <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Cross-join/\">#</a></h1>\n<p>Cross Join은 두 테이블 간 가능한 모든 조합을 생성하는 Join입니다.</p>\n<p>교차 조인은 테이블 간 일치 조건을 기반으로 조인하지 않습니다.\n첫 번째 테이블과 두 번째 테이블의 모든 행을 조합해 결과를 생성합니다.</p>\n<h2 id=\"cross-join-1\" tabindex=\"-1\">교차 조인: Cross Join <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Cross-join/\">#</a></h2>\n<p>교차 조인의 조인 순서</p>\n<p>두 테이블 A, B가 있을 때,</p>\n<p>첫 번째 테이블인 A의 첫 행은\n두 번째 테이블인 B 테이블의 각 행과 조합되어집니다.</p>\n<p>간단한 예시를 들어보겠습니다.</p>\n<p>아주 간단한 테이블 A가 있다고 하겠습니다.</p>\n<table>\n<thead>\n<tr>\n<th>A</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>교차 조인될 테이블 B는 아래와 같다고 하겠습니다.</p>\n<table>\n<thead>\n<tr>\n<th>B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>X</td>\n</tr>\n<tr>\n<td>Y</td>\n</tr>\n</tbody>\n</table>\n<p>A 테이블의 첫 행인 1,\nB 테이블의 모든 행과 결합해보겠습니다.</p>\n<table>\n<thead>\n<tr>\n<th>A</th>\n<th>B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>X</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Y</td>\n</tr>\n</tbody>\n</table>\n<p>테이블 A의 행은 하나이므로 B 테이블의 X, Y 두 행과 각각 결합되었습니다.</p>\n<p>만약 조인의 결과는 행이 총 2개, 열이 2개 나왔습니다.</p>\n<p>행의 개수는 1(A 테이블의 행의 수) * 2(B 테이블의 행의 수)가 되었습니다.\n열의 개수는 A, B로 2 (1 + 1)개가 되었습니다.</p>\n<p>테이블의 조인 방법도 독특합니다만 결과도 독특합니다.</p>\n<p>분석이나 테스트용으로 주로 사용됩니다.</p>\n",
			"date_published": "2023-11-24T21:56:29Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Outer-join/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Outer-join/",
			"title": "SQL Join의 Outer join에 대해",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"joins\" tabindex=\"-1\">논리적 joins <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Outer-join/\">#</a></h2>\n<p>논리적 join은 다시 아래의 네 가지로 나뉘어집니다.\n오늘은 이 중에서 Outer Join에 대해 알아보겠습니다.</p>\n<ol>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Inner-join/\">Inner Join</a></li>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Outer-join/\">Outer Join ️⭐️</a></li>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Cross-join/\">Cross  Join</a></li>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Self-join/\">Self Join </a></li>\n</ol>\n<h1 id=\"outer-join\" tabindex=\"-1\">Outer Join <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Outer-join/\">#</a></h1>\n<p>외부조인은 두 테이블을 결합해 하나의 조인된 결과를 반환합니다.</p>\n<p>두 테이블이 조인 될 때, <strong>일치하지 않는 값도 포함</strong>합니다.\n일치하지 않아 값이 존재하지 않는 경우 NULL을 채워 넣습니다.</p>\n<h2 id=\"outer-join-1\" tabindex=\"-1\">외부 조인: Outer join <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Outer-join/\">#</a></h2>\n<p>외부조인의 특징</p>\n<ul>\n<li>외부 조인은 두 테이블을 결합할 때, 일치하는 행이 없는 경우에도 한쪽 테이블의 데이터를 포함합니다.</li>\n</ul>\n<p>외부 조인은 세 가지로 나뉘어집니다.</p>\n<ul>\n<li>외부조인\n<ol>\n<li>왼쪽 외부 조인 (Left Outer Join)</li>\n<li>오른쪽 외부 조인 (Right Outer Join)</li>\n<li>전체 외부 조인 (Full Outer Join)</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"\" tabindex=\"-1\">왼쪽과 오른쪽에 대해 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Outer-join/\">#</a></h3>\n<p>외부조인을 알아보기 앞서 왼쪽, 오른쪽 테이블에 대해서 알아두어야만 합니다.\n왼쪽, 오른쪽은 각각 왼쪽 테이블, 오른쪽 테이블로 테이블을 가리키며\n각 테이블의 join시의 역할을 나타냅니다.</p>\n<ul>\n<li>왼쪽: 왼쪽은 SQL 쿼리 구문에서 LEFT JOIN 키워드 바로 앞에 위치하는 테이블을 가리킵니다.\n<ul>\n<li>예를 들어 아래 쿼리에선 <code>LEFT OUTER JOIN</code> 앞의 테이블인 직원이 왼쪽입니다.</li>\n</ul>\n<pre class=\"language-sql\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> \n<span class=\"token keyword\">FROM</span> 직원 \n<span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">OUTER</span> <span class=\"token keyword\">JOIN</span> 부서 <span class=\"token keyword\">ON</span> 직원<span class=\"token punctuation\">.</span>부서ID <span class=\"token operator\">=</span> 부서<span class=\"token punctuation\">.</span>부서ID<span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li>오른쪽: 위의 예에서 바로 알 수 있듯이 부서 테이블이 오른쪽 테이블이 됩니다.</li>\n</ul>\n<h3 id=\"left-outer-join\" tabindex=\"-1\">왼쪽 외부 조인 (Left Outer Join) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Outer-join/\">#</a></h3>\n<ol>\n<li>왼쪽 외부 조인은 왼쪽 테이블의 모든 행은 조인 결과에 포함됩니다.</li>\n<li>오른쪽 테이블과 일치하는 행이 없을 경우 NULL로 채워집니다.</li>\n</ol>\n<h4 id=\"-1\" tabindex=\"-1\">예시 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Outer-join/\">#</a></h4>\n<p>직원(employees)과 부서(departments) 테이블을 가정해 보겠습니다.</p>\n<ol>\n<li>왼쪽 테이블의 모든 행은 조인 결과에 포함됩니다.</li>\n<li>오른쪽 테이블에 일치하는 행이 없다면 NULL로 채워집니다.</li>\n</ol>\n<h5>직원 테이블 (왼쪽 테이블)</h5>\n<table>\n<thead>\n<tr>\n<th>직원ID</th>\n<th>이름</th>\n<th>부서ID</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>홍길동</td>\n<td>101</td>\n</tr>\n<tr>\n<td>2</td>\n<td>이순신</td>\n<td>102</td>\n</tr>\n<tr>\n<td>3</td>\n<td>강감찬</td>\n<td>103</td>\n</tr>\n<tr>\n<td>4</td>\n<td>장보고</td>\n<td>NULL</td>\n</tr>\n</tbody>\n</table>\n<h5>부서 테이블 (오른쪽 테이블)</h5>\n<table>\n<thead>\n<tr>\n<th>부서ID</th>\n<th>부서명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>101</td>\n<td>개발</td>\n</tr>\n<tr>\n<td>102</td>\n<td>마케팅</td>\n</tr>\n<tr>\n<td>104</td>\n<td>인사</td>\n</tr>\n</tbody>\n</table>\n<p>위의 두 테이블에 대해 아래의 query를 실행해보겠습니다.</p>\n<pre class=\"language-sql\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> 직원<span class=\"token punctuation\">.</span>직원ID<span class=\"token punctuation\">,</span> 직원<span class=\"token punctuation\">.</span>이름<span class=\"token punctuation\">,</span> 부서<span class=\"token punctuation\">.</span>부서명\n<span class=\"token keyword\">FROM</span> 직원\n<span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">OUTER</span> <span class=\"token keyword\">JOIN</span> 부서 <span class=\"token keyword\">ON</span> 직원<span class=\"token punctuation\">.</span>부서ID <span class=\"token operator\">=</span> 부서<span class=\"token punctuation\">.</span>부서ID<span class=\"token punctuation\">;</span></code></pre>\n<p>쿼리의 결과를 예측해볼 수 있습니다.</p>\n<ul>\n<li>홍길동, 이순신은 부서 테이블에도 부서ID가 존재하므로 확실히\nSELECT 한 모든 값이 정상적으로 나올 것입니다.</li>\n<li>강감찬, 장보고의 부서ID는 부서 테이블에 존재하지 않으므로 부서명에서 NULL이 나올 것입니다.</li>\n</ul>\n<h5>조인 결과</h5>\n<table>\n<thead>\n<tr>\n<th>직원ID</th>\n<th>이름</th>\n<th>부서명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>홍길동</td>\n<td>개발</td>\n</tr>\n<tr>\n<td>2</td>\n<td>이순신</td>\n<td>마케팅</td>\n</tr>\n<tr>\n<td>3</td>\n<td>강감찬</td>\n<td>NULL</td>\n</tr>\n<tr>\n<td>4</td>\n<td>장보고</td>\n<td>NULL</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"right-outer-join\" tabindex=\"-1\">오른쪽 외부 조인: (Right Outer Join) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Outer-join/\">#</a></h3>\n<p>오른쪽 외부 조인은 왼쪽 외부 조인에서 오른쪽 테이블의 모든 행을 결과에 포함시킵니다.</p>\n<p>내용 자체는 왼쪽 외부 조인과 같으므로 생략 가능합니다.</p>\n<h4 id=\"-2\" tabindex=\"-1\">예시 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Outer-join/\">#</a></h4>\n<h5>직원 테이블 (왼쪽 테이블)</h5>\n<table>\n<thead>\n<tr>\n<th>직원ID</th>\n<th>이름</th>\n<th>부서ID</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>홍길동</td>\n<td>101</td>\n</tr>\n<tr>\n<td>2</td>\n<td>이순신</td>\n<td>102</td>\n</tr>\n<tr>\n<td>3</td>\n<td>강감찬</td>\n<td>103</td>\n</tr>\n<tr>\n<td>4</td>\n<td>장보고</td>\n<td>NULL</td>\n</tr>\n</tbody>\n</table>\n<h5>부서 테이블 (오른쪽 테이블)</h5>\n<table>\n<thead>\n<tr>\n<th>부서ID</th>\n<th>부서명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>101</td>\n<td>개발</td>\n</tr>\n<tr>\n<td>102</td>\n<td>마케팅</td>\n</tr>\n<tr>\n<td>104</td>\n<td>인사</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"language-sql\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> 직원<span class=\"token punctuation\">.</span>직원ID<span class=\"token punctuation\">,</span> 직원<span class=\"token punctuation\">.</span>이름<span class=\"token punctuation\">,</span> 부서<span class=\"token punctuation\">.</span>부서명\n<span class=\"token keyword\">FROM</span> 부서\n<span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">OUTER</span> <span class=\"token keyword\">JOIN</span> 직원 <span class=\"token keyword\">ON</span> 직원<span class=\"token punctuation\">.</span>부서ID <span class=\"token operator\">=</span> 부서<span class=\"token punctuation\">.</span>부서ID<span class=\"token punctuation\">;</span></code></pre>\n<p>오른쪽 외부 조인이므로 아래의 조건을 만족시켜야 합니다.</p>\n<ul>\n<li>부서 테이블의 모든 튜플은 조인 결과에 포함되어야 합니다.</li>\n</ul>\n<p>이 조건을 지키기 위해서 가장 쉬운 방법은 먼저 부서 테이블을\n조인 결과에 모두 추가해놓는 것이 가장 합리적일 것입니다.</p>\n<p>실제 조인 결과도 그런지 확인하겠습니다.</p>\n<h5>조인 결과</h5>\n<table>\n<thead>\n<tr>\n<th>직원ID</th>\n<th>이름</th>\n<th>부서명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>홍길동</td>\n<td>개발</td>\n</tr>\n<tr>\n<td>2</td>\n<td>이순신</td>\n<td>마케팅</td>\n</tr>\n<tr>\n<td>NULL</td>\n<td>NULL</td>\n<td>인사</td>\n</tr>\n<tr>\n<td>3</td>\n<td>강감찬</td>\n<td>NULL</td>\n</tr>\n<tr>\n<td>4</td>\n<td>장보고</td>\n<td>NULL</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>조인 결과의 상위 3개의 튜플을 확인하면 개발, 마케팅, 인사 순으로\n부서 테이블의 부서명 정렬순서를 따릅니다.\n<ul>\n<li>부서명이 인사인 경우가 왼쪽 테이블에 없으므로 NULL로 채워졌습니다.</li>\n</ul>\n</li>\n</ul>\n<p>오른쪽 테이블이 모두 소진되었으므로 왼쪽 테이블의 남은 값들을 입력해주면 됩니다.</p>\n<hr>\n<h3 id=\"full-outer-join\" tabindex=\"-1\">전체 외부 조인 (Full Outer Join) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Outer-join/\">#</a></h3>\n<p>전체 외부 조인은 왼쪽, 오른쪽 조인의 조건을 왼쪽, 오른쪽에 모두 적용하는 것입니다.</p>\n<ul>\n<li>왼쪽, 오른쪽 테이블의 모든 행을 포함합니다.</li>\n<li>일치하는 행이 없는 경우 NULL을 채워 넣습니다.\n<ul>\n<li>일치하지 않는 행 = 한 테이블에는 존재하나, 다른 테이블엔 존재하지 않는 행을 의미함</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"-3\" tabindex=\"-1\">예시 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Outer-join/\">#</a></h4>\n<p>바로 예시를 확인하겠습니다.</p>\n<h5>직원 테이블 (왼쪽 테이블)</h5>\n<table>\n<thead>\n<tr>\n<th>직원ID</th>\n<th>이름</th>\n<th>부서ID</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>홍길동</td>\n<td>101</td>\n</tr>\n<tr>\n<td>2</td>\n<td>이순신</td>\n<td>102</td>\n</tr>\n<tr>\n<td>3</td>\n<td>강감찬</td>\n<td>103</td>\n</tr>\n<tr>\n<td>4</td>\n<td>장보고</td>\n<td>NULL</td>\n</tr>\n</tbody>\n</table>\n<h5>부서 테이블 (오른쪽 테이블)</h5>\n<table>\n<thead>\n<tr>\n<th>부서ID</th>\n<th>부서명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>101</td>\n<td>개발</td>\n</tr>\n<tr>\n<td>102</td>\n<td>마케팅</td>\n</tr>\n<tr>\n<td>104</td>\n<td>인사</td>\n</tr>\n</tbody>\n</table>\n<p>아래의 query를 실행하면 어떤 결과를 받을 수 있을까요?</p>\n<pre class=\"language-sql\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> 직원<span class=\"token punctuation\">.</span>직원ID<span class=\"token punctuation\">,</span> 직원<span class=\"token punctuation\">.</span>이름<span class=\"token punctuation\">,</span> 부서<span class=\"token punctuation\">.</span>부서명\n<span class=\"token keyword\">FROM</span> 직원\n<span class=\"token keyword\">FULL</span> <span class=\"token keyword\">OUTER</span> <span class=\"token keyword\">JOIN</span> 부서 <span class=\"token keyword\">ON</span> 직원<span class=\"token punctuation\">.</span>부서ID <span class=\"token operator\">=</span> 부서<span class=\"token punctuation\">.</span>부서ID<span class=\"token punctuation\">;</span></code></pre>\n<ol>\n<li>모든 튜플을 모두 포함해야합니다.</li>\n<li>FROM 바로 뒤의 테이블부터 엔진은 조인을 시작합니다.</li>\n<li>장보고까지 조인하면서 부서명이 일치하는 것이 없으면 NULL로 채웁니다.</li>\n<li>부서 테이블을 다시 조인합니다.</li>\n</ol>\n<h5>조인 결과</h5>\n<table>\n<thead>\n<tr>\n<th>직원ID</th>\n<th>이름</th>\n<th>부서명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>홍길동</td>\n<td>개발</td>\n</tr>\n<tr>\n<td>2</td>\n<td>이순신</td>\n<td>마케팅</td>\n</tr>\n<tr>\n<td>3</td>\n<td>강감찬</td>\n<td>NULL</td>\n</tr>\n<tr>\n<td>4</td>\n<td>장보고</td>\n<td>NULL</td>\n</tr>\n<tr>\n<td>NULL</td>\n<td>NULL</td>\n<td>인사</td>\n</tr>\n</tbody>\n</table>\n<p>위 결과를 보면 왼쪽, 오른쪽 조인을 순서대로 한 것과 같습니다.</p>\n<p>이렇게 논리적 Joins에서 Outer join인 외부 조인을 알아봤습니다.</p>\n<h3 id=\"-4\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Outer-join/\">#</a></h3>\n<p>정리하자면 외부 조인의 경우</p>\n<ol>\n<li>조인의 주체가 되는 테이블을 먼저 조인하고,</li>\n<li>다른 테이블을 붙인다.</li>\n<li>값이 조건에 맞지 않는 경우 NULL을 넣는다.</li>\n</ol>\n",
			"date_published": "2023-11-23T22:07:03Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Inner-join/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Inner-join/",
			"title": "SQL Join의 Inner Join에 대해",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"joins\" tabindex=\"-1\">논리적 joins <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Inner-join/\">#</a></h2>\n<p>논리적 join은 다시 아래의 네 가지로 나뉘어집니다.\n오늘은 이 중에서 Inner Join에 대해 알아보겠습니다.</p>\n<ol>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Inner-join/\">Inner Join ⭐</a></li>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Outer-join/\">Outer Join ️</a></li>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Cross-join/\">Cross Join </a></li>\n<li><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Self-join/\">Self Join </a></li>\n</ol>\n<h1 id=\"inner-join\" tabindex=\"-1\">Inner Join <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Inner-join/\">#</a></h1>\n<p>내부조인은 두 테이블을 결합해 하나의 조인된 결과를 반환합니다.</p>\n<p>두 테이블이 조인 될 때, <strong>일치하는 값들만을 포함</strong>합니다.</p>\n<h2 id=\"join\" tabindex=\"-1\">join이란 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Inner-join/\">#</a></h2>\n<ul>\n<li>\n<p>RDB에서 join이란 정규화로 인해 나뉘어진 테이블에 대해 쿼리시\n마치 하나의 테이블에서 데이터를 뽑아오듯이 테이블을 이어주는 역할을 한다.</p>\n<ul>\n<li>정규화란 데이터베이스 설계에서 중복을 최소화하고 무결성을 지키기 위해 데이터 구조를 조정한 것을 의미함</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"join-1\" tabindex=\"-1\">join의 종류 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Inner-join/\">#</a></h2>\n<p>join은 크게 두 가지로 나뉘어진다.</p>\n<ol>\n<li>논리적 join</li>\n<li>물리적 join</li>\n</ol>\n<h4 id=\"join-inner-join\" tabindex=\"-1\">내부 join: Inner join <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Inner-join/\">#</a></h4>\n<p>내부 join은 두 테이블의 공통된 column을 기준으로 데이터를 결합합니다.</p>\n<p>아래의 직원, 부서 테이블은 서로 공통된 column인 부서ID column이 있습니다.</p>\n<h4 id=\"1\" tabindex=\"-1\">테이블 1: 직원 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Inner-join/\">#</a></h4>\n<table>\n<thead>\n<tr>\n<th>직원ID</th>\n<th>이름</th>\n<th>부서ID</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>홍길동</td>\n<td>101</td>\n</tr>\n<tr>\n<td>2</td>\n<td>이순신</td>\n<td>102</td>\n</tr>\n<tr>\n<td>3</td>\n<td>강감찬</td>\n<td>103</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"2\" tabindex=\"-1\">테이블 2: 부서 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Inner-join/\">#</a></h4>\n<table>\n<thead>\n<tr>\n<th>부서ID</th>\n<th>부서명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>101</td>\n<td>개발</td>\n</tr>\n<tr>\n<td>102</td>\n<td>마케팅</td>\n</tr>\n<tr>\n<td>104</td>\n<td>인사</td>\n</tr>\n</tbody>\n</table>\n<p>두 테이블을 공통 column인 부서ID로 내부 Join(Inner Join)해보겠습니다.</p>\n<pre class=\"language-sql\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> 직원<span class=\"token punctuation\">.</span>직원ID<span class=\"token punctuation\">,</span> 직원<span class=\"token punctuation\">.</span>이름<span class=\"token punctuation\">,</span> 부서<span class=\"token punctuation\">.</span>부서명\n<span class=\"token keyword\">FROM</span> 직원\n<span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> 부서 <span class=\"token keyword\">ON</span> 직원<span class=\"token punctuation\">.</span>부서ID <span class=\"token operator\">=</span> 부서<span class=\"token punctuation\">.</span>부서ID<span class=\"token punctuation\">;</span></code></pre>\n<p>결과는 아래와 같습니다.</p>\n<h4 id=\"inner-join-1\" tabindex=\"-1\">Inner Join 결과: 직원과 부서의 내부 조인 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Inner-join/\">#</a></h4>\n<table>\n<thead>\n<tr>\n<th>직원ID</th>\n<th>이름</th>\n<th>부서명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>홍길동</td>\n<td>개발</td>\n</tr>\n<tr>\n<td>2</td>\n<td>이순신</td>\n<td>마케팅</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"\" tabindex=\"-1\">마치며 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/SQL-Inner-join/\">#</a></h2>\n<p>join의 종류는 상당히 많고 깊이 들어가면 한도 끝도 없으므로 Inner Join에 대해서만 간단히\n알아봤습니다.</p>\n<p>하나의 article로 끝내기보단 join 중에서 논리, 물리 join을 하나씩 알아보도록 하겠습니다.</p>\n",
			"date_published": "2023-11-22T23:36:25Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/DDL-Domain-Schema-Table-View-Index/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/DDL-Domain-Schema-Table-View-Index/",
			"title": "DDL의 도메인, 스키마, 테이블, 뷰, 인덱스",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"ddl\" tabindex=\"-1\">DDL이란? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/DDL-Domain-Schema-Table-View-Index/\">#</a></h1>\n<p>DDL은 Data Definition Language입니다.</p>\n<p>데이터베이스의 구조를 <strong>정의, 수정, 삭제</strong>하는데 사용되는 <strong>명령어 집합</strong>입니다.</p>\n<p><code>SQL Command = {DDL, DML, DCL, TCL}</code> 이라고 할 수 있습니다.</p>\n<p>이제 DDL이 SQL Command의 일부이며,\n데이터베이스의 구조를 <strong>정의, 수정, 삭제</strong>한다는 것을 알았습니다.</p>\n<p>아직 도메인, 스키마, 테이블, 뷰, 인덱스와 DDL의 연결이 부족한 것 같습니다.</p>\n<p>하나씩 알아보도록 하겠습니다.</p>\n<h2 id=\"domain\" tabindex=\"-1\">도메인(Domain)이란? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/DDL-Domain-Schema-Table-View-Index/\">#</a></h2>\n<p>개발에선 domain이란 이름을 여러곳에서 사용합니다.\n함수(정의역)에서도, url(www.<strong>google</strong>.com)에서도, DB에서도 사용합니다.</p>\n<p>DB에서의 도메인은 특정 열(필드)에서 허용되는 값의 범위나 유형의 정의를 의미합니다.</p>\n<p>User table을 만든다고 가정하고 User의 id는 integer형으로 하겠습니다.\n위처럼 각 열의 데이터 타입과 제약조건을 정의하는 것을 도메인을 설정한다고 합니다.</p>\n<h2 id=\"schema\" tabindex=\"-1\">스키마란(Schema)이란? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/DDL-Domain-Schema-Table-View-Index/\">#</a></h2>\n<ul>\n<li>\n<p>구조적 정의:</p>\n<ul>\n<li>스키마는 데이터베이스 내의 모든 테이블, 뷰, 인덱스, 관계 등을 포함한 구조를 정의합니다.</li>\n</ul>\n</li>\n<li>\n<p>테이블간의 관계:</p>\n<ul>\n<li>ex.1) 뮤지션 테이블과 음원의 관계 (1 : N)</li>\n<li>ex.2) 선생님 테이블과 학급 테이블의 관계 (1 : N)</li>\n</ul>\n</li>\n<li>\n<p>데이터 무결성:</p>\n<ul>\n<li>형식지정(domain의 설정): 각 열의 데이터 타입을 지정하는 것으로 필드에 부적절 한 값이 들어오지 못하도록 합니다. 이를 통해 일관성과 정확성을 유지합니다.</li>\n<li>제약 조건 설정:\n<ul>\n<li>NOT NULL이나 UNIQUE, 등의 제약 조건을 설정함으로써 필드를 비워두거나 중복된 값을 막을 수 있습니다. CHECK 제약 조건을 통해\n특정 제약조건을 만족하는 데이터만 저장되게 할 수도 있습니다.</li>\n</ul>\n</li>\n<li>기본 키, 외래 키:\n<ul>\n<li>기본 키와 외래 키를 정의 할 수 있습니다. 기본키는 테이블 내의 각 레코드를 고유하게 식별하고, 외래 키는 다른 테이블의 기본 키를 참조해\n테이블간의 관계를 정의 할 수 있고 이러한 키들은 참조 무결성을 보장하여 관련된 테이블 간에 일관된 데이터를 유지 할 수 있게 합니다.</li>\n<li>참조 무결성(Referential Integrity): 데이터의 일관성과 정확성을 보장하는 개념\n<ul>\n<li>외래 키 관계: 외래 키를 사용해 두 테이블 간의 관계를 정의합니다.\n<ul>\n<li><strong>주문 테이블</strong>의 고객 ID 열은 <strong>고객 테이블의 ID(기본 키) 열을 참조</strong>할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>표준화 및 일관성:</p>\n<ul>\n<li>스키마는 데이터베이스의 구조와 규칙이 되며, 이는 데이터의 일관성과 예측 가능성을 보장해주는 역할을 합니다.</li>\n</ul>\n</li>\n<li>\n<p>추상화 수준:</p>\n<ul>\n<li>스키마는 논리 또는 물리적 수준에서 정의 될 수 있습니다. 이를 논리적 / 물리적 스키마라고 합니다.\n<ul>\n<li>\n<p>논리적 스키마:</p>\n<ul>\n<li>데이터베이스의 구조를 추상적인 수준에서 정의합니다. 사용자와 프로그램이 데이터베이스와 어떻게 상호 작용하는지에 초점을 두고 있습니다.\n<ul>\n<li>물리적 저장방식에 독립적이기 때문에 저장방식이 바뀌어도 영향받지 않음</li>\n<li>데이터베이스의 논리적 구조를 정의함</li>\n<li>데이터베이스 내의 엔티티들과 그들 간의 관계를 정의함\n<ul>\n<li>엔티티의 정의와 속성은 논리적 스키마의 일부이다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>물리적 스키마:</p>\n<ul>\n<li>데이터가 실제로 저장되고 관리되는지를 나타냅니다. 저장의 효율성과 성능에 중점을 둔 스키마입니다.\n<ul>\n<li>데이터 저장: 데이터가 하드 드라이브, 네트워크 등의 물리적 저장 매체에 어떻게 저장되는지 나타냄</li>\n<li>인덱싱 및 최적화: 데이터의 접근 방법, 인덱싱 전략, 데이터 분할 방법등을 포함</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"table\" tabindex=\"-1\">테이블(table)이란? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/DDL-Domain-Schema-Table-View-Index/\">#</a></h2>\n<p>테이블은 데이터를 구조화하고 저장하는 기본 단위입니다.\nRDB에서 테이블의 주요한 요소는 아래와 같습니다.</p>\n<ul>\n<li>열(Column)과 행(Row):\n<ul>\n<li>열은 테이블의 특정 종류의 정보를 나타냅니다. 동일한 타입의 값을 가집니다.</li>\n<li>행은 개별 데이터 레코드를 나타내며 각 행은 열에 정의된 속성에 따라 구조화된 데이터 집합을 가집니다. (마치 구조체처럼 말이죠)</li>\n</ul>\n</li>\n<li>기본 키(Primary Key):\n<ul>\n<li>각 행을 고유하게 식별하는 열</li>\n<li>각 행이 고유함을 보장함</li>\n<li>다른 테이블과 관계를 정의하는데 사용함</li>\n</ul>\n</li>\n<li>외래 키(Foreign Key):\n<ul>\n<li>다른 테이블의 기본 키를 참조하는 열</li>\n<li>외래 키를 통해 테이블간의 관계를 설정하고 참조 무결성을 유지함 (CASCADE)</li>\n</ul>\n</li>\n<li>데이터 무결성:\n<ul>\n<li>NOT NULL이나 UNIQUE등의 제약조건을 사용, 데이터의 정확성과 일관성을 보장합니다.</li>\n</ul>\n</li>\n<li>인덱싱(Indexing):\n<ul>\n<li>인덱스는 특정 열에 대한 빠른 검색을 가능하게 하는 목차를 만드는 것으로 검색과 처리 속도를 향상시킵니다.</li>\n</ul>\n</li>\n<li>관계:\n<ul>\n<li>1:1, 1:N, N:M관계로 데이터의 조직화 및 연결에 사용됩니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"view\" tabindex=\"-1\">뷰(View)란? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/DDL-Domain-Schema-Table-View-Index/\">#</a></h2>\n<p>뷰는 데이터베이스의 실제 테이블로부터 유도된 가상의 테이블입니다.\n뷰는 실제 데이터를 저장하지 않고, 하나 이상의 기존 테이블에 대한 SQL 쿼리의 결과로 구성됩니다.</p>\n<p>실제 테이블처럼 사용 가능하나 뷰에 대한 쿼리는 뒤에서 실행되는 기본 테이블에 영향을 미칩니다.</p>\n<ul>\n<li>장점\n<ul>\n<li>복잡성 감소:\n<ul>\n<li>복잡한 쿼리를 단순화합니다.</li>\n</ul>\n</li>\n<li>추상화:\n<ul>\n<li>기본 테이블의 복잡성을 모른채로 데이터에 쉽게 접근 가능합니다.</li>\n</ul>\n</li>\n<li>논리적 데이터 독립성:\n<ul>\n<li>기본 테이블의 구조가 변경되어도 뷰를 통해 일관된 방식으로 데이터에 접근 가능합니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>언제 쓰는가\n<ul>\n<li>복잡한 쿼리 간소화:\n<ul>\n<li>복잡한 조인, 서브쿼리등이 많은 경우 뷰를 사용하기에 좋습니다.</li>\n</ul>\n</li>\n<li>보안:\n<ul>\n<li>사용자에게 일부 데이터만 보여주고 싶은 경우</li>\n</ul>\n</li>\n<li>사용자별 맞춤형 데이터 제공:\n<ul>\n<li>사용자나 프로그램에 맞춰 다른 형태로 데이터를 제공해야 하는 경우 뷰를 사용 할 수 있습니다.</li>\n</ul>\n</li>\n<li>데이터베이스 디자인 및 변경 관리:\n<ul>\n<li>기본 테이블이구조가 변경되어도 뷰를 사용하면 동일한 접근 방식을 유지 할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>일부 데이터베이스에서 뷰에 대한 수정 (INSERT, UPDATE, DELETE)가 제한적일 수 있습니다.</p>\n<p>복잡한 뷰는 기본 테이블에 성능저하를 가져 올 수 있습니다.</p>\n<p>예시로 employees 테이블을 보는 view를 생성해보겠습니다.</p>\n<pre class=\"language-sql\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> department_view <span class=\"token keyword\">AS</span>\n<span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span> department\n<span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span></code></pre>\n<p>사용은 아래와 같습니다.</p>\n<pre class=\"language-sql\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> department_view<span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"index\" tabindex=\"-1\">인덱스(Index)란? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/DDL-Domain-Schema-Table-View-Index/\">#</a></h2>\n<p>인덱스는 검색 속도를 향상시키기 위해 테이블의 특정 열에 대해 생성하는 목차와 같은 것입니다.\n예를 들어 책을 구입하면 맨 앞장에 원하는 정보를 찾을 수 있게 목차가 있습니다. 이는 DB의 인덱스와\n같은 역할을 합니다.</p>\n<p>binary search를 활용해 원하는 값을 찾기 때문에 매우 빠른 속도로 찾을 수 있습니다.</p>\n<p>인덱스는 실제 물리적으로 저장되므로 인덱스만큼 공간을 차지하며\n삽입과 삭제, 업데이트와 같은 쓰기 작업에서 성능 저하를 일으킬 수 있습니다.</p>\n",
			"date_published": "2023-11-20T21:57:01Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IPSec/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IPSec/",
			"title": "IPSec에 대해",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"ipsec\" tabindex=\"-1\">IPSec <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IPSec/\">#</a></h2>\n<p>IPSec는 흔히 OSI 7 Layer의 3 계층인 IP계층에서 무결성과 인증을 보장하는 통신 프로토콜 세트입니다.\nIPSec은 암호와와 인증을 추가해 프로토콜을 더욱 안전하게 만듭니다.</p>\n<p>IPSec는 IP 패킷의 보안성을 제공하기 위해 2가지 헤더를 정의합니다.</p>\n<ul>\n<li>AH 헤더: 무결성, 인증</li>\n<li>ESP 헤더: 무결성, 인증, 암호화(기밀성)</li>\n</ul>\n<h3 id=\"ah-authentication-header\" tabindex=\"-1\">AH(Authentication Header) 헤더 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IPSec/\">#</a></h3>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/0QnWFMZJ7b-357.webp\" width=\"100%\" height=\"auto\" alt=\"image alt\" loading=\"lazy\" decoding=\"async\"></div>\n(이미지 출처: ktword.co.kr)\n<p>AH 헤더는 데이터의 무결성과 출처의 인증을 제공합니다.\n통신간 패킷이 변경되지 않고 예상된 송신자로부터 왔음을 보장합니다.</p>\n<ul>\n<li>데이터가 패킷 단위로 쪼개져 이동하는데 이 패킷이 다른 악의적인 의도로 들어온 패킷인지(무결성, 인증) 아닌지를\n확인해야 하므로 AH헤더가 필요함</li>\n</ul>\n<h3 id=\"esp-encapsulating-security-payload\" tabindex=\"-1\">ESP(Encapsulating Security Payload) 헤더 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IPSec/\">#</a></h3>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/YoAVz-62Na-412.webp\" width=\"100%\" height=\"auto\" alt=\"image alt\" loading=\"lazy\" decoding=\"async\"></div>\n(이미지 출처: ktword.co.kr)\n<p>ESP는 무결성, 인증, 그리고 기밀성을 제공합니다.</p>\n<p>인터넷 통신이 일어날 때, 통신이 싣고 가는 데이터를 암호화하는 기술로 악의적인 의도를 가진자가\n이동하는 데이터를 열어 해독 하지 못하게 암호화합니다.</p>\n<p>위 이미지처럼\nESP 헤더가 payload 앞에,\nESP Trailer가 payload 뒤에 위치합니다.</p>\n<p>이는 암호화되고 인증되는 데이터를 감싸는 역할을 하게됩니다.</p>\n<h4 id=\"esp-header\" tabindex=\"-1\">ESP header <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IPSec/\">#</a></h4>\n<ul>\n<li>SPI (Security Parameter Index) (32 비트)\n<ul>\n<li>임의 32 비트 값으로, 보안연관의 식별용</li>\n</ul>\n</li>\n<li>Sequence Number (32 비트)\n<ul>\n<li>재전송공격 방지</li>\n<li>1부터 1씩 증가하다가 232까지 가능</li>\n<li>232 이후, SA가 재설정되어야 함</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"esp-trailer\" tabindex=\"-1\">ESP Trailer <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/IPSec/\">#</a></h4>\n<ul>\n<li>payload 데이터\n<ul>\n<li>ESP에 의해 암호화 되는 실제로 전송되어야 할 데이터</li>\n</ul>\n</li>\n<li>패딩(padding)\n<ul>\n<li>암호화 알고리즘의 요구에 맞게 늘었다 줄었다하는 데이터 블록</li>\n</ul>\n</li>\n<li>pad length\n<ul>\n<li>패딩의 길이</li>\n</ul>\n</li>\n<li>next header\n<ul>\n<li>payload 필드에 포함된 데이터 종류를 식별해 줄 필드입니다.</li>\n</ul>\n</li>\n</ul>\n<p>정리하면</p>\n<p>IPSec는 Ip 3 계층에서 데이터의 무결성과 인증을 보장하는 프로토콜입니다.</p>\n",
			"date_published": "2023-11-15T22:04:08Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JS/browser/embedded-worker-2/",
			"url": "https://zerozoo-a.github.io/blog/JS/browser/embedded-worker-2/",
			"title": "embedded worker 2 thread를 미리 &quot;만들기만 하고 싶을 때&quot;",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"embedded-worker-idle\" tabindex=\"-1\">embedded worker를 idle하게 모아보자 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/browser/embedded-worker-2/\">#</a></h1>\n<ul>\n<li>주의사항</li>\n<li>개선점</li>\n<li>정리</li>\n</ul>\n<h2 id=\"\" tabindex=\"-1\">주의사항 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/browser/embedded-worker-2/\">#</a></h2>\n<p>아래 코드는 <code>eval</code>을 사용하고 있습니다.</p>\n<ul>\n<li><code>eval</code>의 사용을 원치 않는 경우 해당 <strong>코드는 사용하면 안됩니다.</strong></li>\n</ul>\n<h3 id=\"worker-thread\" tabindex=\"-1\">worker thread를 그냥 만들기만 하는 것에 대해 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/browser/embedded-worker-2/\">#</a></h3>\n<p>worker thread를 생성,\n이를 변수에 store 했다가 나중에 일감을 던져주는 형태를 구현하기 위해\n임시로 제작한 함수입니다.</p>\n<p>개선방안을 생각하고 있습니다.</p>\n<p>구현은 <a href=\"https://zerozoo-a.github.io/blog/JS/browser/embedded-worker-for-main-thread/\">지난 글</a>에서 사용한\n함수를 조금 변경 한 정도입니다.</p>\n<p>코드는 아래와 같습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// thread.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">thread2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isOkWorker<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> meta <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">onmessage = ({data}) => {\n    const evaluatedFn = eval(data)(); // 2\n    return postMessage({ evaluatedFn }) // send message to worker\n  }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token function\">makeWorker</span><span class=\"token punctuation\">(</span>meta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onError</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">rej</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">rej</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res<span class=\"token punctuation\">,</span> rej</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n      <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span>rej<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      worker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>눈에 띄게 변경된 점은 eval의 사용과 변수 p에서 data를 serializable하게 변경했다는 점입니다.\n그리고 사용처인 main.js를 바로 확인해보겠습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// main.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> thread2 <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./thread.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token function\">thread2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>thread를 생성만하고 별다른 액션이 없습니다.\nthread는 생성되고 다음 함수가 들어올 때 까지 별다른 일을 하지 않습니다.</p>\n<p>일을 주는 형태는 아래와 같습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> thread2 <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./thread.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token function\">thread2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> b2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b2:\"</span><span class=\"token punctuation\">,</span> b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>원래의 형태에선 thread를 생성 할 때, 일을 무조건 줘야만 했습니다.(함수)\n이래선 thread를 cpu의 idle 타임에 틈틈히 만들어 두는 것은 어렵습니다.</p>\n<p>실제로 thread는 함수를 받아 해당 함수를 실행시키고 값을 반환하는 형태이며,\n함수를 다시 넘겨주는 것이 불가능하기 때문입니다.</p>\n<p>물론 처음 실행엔 thread를 생성하는 오버헤드를 감수하고 worker를 저장해두었다가 다시 사용하는\n방법도 있겠습니다만, 뭔가 마음에 들진 않았습니다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">개선점 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/browser/embedded-worker-2/\">#</a></h2>\n<h3 id=\"eval\" tabindex=\"-1\">eval <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/browser/embedded-worker-2/\">#</a></h3>\n<p>개선 할 점은 물론 eval을 빼는 것입니다.</p>\n<p>new Function도 eval과 비슷한 이슈를 가지고 있습니다.</p>\n<h2 id=\"-2\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/browser/embedded-worker-2/\">#</a></h2>\n<ul>\n<li>\n<p>생각보다 원하는 스펙의 worker thread 생성 함수를 만드는게 어렵다고 느꼈습니다.</p>\n<ul>\n<li>브라우저에서 사용 할 경우 requestIdleTime 함수에 thread를 생성하는 함수를 넣어두는 것이 좋습니다.</li>\n</ul>\n</li>\n<li>\n<p>위 함수는 일반적인 경우에서 사용하기 힘든 형태입니다.\n이유는 점점 코드를 읽기 어려워지고 있고, eval의 위험성을 굳이 감수할 필요는 전혀 없기 때문입니다.</p>\n</li>\n<li>\n<p>위 배너 이미지를 보게 되면 thread가 생성된 것을 볼 수 있습니다.\n이름 붙은 Main thread와 아래의 이상한 이름을 가진 thread가 있는데 그것이 바로 위 함수로 생성된\nthread입니다.</p>\n</li>\n</ul>\n",
			"date_published": "2023-11-11T11:53:24Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JS/browser/embedded-worker-for-main-thread/",
			"url": "https://zerozoo-a.github.io/blog/JS/browser/embedded-worker-for-main-thread/",
			"title": "embedded worker의 기초",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"embedded-worker\" tabindex=\"-1\">embedded worker에 대해 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/browser/embedded-worker-for-main-thread/\">#</a></h1>\n<h2 id=\"embedded-worker-1\" tabindex=\"-1\">embedded 이전에 worker에 대해 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/browser/embedded-worker-for-main-thread/\">#</a></h2>\n<p>javascript에서 worker를 사용하기 위해서는</p>\n<ol>\n<li>worker 객체를 생성,</li>\n<li>worker 객체에 넘겨줄 script 파일의 path를 입력하게 됩니다.</li>\n<li>worker와 main thread의 통신은 모두 message로 이루어집니다.\n<ol>\n<li>postMessage를 통해 worker에게 데이터를 보냅니다.</li>\n<li>worker는 onmessage를 통해 message를 받습니다.</li>\n<li>main thread도 마찬가지로 응답을 onmessage를 통해 받습니다.</li>\n<li>message들은 Event 객체를 상속받습니다.</li>\n</ol>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n classDiagram\n\n MessageEvent --> Event\n</div>\n<ol start=\"5\">\n<li>Event emitter를 상속 받기 때문에 Worker의 생성이 비동기여도 정상 작동하게 됩니다.</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"worker\" tabindex=\"-1\">worker의 생성과 사용 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/browser/embedded-worker-for-main-thread/\">#</a></h3>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// main.js</span>\n<span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/work.js'</span><span class=\"token punctuation\">)</span>\nworker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nworker<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// work.js</span>\nself<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위 방식의 불편한 점은 항상 파일을 분리해두어야 한다는 점입니다.</p>\n<p>아래와 같이 작성 할 순 없을까요?</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span> <span class=\"token comment\">// thread 생성</span>\n<span class=\"token function\">worker</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3 반환</span></code></pre>\n<p>아쉽지만 위와 같은 함수는 현재 스펙에는 없습니다.</p>\n<p>아예 방법이 없는 것은 아닌데요 embedded worker라는 방법을 통해\n위와 같이 worker thread에 함수를 넘겨주는 방식을 구현해보겠습니다.</p>\n<p>embedded worker에 대한 자세한 내용은 MDN의 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\">using web workers라는 페이지에 소개되어 있습니다.</a></p>\n<p>embedded worker 방식은 일반 자바스크립트를 다른 파일을 생성하지 않고,\nworker를 사용하는 방법입니다.</p>\n<p>worker의 스펙을 보면 아래와 같습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span>aURL<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span>aURL<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span></code></pre>\n<p><code>aURL</code>을 받습니다. 즉 path만을 받는 것이 아닌 URL이면 됩니다.\n자바스크립트 함수를 놀랍게도 URL로 변환하는 작업을 거쳐보겠습니다.</p>\n<p>순서는 아래와 같습니다.</p>\n<ul>\n<li>코드를 blob으로 쪼갭니다.</li>\n<li>blob을 url로 변환합니다.</li>\n<li>worker 객체를 생성해 url을 넘겨줍니다.</li>\n</ul>\n<p>구현은 아래와 같습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">    <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">onmessage = ({data}) => postMessage((</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>f<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)(data));</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/javascript'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이제 위 함수를 잘 다듬어 worker에 함수를 넘겨주고, 결과값을 받는 함수를 만들어보도록 하겠습니다.</p>\n<p>함수에 필요한 스펙을 정리해보면</p>\n<ul>\n<li>inline으로 함수를 입력하고 값을 반환받고 싶습니다.</li>\n<li>worker를 사용 할 수 없다면 입력받은 함수를 main thread에서 그대로 실행시켰으면 좋겠습니다.</li>\n</ul>\n<p>worker의 생성은 오버헤드가 존재하므로 브라우저에서는 비동기로 생성됩니다.</p>\n<p>Promise를 이용해 async await을 사용 할 수 있도록 수정합니다.</p>\n<p>물론 onmessage를 통해 event emit방식을 사용 할 수 있지만 그러고 싶은 분은 많지 않으리라 생각합니다.</p>\n<p>아래는 해당 내용을 구현한 함수입니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">process</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">f</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> isOkWorker <span class=\"token operator\">=</span> Blob <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">URL</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span>createObjectURL<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isOkWorker<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">onmessage = ({data}) => postMessage((</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>f<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)(data));</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/javascript'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> worker<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onError</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">rej</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> worker<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">rej</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res<span class=\"token punctuation\">,</span> rej</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span>rej<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      worker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>사용하는 방법은 아래와 같습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fib <span class=\"token operator\">=</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>blockCpuFor1Sec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result: '</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>위 코드는 hikaMaeng님의 블로그와 MDN을 참조했습니다.</li>\n</ul>\n<p>위 함수에는 약간의 문제점이 있습니다.\n바로 subroutine을 호출 할 수 없다는 것입니다.</p>\n<p>위의 구현대로는 subroutine을 호출 하는 경우 rejected 되고 마는데요,\n이유는 생성된 worker thread에서 subroutine의 존재를 알 수 없기 때문입니다.</p>\n<p>message로 넘겨준 것은 단일 함수이므로 scope가 서로 다른 worker는 넘겨받은 함수만을 이해할 뿐,\n다른 객체에 대한 것을 알 수 없습니다.</p>\n<p>따라서 아래와 같이 수정해줍니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">/**\n * \n * @param {Function} f\n * @param {Function[]} fs  \n * @returns \n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">process</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>fs<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> isOkWorker <span class=\"token operator\">=</span> Blob <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">URL</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span>createObjectURL<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isOkWorker<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> meta <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">onmessage = ({data}) => {\n      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">[</span>fs<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> // subroutine 함수를 함께 넘겨주고 여기서 함수는 thread memory heap에 올라감\n      return postMessage((</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>f<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)(data))\n    };</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token keyword\">const</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>meta<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/javascript'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> worker<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onError</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">rej</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> worker<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">rej</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res<span class=\"token punctuation\">,</span> rej</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span>rej<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      worker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>사용 방법도 함께 알아보겠습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">caller</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">callee</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">callee</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ca <span class=\"token operator\">=</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>caller<span class=\"token punctuation\">,</span> callee<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> awaitedCa <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">ca</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"🚀 ~ file: main.js:22 ~ main ~ awaitedCa:\"</span><span class=\"token punctuation\">,</span> awaitedCa<span class=\"token punctuation\">)</span> <span class=\"token comment\">// hi</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>여기서 재밌는 점은 caller와 callee 내부에 log를 찍어도 보여지지 않는다는 것인데요,\nlog는 생성 및 분리된 스코프인 thread 스코프에서 실행되므로,\nmain에서는 해당 출력을 확인 할 수 없습니다.</p>\n<p>아쉽게도, 위 코드에서 다시 한가지 문제점을 더 발견 할 수 있습니다.</p>\n<p>인자가 1개 이상인 함수의 경우 <strong>변수 meta</strong>는 <strong>worker thread에서 실행 할 함수의 첫 인자에만\n데이터를 넣어준다는 것입니다.</strong></p>\n<p>merge sort를 예로 들면, 아래와 같은 함수를 thread에서 실행 할 때,\n위의 코드로는 left인자에만 값을 넣어주게 됩니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span></code></pre>\n<p>이를 수정해보도록 하겠습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">/**\n * \n * @param {Function} f \n * @param {Function[]} fs \n * @returns \n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">process</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>fs<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> isOkWorker <span class=\"token operator\">=</span> Blob <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">URL</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span>createObjectURL<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isOkWorker<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> meta <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">onmessage = (all) => {\n      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">[</span>fs<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n      return postMessage((</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>f<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)(...all.data)) // thread에서 실행될 함수에 rest parameter로 값을 넘겨줌\n    };</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token keyword\">const</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>meta<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/javascript'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> worker<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onError</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">rej</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> worker<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">rej</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res<span class=\"token punctuation\">,</span> rej</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span>rej<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      worker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위 처럼 수정하게 되면 인자를 여러개 받는 함수의 경우에도 실행이 가능하게 됩니다.</p>\n<p>마지막으로 mergeSort를 각 thread에 task를 분배, 정렬하도록 작성해봤습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// merge-sort.js</span>\n<span class=\"token comment\">/**\n * \n * @param {number[]} array \n * @returns \n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> pivotIndex <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pivotIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>pivotIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * \n * @param {number[]} left \n * @param {number[]} right \n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> leftIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> rightIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>leftIndex <span class=\"token operator\">&lt;</span> left<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> rightIndex <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">[</span>leftIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">[</span>rightIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">[</span>leftIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      leftIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">[</span>rightIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      rightIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>leftIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>rightIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// process.js</span>\n<span class=\"token comment\">/**\n * \n * @param {Function} f \n * @param {Function[]} fs \n * @returns \n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">process</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>fs<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> isOkWorker <span class=\"token operator\">=</span> Blob <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">URL</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span>createObjectURL<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isOkWorker<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> meta <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">onmessage = (all) => {\n      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">[</span>fs<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n      return postMessage((</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>f<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)(...all.data))\n    };</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token keyword\">const</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>meta<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/javascript'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> worker<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onError</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">rej</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> worker<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">rej</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res<span class=\"token punctuation\">,</span> rej</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span>rej<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      worker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// main.js</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> arrLeft <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> arrRight <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> thread1 <span class=\"token operator\">=</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>mergeSort<span class=\"token punctuation\">,</span> merge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> thread2 <span class=\"token operator\">=</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>mergeSort<span class=\"token punctuation\">,</span> merge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>resultLeft<span class=\"token punctuation\">,</span> resultRight<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">thread1</span><span class=\"token punctuation\">(</span>arrLeft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">thread2</span><span class=\"token punctuation\">(</span>arrRight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> thread3 <span class=\"token operator\">=</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>merge<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">thread3</span><span class=\"token punctuation\">(</span>resultLeft<span class=\"token punctuation\">,</span> resultRight<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"🚀 ~ file: main.js:15 ~ main ~ result:\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>테스트를 하지 않을 수가 없네요,</p>\n<p>일반 mergeSort와 thread 2개를 사용한 mergeSort로 비교해보겠습니다.</p>\n<p>thread를 사용하는 경우 main thread를 block하지 않는 다는 점도 주요하게 볼 대목입니다만\n속도도 함께 봐주세요</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> process <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./thread.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> mergeSort<span class=\"token punctuation\">,</span> merge <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./mergeSort.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createRandomArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">size</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Push a random integer into the array</span>\n    <span class=\"token comment\">// For example, if you want numbers between 0 and 999</span>\n    array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> number <span class=\"token operator\">=</span> <span class=\"token number\">10000000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> bigArray <span class=\"token operator\">=</span> <span class=\"token function\">createRandomArray</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> pivot <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> arrLeft <span class=\"token operator\">=</span> bigArray<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pivot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> arrRight <span class=\"token operator\">=</span> bigArray<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>pivot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> thread1 <span class=\"token operator\">=</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>mergeSort<span class=\"token punctuation\">,</span> merge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> thread2 <span class=\"token operator\">=</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>mergeSort<span class=\"token punctuation\">,</span> merge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>resultLeft<span class=\"token punctuation\">,</span> resultRight<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">thread1</span><span class=\"token punctuation\">(</span>arrLeft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">thread2</span><span class=\"token punctuation\">(</span>arrRight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>resultLeft<span class=\"token punctuation\">,</span> resultRight<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>bigArray<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">// <span class=\"token number\">10000000</span> 랜덤 숫자 배열의 길이\ndefault: <span class=\"token number\">2555.906982421875</span> ms // with worker thread\ndefault: <span class=\"token number\">3578.2060546875</span> ms // with main thread</code></pre>\n<p>mergeSort는 특히나 정렬하는 그 특유의 방식 덕분에 thread에 일감을 나눠주기 편한데요.\n반을 나누어준 다음 가각의 thread를 통해 정렬, 결과값을 마지막에 merge만 해주면 되기 때문입니다.</p>\n<p>thread를 browser의 idle 타임에 생성해두고\npool에 저장하고 사용한다면 worker를 생성하는 비용과 시간을 대폭 줄일 수 있습니다.\n자바스크립트를 싱글스레드로만 사용하기엔 너무 아깝다고 생각합니다.</p>\n<p>다음은 pool을 사용하고,\nshared memory를 사용하는 등의 글을 작성해보겠습니다.</p>\n<p>이상으로 긴 글 봐주셔서 감사합니다.</p>\n",
			"date_published": "2023-11-08T12:38:10Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/impl-postfix-javascript/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/impl-postfix-javascript/",
			"title": "postfix, infix, prefix를 알아보고 postfix js로 구현하기",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"postfix\" tabindex=\"-1\">postfix 연산이란? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/impl-postfix-javascript/\">#</a></h1>\n<p>postfix 연산은 후위 표기연산입니다.</p>\n<p>익숙한 중위 표기법을 먼저 확인합니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span> <span class=\"token comment\">// 23</span></code></pre>\n<p>postfix(후위 표기법)을 확인합니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token operator\">+</span></code></pre>\n<p>위 방식의 계산은 연산자와 피연산자인 숫자를\n각각의 스택에 넣어둔다고 생각하면 됩니다.</p>\n<p>아래와 같은 흐름을 따르게 됩니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> n1 <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n<span class=\"token keyword\">const</span> n2 <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n<span class=\"token keyword\">const</span> o1 <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span><span class=\"token string\">'*'</span><span class=\"token operator\">:</span> \n        s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">*</span> n2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [20]</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token operator\">:</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"postfix-1\" tabindex=\"-1\">postfix를 만들기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/impl-postfix-javascript/\">#</a></h2>\n<p><code>3 * 2 + 3</code>을 infix라고 부릅니다.\n물론 infix, postfix 모두 존재합니다.</p>\n<p>prefix는 clojure의 바로 그 것입니다.\n<code>+ * 3 2 3</code> 이렇게 작성 할 수 있습니다.</p>\n<p>postfix로 변환하면\n<code>3 2 * 3 +</code> 이렇습니다.</p>\n<p>이제 순서대로 괄호를 활용해서 이해 가능하게 변환하는 방법을 알아보겠습니다.</p>\n<h3 id=\"prefix\" tabindex=\"-1\">prefix 변환해보기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/impl-postfix-javascript/\">#</a></h3>\n<ol>\n<li><code>3 * 2 + 3</code>을 연산자와 피연산자의 관계로 치환해보겠습니다.\n<ul>\n<li><code>(피연산자 연산자 피연산자 연산자 피연산자)</code></li>\n<li>prefix는 <code>(연산자, 피연산자, 피연산자)</code> 쌍으로 묶이며 한 연산을 이룹니다.</li>\n</ul>\n</li>\n<li>연산자와 피연산자를 다시 값으로 치환합니다.\n<ul>\n<li><code>(3 * 2) -&gt; (* 3 2)</code> 이 때, (* 3 2)는 다시 연산자가 됩니다.</li>\n<li><code>(+ (* 3 2) 3)</code></li>\n</ul>\n</li>\n<li>괄호를 제거해줍니다.\n<ul>\n<li><code>+ * 3 2 3</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"postfix-2\" tabindex=\"-1\">postfix 변환해보기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/impl-postfix-javascript/\">#</a></h3>\n<ol>\n<li><code>3 * 2 + 3</code>을 연산자와 피연산자의 관계로 치환해보겠습니다.\n<ul>\n<li><code>(피연산자 연산자 피연산자 연산자 피연산자)</code></li>\n<li>postfix는 <code>(피연산자, 피연산자, 연산자)</code> 쌍으로 묶이며 한 연산을 이룹니다.</li>\n</ul>\n</li>\n<li>연산자와 피연산자를 다시 값으로 치환합니다.\n<ul>\n<li><code>(3 * 2) -&gt; (3 2 *)</code></li>\n<li><code>((3 2 *) 3 +)</code></li>\n</ul>\n</li>\n<li>괄호를 제거해줍니다.\n<ul>\n<li><code>3 2 * 3 +</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"\" tabindex=\"-1\">되돌리기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/impl-postfix-javascript/\">#</a></h3>\n<ol>\n<li><code>+ * 3 2 3</code></li>\n<li><code>(+ (* 3 2) 3)</code></li>\n<li><code>(+ (3 * 2) 3)</code></li>\n<li><code>((3 * 2) +  3)</code></li>\n<li><code>3 * 2 +  3</code></li>\n</ol>\n<h2 id=\"-1\" tabindex=\"-1\">구현해보기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/impl-postfix-javascript/\">#</a></h2>\n<p>구현은 input으로 &quot;3 - 4 * 7&quot;을 입력 받았을 때,\npostfix 형식으로 &quot;347*-&quot;를 반환하는 함수,\n이를 계산하는 -25로 계산하는 함수를 만들어 보겠습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">InfixToPostfix</span> <span class=\"token punctuation\">{</span>\n  #precedence <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"+\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"-\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"*\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"/\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">expression</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>expression <span class=\"token operator\">=</span> expression<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">isOperator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">token</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"+-*/\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">higherPrecedence</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oper1<span class=\"token punctuation\">,</span> oper2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#precedence<span class=\"token punctuation\">[</span>oper1<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#precedence<span class=\"token punctuation\">[</span>oper2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">translatePostfix</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">expression</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>expression<span class=\"token punctuation\">)</span> expression <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>expression<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> tokens <span class=\"token operator\">=</span> expression<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\d+|[+\\-*/]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    tokens<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">token</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOperator</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>\n          stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token comment\">// opertator의 스택에 아무것도 없다면 연산자 우선순위를 계산 할 필요가 없음</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">higherPrecedence</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token <span class=\"token operator\">===</span> <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token <span class=\"token operator\">===</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> stack<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> output<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>translatePostfix 함수는 expression을 받습니다.</p>\n<p>정규식을 통해 숫자와 사칙연산을 나누어 스택에 저장합니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// d = decimal, [+\\-*/]</span>\n<span class=\"token string\">'3 + 4'</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\d+|[+\\-*/]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['3', '+', '4']</span></code></pre>\n<p>나누어진 중위표현식을 하나의 char 형식으로 변환 및 배열에 담았으니\n이를 순회하면서 연산식과 피연산자로 나누겠습니다.</p>\n<p>연산식은 stack에 추가하고,\n피연산자인 숫자는 output에 추가합니다.</p>\n<p>괄호가 있는 경우는 else if로 따로 처리해줍니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">    tokens<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">token</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOperator</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>\n          stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token comment\">// opertator의 스택에 아무것도 없다면 연산자 우선순위를 계산 할 필요가 없음</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">higherPrecedence</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token <span class=\"token operator\">===</span> <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token <span class=\"token operator\">===</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> stack<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> output<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>아래의 분기는\n현재 token이 operator이면서,</p>\n<ul>\n<li>stack이 0 보다 큰 경우: operator를 담아두는 stack 배열에 또 다른 연산자가 있으면서</li>\n<li>stack의 top과 연산자 우선순위를 비교해서 top이 더 우선순위가 높을 경우\n피연산자 stack에 연산자 top을 pop해서 넣고, 우선순위가 더 낮은 연산자를 stack에 밀어넣는다.</li>\n</ul>\n<p>예를 들어 347*-를 만들기 위해서는\n3 - 4 * 7을 해독하는데\n문자열 순서상 - 연산자가 먼저 stack에 들어가 있을 수 밖에 없습니다.</p>\n<p>-와 *의 우선순위는 *가 더 높으므로,\nhigherPrecedence의 값이 false로 나오게 됩니다.</p>\n<p>stack에는 [-, *]순으로 쌓이게 되는데 어차피 stack은 pop으로 값을\n꺼내기 때문에 이는 올바른 순서가 됩니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOperator</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>\n          stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token comment\">// opertator의 스택에 아무것도 없다면 연산자 우선순위를 계산 할 필요가 없음</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">higherPrecedence</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span></code></pre>\n<p>반대의 경우를 생각해보겠습니다.\n*연산자가 먼저 stack에 들어와있는 경우 - 연산자가 나중에 들어오려고 할 때,\npop으로 값을 꺼내는 stack에서 이는 곤란한 경우입니다.\n(연산자의 순서가 바뀌므로)</p>\n<p>따라서 피연산자의 스택인 output에 연산자 top을 pop하고 그 값을\n피연산자 스택에 밀어넣습니다.</p>\n<p><code>3 * 4 - 7</code>을 예로 들면</p>\n<pre><code>[*] &lt;-- [-] // *을 pop하고 stack에 push\n[3, 4]\n</code></pre>\n<pre><code>[-] \n[3, 4, *]\n</code></pre>\n<p>위와 같은 형태가 됩니다.</p>\n<p>연산 순서를 변경했으므로 연산하는 함수를 작성하면 끝입니다.\n<code>evaluatePostfix</code> 메소드가 바로 그 함수입니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">InfixToPostfix</span> <span class=\"token punctuation\">{</span>\n  #precedence <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"+\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"-\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"*\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"/\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">expression</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>expression <span class=\"token operator\">=</span> expression<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">isOperator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">token</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"+-*/\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">higherPrecedence</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oper1<span class=\"token punctuation\">,</span> oper2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#precedence<span class=\"token punctuation\">[</span>oper1<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#precedence<span class=\"token punctuation\">[</span>oper2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">translatePostfix</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">expression</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">evaluatePostfix</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">postfix</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> tokens <span class=\"token operator\">=</span> postfix<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> cases <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string-property property\">\"+\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oper1<span class=\"token punctuation\">,</span> oper2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>oper1 <span class=\"token operator\">+</span> oper2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">\"-\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oper1<span class=\"token punctuation\">,</span> oper2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>oper1 <span class=\"token operator\">-</span> oper2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">\"*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oper1<span class=\"token punctuation\">,</span> oper2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>oper1 <span class=\"token operator\">*</span> oper2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">\"/\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oper1<span class=\"token punctuation\">,</span> oper2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>oper1 <span class=\"token operator\">/</span> oper2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    tokens<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">token</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOperator</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> oper2 <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> oper1 <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cases<span class=\"token punctuation\">[</span>token<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>oper1<span class=\"token punctuation\">,</span> oper2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>인자인 postfix는 <code>3 2 +</code>처럼 space를 구분자로 들어온 문자열이기 때문에\nsplit으로 나눠주면 다시 char 배열이 됩니다. <code>['2', '3', '+']</code></p>\n<p>나눠진 token들을 순회하며 숫자인 경우 피연산자, 아닌 경우 연산자이므로\n연산자들을 stack에 쌓아줍니다.</p>\n<p>postfix 스택을 인덱스 0부터 꺼내오므로 피연산자, 피연산자, 연산자 순으로 꺼내게 되는데\n연산자를 꺼냈을 때, stack을 pop하면서 계산하고 다시 stack에 밀어 넣어줍니다.</p>\n<p>연산이 모두 끝나고 남은 값은 마지막 계산 값이 되므로 stack[0]을 꺼내주면 끝입니다.</p>\n",
			"date_published": "2023-11-05T21:09:26Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/gof-flyweight-pattern/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/gof-flyweight-pattern/",
			"title": "gof flyweight pattern",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"flyweight-pattern\" tabindex=\"-1\">flyweight pattern이란? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/gof-flyweight-pattern/\">#</a></h1>\n<p>flyweight 패턴은 객체들 간에 중복되는 내부 상태를 공유하여 메모리를 절약하는 디자인 패턴입니다.</p>\n<h2 id=\"\" tabindex=\"-1\">예시 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/gof-flyweight-pattern/\">#</a></h2>\n<p>강아지와 강아지의 DNA를 통해 flyweight pattern을 예로 들어보겠습니다.</p>\n<p>강아지 객체는 강아지 클래스를 통해 생성합니다.</p>\n<p>강아지 클래스는 이름, 나이, 종, dna를 입력받아 강아지 객체를 생성해줍니다.\ndna는 메모리를 너무 많이 사용하므로 이를 강아지의 종마다 같은 dna를 사용하도록 공유하고 싶습니다.\n(실제 dna는 물론 강아지마다 다릅니다.)</p>\n<h3 id=\"-1\" tabindex=\"-1\">다이어그램 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/gof-flyweight-pattern/\">#</a></h3>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\nclassDiagram\n  class DogDNA {\n    +constructor(dna)\n    -dna\n  }\n\n  class Dog {\n    +constructor(name, age, breed, dna)\n    -name\n    -age\n    -breed\n    -dna\n  }\n\n  class DogFactory {\n    +dnaCache\n    +getDNA(breed)\n    +createDog(name, age, breed)\n  }\n\n  DogFactory ..> DogDNA: Uses\n  DogFactory --> Dog: Creates\n  Dog --> DogDNA: Contains\n</div>\n<p>DogDNA의 메모리 사용을 줄이기 위해\n사용 될 DNA를 강아지 객체 생성 전에 미리 값을 넣어줍시다.</p>\n<p>구현 방식에 따라 다르지만 dna가 없는 경우 에러를 던져주거나\ndna를 강아지 객체를 생성할 때 받아서 cache에 추가를 해주는 방법도 있습니다.</p>\n<h3 id=\"-2\" tabindex=\"-1\">구현 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/gof-flyweight-pattern/\">#</a></h3>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DogDNA</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>dna<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dna <span class=\"token operator\">=</span> dna<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> breed<span class=\"token punctuation\">,</span> dna<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>breed <span class=\"token operator\">=</span> breed<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dna <span class=\"token operator\">=</span> dna<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DogFactory</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> dnaCache <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">getDNA</span><span class=\"token punctuation\">(</span>breed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dnaCache<span class=\"token punctuation\">[</span>breed<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Runtime error: Breed DNA not found.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dnaCache<span class=\"token punctuation\">[</span>breed<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">createDog</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> breed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> dna <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDNA</span><span class=\"token punctuation\">(</span>breed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> breed<span class=\"token punctuation\">,</span> dna<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> bulldog <span class=\"token operator\">=</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">5500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> chihuahua <span class=\"token operator\">=</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">5500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> poodle <span class=\"token operator\">=</span> <span class=\"token string\">\"p\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">5500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nDogFactory<span class=\"token punctuation\">.</span>dnaCache<span class=\"token punctuation\">[</span><span class=\"token string\">\"Bulldog\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DogDNA</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcBulldog\"</span> <span class=\"token operator\">+</span> bulldog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nDogFactory<span class=\"token punctuation\">.</span>dnaCache<span class=\"token punctuation\">[</span><span class=\"token string\">\"Poodle\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DogDNA</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcPoodle\"</span> <span class=\"token operator\">+</span> poodle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nDogFactory<span class=\"token punctuation\">.</span>dnaCache<span class=\"token punctuation\">[</span><span class=\"token string\">\"Chihuahua\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DogDNA</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcChihuahua\"</span> <span class=\"token operator\">+</span> chihuahua<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token function\">memoryUsage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>heapUsed<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> dog1 <span class=\"token operator\">=</span> DogFactory<span class=\"token punctuation\">.</span><span class=\"token function\">createDog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jojo\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bulldog\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dog2 <span class=\"token operator\">=</span> DogFactory<span class=\"token punctuation\">.</span><span class=\"token function\">createDog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jotaro\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Chihuahua\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dog3 <span class=\"token operator\">=</span> DogFactory<span class=\"token punctuation\">.</span><span class=\"token function\">createDog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"popo\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Poodle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dog4 <span class=\"token operator\">=</span> DogFactory<span class=\"token punctuation\">.</span><span class=\"token function\">createDog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jomallon\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bulldog\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dog5 <span class=\"token operator\">=</span> DogFactory<span class=\"token punctuation\">.</span><span class=\"token function\">createDog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dodo\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Chihuahua\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dog6 <span class=\"token operator\">=</span> DogFactory<span class=\"token punctuation\">.</span><span class=\"token function\">createDog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fodo\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Chihuahua\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dog7 <span class=\"token operator\">=</span> DogFactory<span class=\"token punctuation\">.</span><span class=\"token function\">createDog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"podo\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Chihuahua\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> s2 <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token function\">memoryUsage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>heapUsed<span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">flyweight: memory used: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>s2<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>s<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>s2 <span class=\"token operator\">-</span> s<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> bytes</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>이렇게 사용하는 경우 dnaCache에 적재된 메모리를 가리키므로,\n각 객체별로 메모리를 사용하는 구현보다 메모리의 사용이 낮아집니다.</p>\n<p>차이를 확인하기 위해 아래와 같이 일반적으로 객체가 각 속성의 메모리를 전부\n사용하는 코드를 작성해봅시다.</p>\n<h3 id=\"normal-version\" tabindex=\"-1\">normal version <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/gof-flyweight-pattern/\">#</a></h3>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> breed<span class=\"token punctuation\">,</span> dna</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>breed <span class=\"token operator\">=</span> breed<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dna <span class=\"token operator\">=</span> dna<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> bulldog <span class=\"token operator\">=</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">5500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> chihuahua <span class=\"token operator\">=</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">5500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> poodle <span class=\"token operator\">=</span> <span class=\"token string\">\"p\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">5500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token function\">memoryUsage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>heapUsed<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> dog1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jojo\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bulldog\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abcBulldog\"</span> <span class=\"token operator\">+</span> bulldog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dog2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jotaro\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Chihuahua\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abcChihuahua\"</span> <span class=\"token operator\">+</span> chihuahua<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dog3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"popo\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Poodle\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abcPoodle\"</span> <span class=\"token operator\">+</span> poodle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dog4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jomallon\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bulldog\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abcBulldog\"</span> <span class=\"token operator\">+</span> bulldog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dog5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toto\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bulldog\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abcBulldog\"</span> <span class=\"token operator\">+</span> bulldog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dog6 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foto\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bulldog\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abcBulldog\"</span> <span class=\"token operator\">+</span> bulldog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dog7 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"podo\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bulldog\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abcBulldog\"</span> <span class=\"token operator\">+</span> bulldog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> s2 <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token function\">memoryUsage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>heapUsed<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">normal: memory used: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>s2<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>s<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>s2 <span class=\"token operator\">-</span> s<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> bytes</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"-3\" tabindex=\"-1\">차이점 확인하기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/gof-flyweight-pattern/\">#</a></h3>\n<h4 id=\"normal-version-1\" tabindex=\"-1\">normal version의 메모리 사용률 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/gof-flyweight-pattern/\">#</a></h4>\n<p>실험 결과: normal: memory used: 2692936 - 2689816: 3120 bytes</p>\n<h4 id=\"flyweight-version\" tabindex=\"-1\">flyweight version의 메모리 사용률 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/gof-flyweight-pattern/\">#</a></h4>\n<p>실험 결과: flyweight: memory used: 2695256 - 2692360: 2896 bytes</p>\n<p>여기서 주의 할 점은 flyweight의 경우 구현을 위해 클래스 객체를 더 많이 생성합니다.\n따라서 클래스를 생성하고 힙 메모리에 저장하는 자바스크립트 특성상 기본적인 메모리 사용량이 더 높습니다.</p>\n",
			"date_published": "2023-11-04T22:12:39Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-diagram-5/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-diagram-5/",
			"title": "UML class diagram 5 관계 정리 / 확장 스테레오 타입",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">관계들 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-diagram-5/\">#</a></h1>\n<ul>\n<li>\n<p>관계들</p>\n<ul>\n<li>연관관계: Association</li>\n<li>의존관계: Dependency</li>\n<li>일반화관계: Generalization</li>\n<li>실체화관계: Realization</li>\n<li>포함/합성관계: Composition</li>\n<li>집합/집약 관계: Aggregation</li>\n</ul>\n</li>\n<li>\n<p>확장 스테레오 타입들</p>\n<ul>\n<li><code>&lt;&lt;include&gt;&gt;</code></li>\n<li><code>&lt;&lt;extend&gt;&gt;</code></li>\n<li><code>&lt;&lt;interface&gt;&gt;</code></li>\n<li><code>&lt;&lt;entity&gt;&gt;</code></li>\n<li><code>&lt;&lt;boundary&gt;&gt;</code></li>\n<li><code>&lt;&lt;control&gt;&gt;</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"association\" tabindex=\"-1\">연관관계: Association <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-diagram-5/\">#</a></h2>\n<p>house instance가 person instance를 내부적으로 사용하는 경우</p>\n<p>diagram을 보면 house는 countPerson으로 person의 수를 반환하고 있다</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\nclassDiagram\n\nclass House {\n    - person:Person\n}\nclass Person {\n    + name: String\n}\n\nHouse --> Person\n</div>\n<h2 id=\"dependency\" tabindex=\"-1\">의존관계: Dependency <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-diagram-5/\">#</a></h2>\n<p>Calculator 클래스는 Parameters 클래스를 사용하고\n의존하고 있습니다.</p>\n<ul>\n<li>Parameters 클래스는 Calculator에 대해 알지 못합니다.</li>\n</ul>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\nclassDiagram\n\nclass Calculator {\n    sum(int a, int b)int\n}\nclass Parameters {\n    + a: int\n    + b: int\n}\n\n Calculator ..> Parameters\n</div>\n<h2 id=\"generalization\" tabindex=\"-1\">일반화 관계: Generalization <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-diagram-5/\">#</a></h2>\n<p>일반적인 class 상속으로 부모, 자식간의 관계입니다.\nextends를 했다고 보면 되겠습니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\nclassDiagram\n\nclass Animal {\n    -life:int\n    +name: String\n}\n\nclass Dog {\n    run()\n}\n\nclass Cat {\n    jump()\n}\n\nAnimal <|-- Dog\nAnimal <|-- Cat\n</div>\n<h2 id=\"realization\" tabindex=\"-1\">실체화 관계: Realization <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-diagram-5/\">#</a></h2>\n<p>john은 person 클래스를 구현한 concrete 구현체입니다.\ninterface만을 상속했기 때문에 implements했음을 알 수 있습니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\nclassDiagram\ndirection RL\n\n  class Person {\n    interface\n    -idCard : IdCard\n  }\n\n  class John {\n    +name: john\n  }\n\n Person <|.. John:implements\n</div>\n<h2 id=\"realization-1\" tabindex=\"-1\">포함/합성 관계: Realization <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-diagram-5/\">#</a></h2>\n<p>포함관계는 상위 객체가 소멸되면 하위 객체도 모두 소멸되며\n하위 객체는 상위 객체의 부분이 되어진다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\nclassDiagram\n\nclass Desk {\n    price: int\n}\nclass DeskLegs {\n    countOfLegs: int\n}\n\nclass DeskChair {\n    wheels: int\n}\n\nDesk *--> DeskLegs\nDesk *--> DeskChair\n</div>\n<h2 id=\"aggregation\" tabindex=\"-1\">집합/집약 관계: Aggregation <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-diagram-5/\">#</a></h2>\n<p>집합/집약관계는 포함관계와는 다르게 생명주기를 함께하지 않는다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\nclassDiagram\n\nclass Computer {\n    boot():void\n}\n\nclass Mouse {\n    movePointer()[int, int]\n}\n\nclass Keyboard {\n    typeChars(char: String)void\n}\n\nComputer o--> Mouse\nComputer o--> Keyboard\n</div>\n<h2 id=\"-1\" tabindex=\"-1\">확장 스테레오 타입 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-diagram-5/\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>요소 유형</th>\n<th>확장 스테레오 타입</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>관계</td>\n<td>«include»</td>\n<td>한 유스케이스에서 다른 유스케이스를 포함하며 항상 실행됨을 나타냅니다.</td>\n</tr>\n<tr>\n<td></td>\n<td>«extend»</td>\n<td>기본 유스케이스를 확장하며 특정 조건에서만 실행됨을 나타냅니다.</td>\n</tr>\n<tr>\n<td>클래스</td>\n<td>«interface»</td>\n<td>클래스가 특정 작업과 메서드를 정의하는 추상 클래스를 구현해야 함을 나타냅니다.</td>\n</tr>\n<tr>\n<td></td>\n<td>«entity»</td>\n<td>데이터나 정보를 나타내는 클래스로, 주로 데이터베이스와 관려이거나 핵심 데이터 구조를 표현합니다.</td>\n</tr>\n<tr>\n<td></td>\n<td>«boundary»</td>\n<td>시스템과 외부 요소 간의 상호 작용을 나타내는 클래스로, 사용자 인터페이스와 관련됩니다.</td>\n</tr>\n<tr>\n<td></td>\n<td>«control»</td>\n<td>시스템 내부의 제어 논리나 프로세스를 나타내는 클래스로, 시스템의 흐름과 논리를 조정하고 관리합니다.</td>\n</tr>\n</tbody>\n</table>\n",
			"date_published": "2023-10-31T22:31:23Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-diagram-4/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-diagram-4/",
			"title": "UML class diagram 4 Cardinality",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"class-diagram-4-cardinality\" tabindex=\"-1\">class diagram 4 Cardinality <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-diagram-4/\">#</a></h1>\n<p><strong>Cardinality</strong>란 수학용어로 집합에서 집합 내 원소의 개수 또는 크기를 나타내는 개념입니다.</p>\n<p>class diagram에서는 이를 class간의 연결 할 수 있는 한 클래스의 인스턴스 수를 나타냅니다.</p>\n<p>예를 들자면 회사에서 0명이 아닌 한 명 이상의 직원이 있고,\n직원은 0개 또는 하나 이상의 회사에서 근무합니다.</p>\n<p>Cardinality는 연결의 끝 부분에 표시됩니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\nclassDiagram\n\n손님 \"1\" --> \"*\" 놀이공원\n회사원 \"1\" --> \"1..*\" 직장\n출산율 \"0.7x\" --> 저출산 사회\n</div>\n<p>이로써 간단하게 cardinality에 대해 알아봤습니다.</p>\n",
			"date_published": "2023-10-30T23:45:25Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-3/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-3/",
			"title": "UML class diagram 3 Relationship",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"class-diagram-3\" tabindex=\"-1\">class diagram 3 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-3/\">#</a></h1>\n<p>안녕하세요,</p>\n<p><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-2/\">지난번의 포스트</a>에 이어</p>\n<p>상관 관계(Relationship)에 대해 더 알아보겠습니다.</p>\n<h2 id=\"relationship\" tabindex=\"-1\">Relationship <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-3/\">#</a></h2>\n<p>class diagram에는 여러 상관 관계가 존재합니다.</p>\n<p>이번에도 하나씩 예를 들어가며 확인해보겠습니다.</p>\n<h2 id=\"inheritance\" tabindex=\"-1\">Inheritance 상속 관계 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-3/\">#</a></h2>\n<p>인간 클래스와 인간 클래스를 상속받는 직장인 클래스를 생성해보겠습니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\nclassDiagram\n\nclass 인간 {\n    +int 나이\n    +int 성별\n}\n\nclass 직장인 {\n    +String 월급 통장 은행\n    +String 알뜰 교통 카드번호\n}\n\n인간 <|-- 직장인\n</div>\n<p>직장인 클래스는 인간 클래스를 상속받는 관계입니다.</p>\n<h2 id=\"association-generalization\" tabindex=\"-1\">Association / Generalization (연관 / 일반화) 관계 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-3/\">#</a></h2>\n<p>연관 관계는 시스템 내에서 서로 다른 객체가 연결되어 있는 구조적 관계를 나타냅니다.</p>\n<p>연관 관계는 두 가지로 다시 분류됩니다.</p>\n<ol>\n<li>Reflexive Association</li>\n</ol>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\nclassDiagram\n\n채소 -- 양파:+instance\n채소 -- 가지:+instance\n채소 -- 토마토:+instance\n</div>\n<p>양파와 가지, 토마토는 채소 클래스에 속합니다.\n위에서 본 Inheritance와 비슷한 역할을 수행합니다.</p>\n<ol start=\"2\">\n<li>Directed Association</li>\n</ol>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\nclassDiagram\n\n직장인 --> 회사\n</div>\n<p>참조하는 쪽과 참조 당하는 쪽을 강조합니다.\n직장인은 회사를 위해 일합니다.\n회사는 직장인을 위해 일해주지 않습니다.</p>\n<h2 id=\"aggregation\" tabindex=\"-1\">Aggregation 집합 연관 관계 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-3/\">#</a></h2>\n<p>집합 연관 관계는 클래스간의 부분과 전체의 관계입니다.\n전체는 부분을 소유하는 개념을 강하게 의미합니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\nclassDiagram\n\n자전거 o-- 바퀴\n자전거 o-- 안장\n자전거 o-- 핸들\n</div>\n<h2 id=\"composition\" tabindex=\"-1\">Composition 합성(복합) 연관 관계 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-3/\">#</a></h2>\n<p>복합 관계는 집합 연관 관계와 같으나,\n전체가 삭제될 경우 부분도 함께 사라지는 것을 의미합니다.</p>\n<p>위의 예를 들어 전체 클래스인 자전거가 삭제될 경우,\n바퀴는 남아도 상관 없는 것입니다.</p>\n<p>부분과 전체를 이루는 관계는 무엇이 있을까요?\nJVM이나 v8 engine의 런타임을 예로 들어보겠습니다.</p>\n<p>둘 다 모두 성능 좋은 GC를 달고 있습니다.</p>\n<p>VM 환경이 사라지면 GC도 함께 사라지게 됩니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\nclassDiagram\n\nJVM *-- JVM_GC\nV8 *-- V8_GC\n</div>\n<ul>\n<li>마름모꼴이 칠해져 있어 더 강하게 엮여있다고 생각하면 좋겠습니다.</li>\n</ul>\n<h2 id=\"dependency\" tabindex=\"-1\">Dependency 의존 관계 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-3/\">#</a></h2>\n<p>한 클래스의 변화가 다른 클래스에 영향을 미치는 관계입니다.</p>\n<p>위의 예를 그대로 의존 관계로도 설명해보겠습니다.</p>\n<p>GC의 설정을 최대한 안좋게 변경하면 각각의 VM은 낮은 퍼포먼스를 보이게됩니다.\nGC를 변경했지만 VM도 영향을 받는 상황입니다.</p>\n<p>이렇게 같은 class에서 다른 의존 관계를 작성하는 것도 가능합니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\nclassDiagram\n\nJVM <.. JVM_GC\nV8 <.. V8_GC\n</div>\n<h2 id=\"realization\" tabindex=\"-1\">Realization 실체화 관계 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-3/\">#</a></h2>\n<p>클래스가 인터페이스를 실체화(구현)하는 관계를 나타냅니다.\n클래스가 인터페이스에서 정의된 메서드를 구현하는 경우 사용됩니다.</p>\n<p>자동차 인터페이스를 만들고 이를 실체화하는 concrete class를 생성하는 것이\n바로 인터페이스와 실체화의 관계입니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\nclassDiagram\n\nclass 인간 {\n    +int age\n}\n\n\nclass 한국인 {\n    빠른 년생 계산하기(나이)\n}\n\n 인간 <|.. 한국인\n</div>\n<h2 id=\"\" tabindex=\"-1\">정리하기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-3/\">#</a></h2>\n<p>많은 diagram의 관계를 나타내는 표현법을 확인했습니다.\n상황에 맞게 사용하면 되며 strict하게 나누긴 어렵다는 것도 알게 되었습니다.</p>\n<p>애매모호한 경우 정의를 확실하게 해주거나 정의를 하지 않고 연관 관계를 나타내는 정도로만\n사용하는 것이 좋겠습니다.</p>\n<p>다음엔 cardinality에 대해 알아보도록 하겠습니다.</p>\n<p>감사합니다.</p>\n",
			"date_published": "2023-10-30T22:25:46Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-2/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-2/",
			"title": "UML class diagram 2",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"class-diagram-2\" tabindex=\"-1\">class diagram 2 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-2/\">#</a></h1>\n<p>안녕하세요,</p>\n<p><a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-1/\">지난번의 포스트</a>에 이어 이번에도 하나의 클래스를 생성하고\n이를 확장해가며 class diagram을 알아보는 시간을 가지겠습니다.</p>\n<h2 id=\"class-diagram\" tabindex=\"-1\">class diagram의 관계 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-2/\">#</a></h2>\n<p>class diagram은 여러 객체간의 관계를 나타내는데 특화되어 있습니다.</p>\n<p>아래 한 개발자 클래스를 생성해봤습니다.\n그런데 개발자 혼자 뭘 할 수 있을까요?</p>\n<p>사업 아이템도 없고, 플랜도 없습니다.\n(아래의 type들은 본인이 사용하는 언어의 타입에 맞게 사용해도 상관 없습니다.)</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\nclassDiagram\n\nclass 개발자 {\n    +String 이름\n    -int 나이\n    +String work(커피)code\n}\n</div>\n<p>함께 일을 할 수 있는 환경을 조성하기 위해 동료(상사)를 추가해보겠습니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\nclassDiagram\n\nclass 개발자 {\n    +String 이름\n    -int 나이\n    +String work(커피)code\n}\n\nclass PM {\n    +String 이름\n    -int 나이\n    +String work(커피)제품 요구 사항 정의서 작성\n    }\n</div>\n<p>PM 친구를 추가했습니다만 곧바로 중복이 거슬립니다.\n중복을 제거 할 겸 인간 class를 추가해보겠습니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\nclassDiagram\n\nclass 인간 {\n    +String 이름\n    -int 나이\n}\n\nclass 개발자 {\n    +String work(커피)code\n}\n\nclass PM {\n    +String work(커피)PRD 작성\n    }\n\n인간 <-- 개발자\n인간 <-- PM\n</div>\n<p>이제 좀 마음이 편안해졌습니다.\n여기서 중요한 점이 하나 더 있습니다.\n화살표를 받고 있는 인간은 개발자와 PM을 모릅니다.</p>\n<p>참조하는 측만 그 사실을 알면 됩니다.\n이를 <strong>단방향 연관 관계</strong>라고 합니다.</p>\n<p>개발자와 PM은 함께 일하는 동료입니다. 둘 사이는 확실히 관계가 성립합니다.\n이를 표기해보겠습니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\nclassDiagram\n\nclass 개발자 {\n    +String work(커피)code\n}\n\nclass PM {\n    +String work(커피)PRD 작성\n    }\n\n개발자 <--> PM\n</div>\n<p>개발자와 PM의 관계를 보면 둘 모두 화살표 머리를 달고 있습니다.</p>\n<p>이를 <strong>양방향 연관 관계</strong>라고 표현합니다.\n둘 모두 서로의 존재를 알고 있습니다.</p>\n<p>연관 관계를 연결하긴 했지만 둘이 어떤 관계인지 명시하고 싶을 경우\n아래와 같이 작성할 수 있습니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\nclassDiagram\n\nclass 개발자 {\n    +String work(커피)code\n}\n\nclass PM {\n    +String work(커피)PRD 작성\n    }\n\n개발자 <--> PM: 직장 동료\n</div>\n<p>둘은 직장 동료 관계임이 명확해졌습니다.</p>\n<h2 id=\"\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-2/\">#</a></h2>\n<p>이번엔 class diagram이 서로 상관 관계를 이루는 것에 대해 알아봤습니다.\n다음엔 더 다양한 상관 관계 (Relationship)에 대해 알아보겠습니다.</p>\n",
			"date_published": "2023-10-30T21:55:26Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-1/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-1/",
			"title": "UML class diagram 1",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"class-diagram\" tabindex=\"-1\">class diagram <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-1/\">#</a></h1>\n<p>mermaid를 통해 class diagram을 그려보겠습니다.</p>\n<p>보통 OOP를 표현하면서도 class diagram을 많이 사용합니다.\n아래 class diagram을 보면 말하고자 하는 관계가 한눈에 파악되어 전달력이 뛰어난 것을 알 수 있습니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\nclassDiagram\n\n동물 <-- 인간\n동물 <-- 고릴라\n동물 <-- 참새\n동물 <-- 강아지\n</div>\n<h2 id=\"class\" tabindex=\"-1\">class에 대해 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-1/\">#</a></h2>\n<p>animal class를 만들며 class에 대해 알아보겠습니다.\n우선 아래와 같이 animal class를 선언 할 수 있습니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\nclassDiagram\n\nclass Animal\n</div>\n<h3 id=\"class-1\" tabindex=\"-1\">class에 속성 부여하기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-1/\">#</a></h3>\n<p>animal class에 여러 속성을 부여하겠습니다.</p>\n<p>이름과 다리의 갯수,\n바다에 사는지 육지에 사는지를 가리는 boolean 값을 추가 할 수 있습니다.\nproperty가 가지는 type을 정의해줄 수 있습니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\nclassDiagram\n\nclass Animal\nAnimal: +String name\nAnimal: +int feet\nAnimal: +Bool isLiveInOcean\n</div>\n<h3 id=\"class-2\" tabindex=\"-1\">class에 메서드 부여하기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-1/\">#</a></h3>\n<p>class에는 method가 있을 수 있습니다.\nmethod는 인자와 반환값을 지정 할 수 있습니다.\n반환값을 지정하지 않을 수도 있습니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\nclassDiagram\n\nclass Animal {\n +String name\n +int feet\n +Bool isLiveInOcean\n +breath(air)carbon dioxide\n +run()\n}\n</div>\n<h3 id=\"property-method-type\" tabindex=\"-1\">property와 method의 type에 대해 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-1/\">#</a></h3>\n<p>OOP를 배우다보면 캡슐화와 안전한 api를 만들기 위한 방법으로 제공되는 것이\n접근 제어(visibility)입니다.</p>\n<table>\n<thead>\n<tr>\n<th>접근 제어자</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>+ Public (Public)</strong></td>\n<td>어떤 클래스에서도 접근할 수 있음. 다른 클래스에서 해당 멤버(속성 또는 메서드)에 대한 접근이 허용됨.</td>\n</tr>\n<tr>\n<td><strong>- Private (Private)</strong></td>\n<td>선언된 클래스 내에서만 접근할 수 있음. 다른 클래스에서는 해당 멤버에 접근할 수 없음.</td>\n</tr>\n<tr>\n<td><strong># Protected (Protected)</strong></td>\n<td>선언된 클래스와 그 하위 클래스에서 접근할 수 있음. 다른 클래스에서는 접근이 허용되지 않음.</td>\n</tr>\n<tr>\n<td><strong>~ Package (Package)</strong></td>\n<td>동일 패키지 내에서만 접근할 수 있음. 다른 패키지의 클래스에서는 접근이 불가능하며, 명시적인 접근 제어자를 지정하지 않았을 때의 기본값.</td>\n</tr>\n</tbody>\n</table>\n<p>지금까지 만든 class에 접근 제어자를 변경해보도록 하겠습니다.</p>\n<p>단일 class만 가지고 있어서는 해당 기능은 의미가 없습니다만, 여러 클래스가 연관 관계를 가지게 되면서\n접근을 제어하게되면 강력한 힘을 발휘하게 됩니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\nclassDiagram\n\nclass Animal {\n +String name\n -int feet\n #Bool isLiveInOcean\n ~breath(air)carbon dioxide\n +run()\n}\n</div>\n<p>class diagram의 <strong>class</strong>에 대해 알아봤습니다.\n<a href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/UML-class-digram-2/\">다음은 class가 서로 상호작용하는 </a>class diagram에 대해 알아보겠습니다.</p>\n",
			"date_published": "2023-10-29T19:43:07Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/FSM-Decision-Table-ER-Modeling-State-Chart-Use-Case/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/FSM-Decision-Table-ER-Modeling-State-Chart-Use-Case/",
			"title": "비정형 명세 FSM Decision Table, ER Modeling, State Chart, Use Case",
			"content_html": "<br>\n<br>\n<br>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>FSM (Finite State Machine)</th>\n<th>Decision Table</th>\n<th>ER 모델링 (Entity-Relationship Modeling)</th>\n<th>State Chart (SADT - Structured Analysis and Design Technique)</th>\n<th>Use Case</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>목적</td>\n<td>상태 및 상태 전이 모델링, 자동화된 시스템 동작</td>\n<td>조건과 동작 간 관계 모델링</td>\n<td>데이터 모델링 및 엔터티 간 관계 모델링</td>\n<td>시스템 상태 및 동작 모델링, 구조화된 분석 및 설계</td>\n<td>시스템의 기능적 요구 사항 모델링</td>\n</tr>\n<tr>\n<td>중점</td>\n<td>상태 및 상태 전이, 상태 다이어그램</td>\n<td>조건 및 동작의 효과적 관리</td>\n<td>데이터 및 관계 정의, 데이터 독립성</td>\n<td>상태 다이어그램 및 프로세스 모델링</td>\n<td>사용자의 요구 사항과 시스템의 상호 작용</td>\n</tr>\n<tr>\n<td>모델링 방식</td>\n<td>상태 다이어그램, 상태 전이 표</td>\n<td>참과 거짓 조건에 기반한 표 형태</td>\n<td>엔터티, 속성, 관계 다이어그램</td>\n<td>상태 다이어그램 및 프로세스 모델</td>\n<td>사용 사례 다이어그램</td>\n</tr>\n<tr>\n<td>응용 분야</td>\n<td>제어 시스템, 소프트웨어 동작 모델링</td>\n<td>조건부 로직 및 결정 기반 시스템</td>\n<td>데이터베이스 설계, 정보 시스템 모델링</td>\n<td>비즈니스 프로세스 모델링, 시스템 설계</td>\n<td>소프트웨어 요구 사항 정의, 사용자 시나리오 모델링</td>\n</tr>\n</tbody>\n</table>\n",
			"date_published": "2023-10-26T23:24:15Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/CSP-CCS-LOTOS-Z-VDM-Petri/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/CSP-CCS-LOTOS-Z-VDM-Petri/",
			"title": "정형 명세 CSP, CCS, LOTOS, Z, VDM, Petri-Net",
			"content_html": "<br>\n<br>\n<br>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>CSP</th>\n<th>CCS</th>\n<th>LOTOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>목적</td>\n<td>분산 및 병렬 시스템 모델링</td>\n<td>분산 시스템 모델링 및 통신 기반 시스템</td>\n<td>시스템 명세와 형식적인 분석</td>\n</tr>\n<tr>\n<td>중점</td>\n<td>병렬성, 통신, 및 병행성</td>\n<td>프로세스 간 통신과 상호 작용</td>\n<td>시간 및 동시성 모델링</td>\n</tr>\n<tr>\n<td>모델링 방식</td>\n<td>이벤트 기반</td>\n<td>동작 계산</td>\n<td>이벤트 시퀀스</td>\n</tr>\n<tr>\n<td>응용 분야</td>\n<td>분산 시스템, 병행 프로그래밍</td>\n<td>통신 프로토콜, 분산 시스템</td>\n<td>통신 프로토콜, 분산 시스템</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Z</th>\n<th>VDM (Vienna Development Method)</th>\n<th>Petri-Net</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>목적</td>\n<td>소프트웨어 명세, 형식적 분석</td>\n<td>소프트웨어 명세, 설계, 검증</td>\n<td>병렬 및 분산 시스템 모델링</td>\n</tr>\n<tr>\n<td>중점</td>\n<td>수학적 명세, 명확한 사양</td>\n<td>함수형 및 객체 지향 프로그래밍</td>\n<td>상태 및 이벤트 기반 모델링</td>\n</tr>\n<tr>\n<td>모델링 방식</td>\n<td>수학적 명세 기반</td>\n<td>고수준 프로그래밍 언어</td>\n<td>그래픽 네트워크</td>\n</tr>\n<tr>\n<td>응용 분야</td>\n<td>형식적 소프트웨어 개발, 요구 사항 분석</td>\n<td>소프트웨어 개발 및 검증</td>\n<td>제조 및 공정 시스템, 프로세스 모델링</td>\n</tr>\n</tbody>\n</table>\n",
			"date_published": "2023-10-26T23:18:07Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/DDL-DML-DCL/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/DDL-DML-DCL/",
			"title": "DDL DML DCL",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"ddl-data-definition-language\" tabindex=\"-1\">DDL (Data Definition Language) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/DDL-DML-DCL/\">#</a></h2>\n<p>데이터베이스를 정의하는 언어,</p>\n<p>데이터를 생성, 수정, 삭제하는 등 전체의 구조를 결정하는 역할을 하는 언어\n예를 들어 아래의 명령어들입니다.</p>\n<ul>\n<li>CREATE TABLE (생성)</li>\n<li>ALTER TABLE (수정)</li>\n<li>DROP TABLE (삭제)</li>\n</ul>\n<h2 id=\"dml-data-manipulation-language\" tabindex=\"-1\">DML (Data Manipulation Language) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/DDL-DML-DCL/\">#</a></h2>\n<p>정의된 데이터베이스에 입력된 레코드를 조회, 수정, 삭제하는 등의 역할을 하는 언어</p>\n<p>예를 들어 아래의 명령어들이 DML에 해당합니다.</p>\n<ul>\n<li>SELECT</li>\n<li>INSERT</li>\n<li>UPDATE</li>\n<li>DELETE</li>\n</ul>\n<h2 id=\"dcl-data-control-language\" tabindex=\"-1\">DCL (Data Control Language) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/DDL-DML-DCL/\">#</a></h2>\n<p>접근 권한과 보안등을 다룹니다.</p>\n<p>예를 들면 아래의 명령어들이 DML에 해당합니다.</p>\n<ul>\n<li>GRANT</li>\n<li>REVOKE</li>\n</ul>\n<p>모두 구분 없이 사용하다가 이제보니 오 그렇네 하는 느낌이 옵니다.</p>\n<ul>\n<li>DML의 예제</li>\n</ul>\n<pre class=\"language-sql\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> users <span class=\"token keyword\">WHERE</span> age <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> users <span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'john doe'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>DDL의 예제</li>\n</ul>\n<pre class=\"language-sql\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> users <span class=\"token punctuation\">(</span>id <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span> age <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span> name <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> stores <span class=\"token keyword\">ADD</span> <span class=\"token keyword\">COLUMN</span> location_number <span class=\"token keyword\">INT</span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>DCL의 예제</li>\n</ul>\n<pre class=\"language-sql\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">ON</span> table_name <span class=\"token keyword\">TO</span> username<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">ON</span> table_name <span class=\"token keyword\">FROM</span> username<span class=\"token punctuation\">;</span></code></pre>\n",
			"date_published": "2023-10-26T21:54:45Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/OSI-7-Layer/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/OSI-7-Layer/",
			"title": "OSI 7 Layer",
			"content_html": "<br>\n<br>\n<br>\n<p>OSI (Open Systems Interconnection) 모델은 컴퓨터 네트워크와 통신 시스템에서 통신 과정을 이해하고 설명하기 위한 표준 모델입니다.</p>\n<table>\n<thead>\n<tr>\n<th>계층 번호</th>\n<th>계층 이름</th>\n<th>기능 및 설명</th>\n<th>예제 프로토콜 및 응용 프로그램</th>\n<th>이미지</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>7</td>\n<td>응용 (Application)</td>\n<td>사용자와 컴퓨터 응용 프로그램 간의 통신을 지원합니다. 이메일, 웹 브라우징, 파일 전송 등의 응용 프로그램을 포함합니다.</td>\n<td>HTTP, HTTPS, FTP, SSH</td>\n<td><img width=\"160\" alt=\"image\" src=\"https://github.com/zerozoo-a/zerozoo-a.github.io/assets/80259925/497e73fa-5291-4104-906b-5f144ebe85fd\"></td>\n</tr>\n<tr>\n<td>6</td>\n<td>표현 (Presentation)</td>\n<td>데이터를 응용 프로그램과 하위 계층 간에 변환, 압축 및 암호화합니다. 다른 시스템과의 데이터 형식 및 암호화를 처리합니다.</td>\n<td>MIME, SMTP, IMAP, SSL</td>\n<td><img width=\"160\" alt=\"image\" src=\"https://github.com/zerozoo-a/zerozoo-a.github.io/assets/80259925/2069d394-7a47-4f0a-84f8-261afe307ab4\"></td>\n</tr>\n<tr>\n<td>5</td>\n<td>세션 (Session)</td>\n<td>세션 관리 및 다중 통신 파트너 간의 대화를 설정, 유지 및 종료합니다. 통신 파트너 간의 동기화 및 오류 복구를 담당합니다.</td>\n<td>NetBIOS, RPC, WinSock, SMB</td>\n<td><img width=\"160\" alt=\"image\" src=\"https://github.com/zerozoo-a/zerozoo-a.github.io/assets/80259925/1b131b1e-7b86-43a7-a2d9-2ba8f3b602d3\"></td>\n</tr>\n<tr>\n<td>4</td>\n<td><a href=\"https://www.cloudflare.com/ko-kr/learning/ddos/glossary/user-datagram-protocol-udp/\" target=\"_blank\">전송 (Transport)</a></td>\n<td>데이터 전송의 흐름 및 오류 제어를 관리합니다. 데이터를 분할하고 재조립하여 종단 간 통신을 보장하며 신뢰성 있는 전송을 담당합니다.</td>\n<td>TCP, UDP</td>\n<td>null</td>\n</tr>\n<tr>\n<td>3</td>\n<td><a href=\"https://www.cloudflare.com/ko-kr/learning/network-layer/what-is-igmp/\" target=\"_blank\">네트워크 (Network)</a></td>\n<td>패킷 라우팅 및 전송을 관리합니다. 논리 주소 지정, <strong>라우팅</strong> 및 서비스 품질 관리를 수행하여 네트워크 간 통신을 처리합니다.</td>\n<td>ARP, IGMP, ICMP</td>\n<td>null</td>\n</tr>\n<tr>\n<td>2</td>\n<td>데이터 링크 (Data Link)</td>\n<td>두 시스템 사이에서 오류 없이 데이터를 전송하기 위해 상위 계층에서 받은 비트 열의 데이터로 하위 계층으로 전송하는 계층</td>\n<td>Ethernet, PPP, HDLC, Wi-Fi</td>\n<td>nil</td>\n</tr>\n<tr>\n<td>1</td>\n<td>물리 (Physical)</td>\n<td>계층을 타고 내려온 데이터를 전기적 신호로 변환시켜 통신하는 계층</td>\n<td></td>\n<td><img width=\"160\" alt=\"image\" src=\"https://github.com/zerozoo-a/zerozoo-a.github.io/assets/80259925/a1a5687d-7b27-4ccd-b3e2-af656cf8f836\"></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
			"date_published": "2023-10-26T20:59:07Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/lan-man-wan/",
			"url": "https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/lan-man-wan/",
			"title": "LAN MAN WAN",
			"content_html": "<br>\n<br>\n<br>\n<p>LAN = Local Address Network 근거리 통신망</p>\n<p>다음은 LAN (Local Area Network), WAN (Wide Area Network), 및 MAN (Metropolitan Area Network)의 간단한 설명과 Markdown으로 표로 나타낸 정보입니다:</p>\n<table>\n<thead>\n<tr>\n<th>구분</th>\n<th>LAN (Local Area Network)</th>\n<th>WAN (Wide Area Network)</th>\n<th>MAN (Metropolitan Area Network)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>범위</td>\n<td>작은 지리적 지역 내</td>\n<td>넓은 지리적 지역 간</td>\n<td>도시 또는 도시 근처 지역</td>\n</tr>\n<tr>\n<td>예시 장치 및 용도</td>\n<td>가정, 사무실, 학교 등</td>\n<td>글로벌 인터넷 연결</td>\n<td>도시 내 통신 및 데이터 전송</td>\n</tr>\n<tr>\n<td>전송 속도</td>\n<td>고속 또는 저속 가능</td>\n<td>주로 높은 전송 속도</td>\n<td>주로 중간 전송 속도</td>\n</tr>\n<tr>\n<td>프로토콜 및 기술</td>\n<td>이더넷, Wi-Fi 등</td>\n<td>인터넷 프로토콜 사용</td>\n<td>광섬유, DSL, 무선 기술 등</td>\n</tr>\n<tr>\n<td>소유 및 관리</td>\n<td>개별 조직 또는 개인 소유</td>\n<td>서비스 제공 업체 소유</td>\n<td>도시 또는 지방 정부 또는 제3자 소유</td>\n</tr>\n<tr>\n<td>연결 및 확장성</td>\n<td>상대적으로 쉽게 확장 가능</td>\n<td>광범위한 연결 필요</td>\n<td>도시 내 네트워크 확장 가능</td>\n</tr>\n<tr>\n<td>모델</td>\n<td>이더넷(Ethernet), 무선랜</td>\n<td>DQDB(Distributed Queue Dual Bus)</td>\n<td>전용선, 회선 교환, 패킷 교환, 메시지 교환</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"dqdb\" tabindex=\"-1\">DQDB <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/Engineer-Information-Processing/network/lan-man-wan/\">#</a></h2>\n<ul>\n<li>출처: ktword.co.kr</li>\n</ul>\n<ol>\n<li>DQDB</li>\n</ol>\n<p>ㅇ 고속 방송망이며, 도시와 같은 공중영역(MAN) 또는 한 기관에서 LAN을 상호 연결하기 위해\n개발된 것으로 1990년 IEEE 802.6으로 표준화됨</p>\n<p>ㅇ IEEE 802 위원회에서는 MAN용 표준으로 DQDB 방식으로 채택한바 있음</p>\n<ol start=\"2\">\n<li>DQDB 방식 특징</li>\n</ol>\n<p>ㅇ 대상서비스 : 데이터 (음성과 영상 제공)\nㅇ 교환방식 : 패킷교환\nㅇ 엑세스제어방식 : 분산 큐 엑세스\nㅇ 전송매체 : 광섬유 (동축, 무선도 가능)\nㅇ 변조방식 : 기저대역 (Baseband)\nㅇ 버스구조 : 이중 버스구조\nㅇ 제공서비스 : 연결성, 비연결성, 등시성 서비스\nㅇ 프로토콜 계층 : OSI 7계층모델에서 물리계층 및 데이타링크 계층에 해당\nㅇ 전송방식 : 셀 릴레이 전송</p>\n",
			"date_published": "2023-10-26T20:46:44Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/erros/db/QueryFailedError-Duplicate-key-name/",
			"url": "https://zerozoo-a.github.io/blog/erros/db/QueryFailedError-Duplicate-key-name/",
			"title": "QueryFailedError Duplicate key name",
			"content_html": "<br>\n<br>\n<br>\n<p>table을 생성하던 도중 아래와 같은 에러를 마주했습니다.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">ERROR <span class=\"token punctuation\">[</span>TypeOrmModule<span class=\"token punctuation\">]</span> Unable to connect to the database. Retrying <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">..</span>.\nQueryFailedError: Duplicate key name <span class=\"token string\">'IDX_97672ac88f789774dd47f7c8be'</span></code></pre>\n<p>indexing을 위해 entity를 변경하다 발생했는데요,</p>\n<p>예시와 함께 보겠습니다.</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Unique</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Users</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PrimaryGeneratedColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'int'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Index</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// err</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'varchar'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'email'</span><span class=\"token punctuation\">,</span> length<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> unique<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// err</span>\n  email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>위 예시에서 문제되는 부분은 email입니다.\nemail은 indexing을 위해 index decorator를 붙여놓은 상태입니다.\n게다가 추가적으로 unique로 설정해두었는데요,</p>\n<p>이 부분에서 에러가 발생합니다.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">Error: Duplicate key name <span class=\"token string\">'IDX_97672ac88f789774dd47f7c8be'</span>\nquery: ROLLBACK\n<span class=\"token punctuation\">[</span>Nest<span class=\"token punctuation\">]</span> <span class=\"token number\">74850</span>  - <span class=\"token number\">10</span>/12/2023, <span class=\"token number\">11</span>:05:58 PM   ERROR <span class=\"token punctuation\">[</span>TypeOrmModule<span class=\"token punctuation\">]</span> Unable to connect to the database. Retrying <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">..</span>.</code></pre>\n<p>index decorator를 설정하기 위해서는 아래와 같이 고쳐주세요</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Unique</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Users</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PrimaryGeneratedColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'int'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Index</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> unique<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'varchar'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'email'</span><span class=\"token punctuation\">,</span> length<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n",
			"date_published": "2023-10-12T22:50:05Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/erros/db/Error-Code:-1175-SQL-Editor-and-reconnect.Cannot-delete-or-update-a-parent-row:-a-foreign-key/",
			"url": "https://zerozoo-a.github.io/blog/erros/db/Error-Code:-1175-SQL-Editor-and-reconnect.Cannot-delete-or-update-a-parent-row:-a-foreign-key/",
			"title": "Error Code 1175 SQL Editor and reconnect.",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"error-code-1175\" tabindex=\"-1\">Error code 1175 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/erros/db/Error-Code:-1175-SQL-Editor-and-reconnect.Cannot-delete-or-update-a-parent-row:-a-foreign-key/\">#</a></h2>\n<p>Error Code: 1175. You are using safe update mode and you tried to update a table without a WHERE that uses a KEY column. To disable safe mode, toggle the option in Preferences -&gt; SQL Editor and reconnect.</p>\n<p>오류 코드: 1175. 안전 업데이트 모드를 사용하고 있으며 KEY 열을 사용하는 WHERE 없이 테이블을 업데이트하려고 했습니다. 안전 모드를 비활성화하려면 환경 설정 -&gt; SQL 편집기에서 옵션을 전환하고 다시 연결하세요.</p>\n<p>mysql workbench에서 해당 토글을 켜고 끄는 방법을 알아봅시다.</p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/eJv8yCN0Sn-1200.webp\" width=\"100%\" height=\"auto\" alt=\"example\" loading=\"lazy\" decoding=\"async\"></div>\n1. 우측 상단의 톱니바퀴를 눌러주세요\n2. 화살표로 표시 된 SQL Editor 메뉴를 눌러주세요\n3. Safe updates toggle을 눌러주세요\n",
			"date_published": "2023-10-11T22:26:41Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/erros/db/Cannot-delete-or-update-a-parent-row:-a-foreign-key/",
			"url": "https://zerozoo-a.github.io/blog/erros/db/Cannot-delete-or-update-a-parent-row:-a-foreign-key/",
			"title": "Cannot delete or update a parent row a foreign key",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"\" tabindex=\"-1\">문제 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/erros/db/Cannot-delete-or-update-a-parent-row:-a-foreign-key/\">#</a></h2>\n<p>`Cannot delete or update a parent row: a foreign key``</p>\n<p>table의 row를 지우려고 하는 경우 위 에러가 발생 할 수 있다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">원인 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/erros/db/Cannot-delete-or-update-a-parent-row:-a-foreign-key/\">#</a></h2>\n<p>연결된 fk가 있기 때문에 지울 수 없다는 것입니다.\n따라서 지우려는 연결된 테이블의 데이터를 먼저 지워주세요</p>\n",
			"date_published": "2023-10-11T22:21:53Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JS/server/nest/using-dto-in-nest-js/",
			"url": "https://zerozoo-a.github.io/blog/JS/server/nest/using-dto-in-nest-js/",
			"title": "dto를 nest.js에서 사용하기",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"dto\" tabindex=\"-1\">dto란? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/server/nest/using-dto-in-nest-js/\">#</a></h2>\n<p>data transfer object</p>\n<p>dto는 data를 전달 할 때 사용되는 object입니다.</p>\n<h2 id=\"\" tabindex=\"-1\">어디에 사용하나요? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/server/nest/using-dto-in-nest-js/\">#</a></h2>\n<p>data를 전송할 때 사용하면 됩니다.\n이번엔 nest.js에서 dto를 통해 client와 통신하고</p>\n<p>validate까지 이어서 진행하겠습니다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">설치 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/server/nest/using-dto-in-nest-js/\">#</a></h2>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">    <span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> class-transformer class-validator</code></pre>\n<p>package manager를 통해 라이브러리를 설치합니다.</p>\n<h2 id=\"-2\" tabindex=\"-1\">설정 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/server/nest/using-dto-in-nest-js/\">#</a></h2>\n<p>설정에 대한 자세한 내용은 <a href=\"https://docs.nestjs.com/techniques/validation#auto-validation\">\nnest.js</a>에서 확인 할 수 있습니다.</p>\n<p>(아래 설정은 모든 controller에 validation pipe를 연결하겠다는 표현입니다.)</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> NestFactory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>AppModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">useGlobalPipes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ValidationPipe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// auto validation을 위해 추가해주세요</span>\n\n  <span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">5050</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> whitelist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'http://localhost:3000'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"-3\" tabindex=\"-1\">사용하기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/server/nest/using-dto-in-nest-js/\">#</a></h2>\n<ul>\n<li>dto 클래스를 생성하고 decorator를 붙여줍니다.</li>\n</ul>\n<pre><code>class-validator는 typescript를 사용하는 많은 유저들에게\n많은 사용되고 있고 nest.js의 decorator와도 궁합이 좋아 오래도록 \nnest.js에서 사용되어 왔습니다.\n</code></pre>\n<h3 id=\"dto-1\" tabindex=\"-1\">dto 파일 생성 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/server/nest/using-dto-in-nest-js/\">#</a></h3>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token comment\">// src/dtos/createUser.dto.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> IsEmail<span class=\"token punctuation\">,</span> IsNotEmpty <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'class-validator'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CreateUserDto</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">IsEmail</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">IsNotEmpty</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">IsNotEmpty</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위 코드를 보면 실 데이터가 빈 클래스를 생성했습니다.\ntypescript를 사용한다면 위와 비슷한 interface를 선언하면 비슷한 역할을 할 수 있다고 생각 할 수 있습니다만,\ntypescript의 interface는 metadata를 생성하지 않고 js로 compile시 결국 사라지게 됩니다.</p>\n<p>따라서 runtime에 값을 검사하기 위해선 실제 메모리로 저장되어지는 클래스를 선언해주어야 합니다.</p>\n<p>같은 맥락으로 위 클래스를 import 할 때, type으로 import 하지 말아주세요\n결국 runtime에 사라지게 되므로 pipe라인을 통과하지 않고 그냥 값이 들어오게 됩니다.</p>\n<h3 id=\"controller\" tabindex=\"-1\">controller에서 사용하기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/server/nest/using-dto-in-nest-js/\">#</a></h3>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token operator\">...</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Post</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'/createHouseUser'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">createHouseUser</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Body</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> createUserDto<span class=\"token operator\">:</span> CreateUserDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hi<span class=\"token operator\">:</span> <span class=\"token string\">'done'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span></code></pre>\n<p>이렇게 인자를 선언하고 type을 지정해주는 것만으로\n이미 validate 함수가 실행됩니다.\n(decorator에 의해 실행되어짐)</p>\n<p>dto로 인해 보다 방어적인 코드 작성이 가능해졌습니다.</p>\n<p>request 객체의 createUserDto 값이 위에서 선언한 DTO에 적합하지 않다면\ncontroller는 자동적으로 생성된 에러 메시지를 반환합니다.</p>\n<p>(email 형식이 잘못되었다면 email에 대한 에러 메시지를 반환함)</p>\n<h3 id=\"client\" tabindex=\"-1\">client 단에서 요청하기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/server/nest/using-dto-in-nest-js/\">#</a></h3>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\">  <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">your_cool_api/createHouseUser</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n      body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">,</span>\n        email<span class=\"token punctuation\">,</span>\n        password<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"-4\" tabindex=\"-1\">정리하기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/server/nest/using-dto-in-nest-js/\">#</a></h2>\n<ul>\n<li>library를 설치합니다.</li>\n<li>config를 설정합니다.</li>\n<li>dto class 파일을 생성합니다.</li>\n<li>controller에서 입력으로 들어오는 입력의 타입을 Dto로 입력해줍니다.(입력이 들어올 때 validate pipe를 지나오게 되어 입력을 걸러줌)</li>\n<li>client에서 적당한 option과 함께 요청을 넣어줍시다.</li>\n</ul>\n",
			"date_published": "2023-10-11T00:43:30Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JS/play-with-generator/",
			"url": "https://zerozoo-a.github.io/blog/JS/play-with-generator/",
			"title": "iterator를 사용해서 main thread 점유 우회하기",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"iterator-a-b\" tabindex=\"-1\">iterator를 통해 a, b 상호 재귀 함수를 만들어보자 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/play-with-generator/\">#</a></h2>\n<p>generator를 사용해서 함수 a, b를 서로 호출 할 수 있도록\n코드를 작성해봤다.</p>\n<p>a는 함수 b를\n함수 b는 함수 a를 호출합니다.</p>\n<p>iterator a, b가 서로 인자 count를 넘기면서 연산을 이어나갑니다.</p>\n<p>함수 a, b가 서로를 호출하므로 상호재귀 꼴이되는데요\n무한히 호출하므로 stack overflow가 나지 않도록 base case를 추가해줘야 합니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">b<span class=\"token punctuation\">,</span> count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in a'</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> count<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in b'</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> count<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"🚀 ~ file: index.js:15 ~ main ~ start:\"</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">in</span> a <span class=\"token number\">6</span>\n <span class=\"token keyword\">in</span> b <span class=\"token number\">5</span>\n <span class=\"token keyword\">in</span> a <span class=\"token number\">4</span>\n <span class=\"token keyword\">in</span> b <span class=\"token number\">3</span>\n <span class=\"token keyword\">in</span> a <span class=\"token number\">2</span>\n <span class=\"token keyword\">in</span> b <span class=\"token number\">1</span>\n <span class=\"token keyword\">in</span> a <span class=\"token number\">0</span>\n\n🚀 <span class=\"token operator\">~</span> file<span class=\"token operator\">:</span> index<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">15</span> <span class=\"token operator\">~</span> main <span class=\"token operator\">~</span> start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"main-thread-iterator-function\" tabindex=\"-1\">main thread에서 iterator function 으로 또 그 반대로, <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/play-with-generator/\">#</a></h2>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">gene</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">max<span class=\"token punctuation\">,</span>load<span class=\"token punctuation\">,</span>block</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> curr <span class=\"token operator\">=</span> load<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curr<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">block</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      curr <span class=\"token operator\">=</span> load<span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">yield</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">nbFor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>maxLoadBlock</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">gene</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>maxLoadBlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>done <span class=\"token operator\">||</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">nbFor</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> hi<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위 코드는 setTimeout을 통해 iterator가 인자로 받은\n함수를 실행하다가 제한으로 둔 조건문에 의해 yield 되어\nwhile 문과 함수 자체를 모두 빠져나옵니다.</p>\n<p>함수는 main thread에게 다시 flow를 건네주는 모양이 됩니다.</p>\n<p>정확히는 main thread가 iterator 함수를 실행하다가,\n멈추고,\n다시 iterator 함수 다음을 실행시키다가,\nsetTimeout에 의해 iterator가 다시 실행되는 모양이 됩니다.</p>\n<p>따라서 iterator 함수가 main thread를 계속 점유하지 않고\n서로 양보하면서 실행하게 됩니다.</p>\n<p>이 모양을 concurrent(실제로는 아니지만) 하다고 할 수 있습니다.</p>\n<p>위 코드에 대한 설명은 유튜브의 코드 스피츠를 기반으로 작성되었습니다.</p>\n",
			"date_published": "2023-10-10T21:59:42Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/[coin-change]basic-greedy-with-dp/",
			"url": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/[coin-change]basic-greedy-with-dp/",
			"title": "basic greedy 거스름돈 문제와 dp 풀이",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"\" tabindex=\"-1\">전개 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/ALGORITHMS/[coin-change]basic-greedy-with-dp/\">#</a></h2>\n<p>가게에서 점원은 손님에게 거스름돈을 거슬러줘야 한다.\n거스름돈은 동전으로 거슬러 줄 수 있다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">조건 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/ALGORITHMS/[coin-change]basic-greedy-with-dp/\">#</a></h2>\n<ul>\n<li>거스름돈의 동전의 개수는 최소한이 되도록 거슬러 주어야 한다.</li>\n<li>500, 100, 50, 10원 짜리 동전이 무수히 존재하고 N원을 거슬러 준다.</li>\n<li>n(거스름돈)은 항상 10의 배수이다.</li>\n</ul>\n<h2 id=\"-2\" tabindex=\"-1\">예 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/ALGORITHMS/[coin-change]basic-greedy-with-dp/\">#</a></h2>\n<p>1260원을 거슬러 준다면 500 + 500 + 100 + 100 + 50 + 10을 준다.\n거스름돈이 1000원: (500 * 2)\n거스름돈이 600원: (500 * 1, 100 * 1)\n거스름돈이 300원: (100 * 3)</p>\n<h2 id=\"js\" tabindex=\"-1\">풀이 (JS) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/ALGORITHMS/[coin-change]basic-greedy-with-dp/\">#</a></h2>\n<p>나눗셈 연산에 대해 자바스크립트는 형변환이 확장되며 일어나기 때문에,\n자연수에서 실수로 확장되어버린다. 따라서 적절한 방법으로 소수점을 처리해주어야 합니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// js</span>\n<span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token number\">543534430</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> coins <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 길게 풀어쓴 버전</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>coin <span class=\"token keyword\">of</span> coins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> 코인으로_거스름돈을_나눈_몫 <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> coin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    count <span class=\"token operator\">+=</span> 코인으로_거스름돈을_나눈_몫<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> 코인으로_나눈_나머지 <span class=\"token operator\">=</span> n <span class=\"token operator\">%</span> coin<span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">=</span> 코인으로_나눈_나머지\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 짧게 줄인 버전</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>coin <span class=\"token keyword\">of</span> coins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    count <span class=\"token operator\">+=</span> <span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> coin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    n <span class=\"token operator\">%=</span> coin<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'거스름돈의 개수: '</span><span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"java\" tabindex=\"-1\">풀이 (JAVA) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/ALGORITHMS/[coin-change]basic-greedy-with-dp/\">#</a></h2>\n<p>자바에서는 int의 경우 소수점을 버리고\ndouble의 경우 소수점을 살려줍니다. (좋네요)</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token comment\">// java</span>\n<span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>example</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">543534430</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> coins <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> coin <span class=\"token operator\">:</span> coins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            count <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> coin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            n <span class=\"token operator\">%=</span> coin<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count: \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"-3\" tabindex=\"-1\">중요한 점 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/ALGORITHMS/[coin-change]basic-greedy-with-dp/\">#</a></h2>\n<p>거스름 돈 문제에선 동전의 셋이 중요합니다.</p>\n<p>동전이 500, 100, 50, 10 있을 때, 가장 큰 동전인 500원은 하위 동전의 배수입니다.\n하위 동전 100, 50, 10은 아무리 조합해도 500원 하나의 개수보다 더 적은 최적해를 만들 어 낼 수 없습니다.</p>\n<p>600원을 거슬러 준다고 했을 때, 500원을 안쓰고 100, 50, 10으로 500원 + 100원을 거슬러 주는 것 보다 더 나은 해를 구할 수 없습니다.</p>\n<p>따라서 그리디하게 접근하는 것이 정당해집니다.</p>\n<p>700원을 거슬러주는데 동전 셋이 [500원 400원 300원 100원] 이라고 합시다.\n그리디하게 접근하는 경우 [500, 100, 100]으로 총 3개가 나옵니다.\n정답은 [400, 300]으로 2개인데 말입니다.</p>\n<p>조심해서 풀거나.. 혹은 dp등 다른 방법을 사용하는 것도 좋습니다.</p>\n<p>아래는 DP를 활용한 방법입니다.</p>\n<h2 id=\"-4\" tabindex=\"-1\">풀이 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/ALGORITHMS/[coin-change]basic-greedy-with-dp/\">#</a></h2>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token comment\">// java</span>\n<span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>example</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> coins <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> amount <span class=\"token operator\">=</span> <span class=\"token number\">1240</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> memo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>amount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token function\">changeCoin</span><span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res: \"</span> <span class=\"token operator\">+</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">changeCoin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> coins<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> memo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>amount <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>amount <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 딱 떨어지면 거스름돈을 정량으로 주었다는 뜻</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">[</span>amount<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>amount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">double</span> count <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POSITIVE_INFINITY</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> coin <span class=\"token operator\">:</span> coins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> subTreeResponse <span class=\"token operator\">=</span> <span class=\"token function\">changeCoin</span><span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">,</span> amount <span class=\"token operator\">-</span> coin<span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>subTreeResponse <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\n            count <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> subTreeResponse <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">!=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POSITIVE_INFINITY</span><span class=\"token punctuation\">)</span> memo<span class=\"token punctuation\">[</span>amount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> count<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> memo<span class=\"token punctuation\">[</span>amount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>amount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>브라우저에서도 바로 테스트 할 수 있게끔 코드를 js로 작성해봤습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> coins <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> amount <span class=\"token operator\">=</span> <span class=\"token number\">1240</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> memo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>amount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">changeCoin</span><span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result: \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 8</span>\n    \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">changeCoin</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">coins<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> memo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>amount <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>amount <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">[</span>amount<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>amount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>coin <span class=\"token keyword\">of</span> coins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> subTreeResponse <span class=\"token operator\">=</span> <span class=\"token function\">changeCoin</span><span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">,</span> amount <span class=\"token operator\">-</span> coin<span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>subTreeResponse <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        count <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> subTreeResponse <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">!==</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span> memo<span class=\"token punctuation\">[</span>amount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> memo<span class=\"token punctuation\">[</span>amount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>amount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"dp\" tabindex=\"-1\">dp 풀이 설명 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/ALGORITHMS/[coin-change]basic-greedy-with-dp/\">#</a></h2>\n<p>이 잔돈문제의 dp 버전은</p>\n<p>코인 배열을 순회하면서 내부적으로 재귀호출을 한다는 점입니다.\n재귀호출을 하면서 총 거슬러 주어야 할 값인 amount - 현재 반복하고 있는 coin의 값으로\namount를 빼주면서 재귀 호출을 부릅니다.</p>\n<p>500원을 거슬러 주고 코인셋은 100원, 50원, 10원이라 합시다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> coins <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> amount <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">recur</span><span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> coin <span class=\"token operator\">:</span> coins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">recur</span><span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">,</span> amount <span class=\"token operator\">-</span> coin<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위 코드처럼 재귀호출을 하게 되면 호출된 재귀에서의 amount는 (amount - 100)된 값이 됩니다.</p>\n<p>다음 재귀에서도 coins는 loop는 새로 정의되어지므로 다시 100원부터 빼기 시작합니다.\n즉 100원으로 거슬러 줄 수 있는 모든 경우의 수를 세어가는 과정이 됩니다.</p>\n<p>이제 적당히 base case를 넣어주면 되는데요</p>\n<p>amount를 지속적으로 빼주다가 값이 0이된 순간이 거스름 돈을 정확하게 거슬러준 경우입니다.\n만약 0 미만인 경우 거스름 돈을 더 내어준 경우가 되므로 이는 -1로 반환해줍니다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> coins <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> amount <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">recur</span><span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>amount <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>amount <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> coin <span class=\"token operator\">:</span> coins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">recur</span><span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">,</span> amount <span class=\"token operator\">-</span> coin<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>amount 값을 coin의 값으로 계속 빼주는 작업을 그림을 그리면서 이해하면\n재귀트리가 된다는 사실을 알 수 있습니다.</p>\n<pre><code>amount: 3,\ncoins: {1, 2}\n</code></pre>\n<p>라고 정의한다면 위 함수대로라면 아래와 같은 개형이 만들어집니다.</p>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\ngraph TD;\n    3 -- -1 --> 2\n    2 -- -1 --> 1\n    1 -- -1 --> A[0]\n\n    1 -- -2 --> -1\n    2 -- -2 --> B[0]\n\n    3 -- -2 --> C[1]\n    C -- -1 --> D[0]\n    C -- -2 --> E[-1]\n</div>\n<p>함수가 시작되고 첫 반복문의 재귀 호출은,\n위 트리의 가장 왼쪽 노드까지 향하는 과정을 표현 한 것입니다.</p>\n<p>즉 이 방법은 cpu를 통해 모든 경우의 수를 모두 순회하는 방법입니다.</p>\n<p>하지만 greedy로는 풀 수 없는 문제를 풀 수 있습니다.\n위 방법을 조금 더 효율적으로 만들어 줄 memoization을 도입하면</p>\n<p>서브트리의 중복 연산을 피할 수 있습니다.</p>\n<div class=\"mermaid\">\ngraph TD;\n    1 -- -1 --> A[0]\n    1 -- -2 --> -1\n</div>\n<p>고작 amount 3 을 거슬러주는 문제 풀이에서도 중복이 목격됩니다.</p>\n<p>amount가 커지면 커질 수록 엄청난 중복이 발생 할 것을 쉽게 예측가능합니다.</p>\n",
			"date_published": "2023-10-06T23:52:40Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JS/binary-search-tree-with-iterator/",
			"url": "https://zerozoo-a.github.io/blog/JS/binary-search-tree-with-iterator/",
			"title": "BST와 iterator",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"bst-iterator\" tabindex=\"-1\">BST와 iterator <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/binary-search-tree-with-iterator/\">#</a></h1>\n<p>red black tree까지는 아니더라도\njs만으로도 binary search tree는 아래와 같이 구현할 수 있습니다.\n기본적인 insert method만 추가해보도록 합시다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> val<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 중복 무시됨</span></code></pre>\n<h2 id=\"inorder-preorder-postorder\" tabindex=\"-1\">inorder, preorder, postorder의 구현 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/binary-search-tree-with-iterator/\">#</a></h2>\n<p>inorder, preorder, postorder를 class 내부에 구현하면 아래와 같이 구현 가능합니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> val<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">preorder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">preorder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">preorder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">postorder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">postorder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">postorder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">preorder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"generator-iterable-order\" tabindex=\"-1\">generator 함수를 통해 iterable한 order 구현 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/binary-search-tree-with-iterator/\">#</a></h2>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> val<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">preorder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">preorder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">preorder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">postorder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">postorder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">postorder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token operator\">*</span><span class=\"token function\">gInorder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">gInorder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">gInorder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">*</span><span class=\"token function\">gPreorder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">gPreorder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">gPreorder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">*</span><span class=\"token function\">gPostorder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">gPostorder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">gPostorder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> pre <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">gPreorder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>pre<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">preorder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>generator 문법을 사용한 경우 구분을 위해 g를 붙여주었습니다.</p>\n<p>order 코드 하나만 떼어 보겠습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n  <span class=\"token operator\">*</span><span class=\"token function\">gPostorder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">gPostorder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">gPostorder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ...</span></code></pre>\n<p><em>gPostorder 함수는 iterable한 객체를 반환합니다.\n해당 객체를 next 메서드로 진행시켜주면 위 함수의 가장 첫째 줄이 실행됩니다.\nyield</em>를 통해 generator 함수 내부에서 다른 generator를 호출하는데요,\ntree의 경우 서브트리는 같은 class를 공유하므로 재귀적인 호출이 가능합니다.</p>\n<h2 id=\"\" tabindex=\"-1\">장점이 무엇일까 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/binary-search-tree-with-iterator/\">#</a></h2>\n<p>일반 postorder 함수와 다른 점은 원하는 시점에 suspend, resume을 할 수 있다는 것이죠</p>\n<p>이는 생각보다 장점이 될 수 있는데</p>\n<p>만약 트리에서 원하는 값을 찾았다고 합시다.\n그럼 더 이상 트리 순회를 지속 할 필요가 있을까요?\n이러한 장점은 Lazy evaluation을 구현한 라이브러리와 같은 이점을 가집니다.</p>\n<p>또한 자원이 한정적인 js에서의 멀티쓰레드 구현에 필수적인 요소가 됩니다. (자바스크립트로 구현하는 멀티쓰레드는 이래야 한다고 봅니다)\n원하는 시점에 main scope에게 flow를 넘기고,\nmain scope에서 연산된 값을 다시 resume하는 iterator에게 넘겨줄 수도 있습니다.\n이를 활용해서 coroutine을 구현하기도 합니다.</p>\n<p><a href=\"https://github.com/tj/co#readme\">co</a> &lt;&lt; 사용하지 않더라도 공부 목적만으로도 충분히 훌륭한 라이브러리</p>\n<p>함수형언어를 기반으로 다양한 패러다임을 수렵하고 있는 논블로킹 언어인 자바스크립트는\n이제 worker 패턴으로 thread를, cluster로 멀티 process를,\nsharedMemory로 공유되는 메모리의 접근까지(이를 위한 atomic) 언어가 확장되었습니다.</p>\n",
			"date_published": "2023-10-06T00:19:54Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JS/libs/secret-of-json/",
			"url": "https://zerozoo-a.github.io/blog/JS/libs/secret-of-json/",
			"title": "JSON.stringify의 속도 🐢",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"json-stringify\" tabindex=\"-1\">JSON.stringify가 범인..? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/libs/secret-of-json/\">#</a></h1>\n<p>node와 browser를 다루고 있는 본인은 JSON 객체를 많이도 사용합니다.</p>\n<p>브라우저와 노드 등 가리지 않고 JSON을 남발하고 있는데요.\n이 JSON.stringify가 만약 O(n)의 속도라고 한다면\n과연 쉽게 쓸 수 있을까요?</p>\n<p>요즘이야 cpu 성능이 워낙 좋아 충분히 작은 O(n)은 무시할 정도가 되었다고는 해도,</p>\n<p>JSON은 생각보다 커질 수 있다는 점을 간과해서는 안될 것입니다.</p>\n<h2 id=\"\" tabindex=\"-1\">문제점을 찾아낸 경위 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/libs/secret-of-json/\">#</a></h2>\n<p>이 블로그의 이미지들은 base64로 encode되어 제공됩니다.\nfile system을 기반으로 db없이 블로그를 운영하고 server 또한 의존하지 않을 수 있고 빌드타임에 이미 base64는 완성되어 나가므로 유저에게 이미지를 다운받게 network I/O를 발생시키지도 않습니다.</p>\n<p>그럼 완벽할까요?</p>\n<p>아닙니다. base64 이미지는 이미지를 text로 encode 해놓은 상태이므로 text가 아주 큽니다.</p>\n<p>전 해당 text를 json으로 저장해두는데요.</p>\n<p>json 파일은 블로그의 post가 쌓일수록 함께 용량이 늘어났습니다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">방법은? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/libs/secret-of-json/\">#</a></h2>\n<p>db 도입 등 여러가지를 생각해봤지만\n파일시스템을 유지하면서 기존의 로직을 크게 벗어나지 않는 방법은\njson의 encode, decode를 빠르게하면 된다는 것입니다.</p>\n<p>JSON.stringify가 실행될 때, 읽어들이고 있는 json이 될 객체의 타입을 알고 있다면,\n그렇다면 해당 객체를 string으로 변환할 때,\n보다 빠른 방법을 사용해 string으로 변환해줄 수 있지 않을까?\n라는 것이 기본 아이디어입니다.</p>\n<p>이를 잘 구현해놓은 것이</p>\n<p><a href=\"https://www.npmjs.com/package/fast-json-stringify\">npm의 fast-json-stringify입니다.</a></p>\n<h2 id=\"-2\" tabindex=\"-1\">사용 방법 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/libs/secret-of-json/\">#</a></h2>\n<p>디테일한 설정은 <a href=\"https://www.npmjs.com/package/fast-json-stringify\">링크를 통해</a>확인 가능합니다. (ajv, integer의 rounding, largeArrayMechanism 등...)</p>\n<p>우선 단순한 사용법을 알아보죠</p>\n<ol>\n<li>stringify 할 object의 schema를 작성하고,</li>\n<li>fast-json-stringify 라이브러리를 가져와 schema를 인자로 넣는다.</li>\n<li>2에서 반환된 함수로 실제 object를 넣으면 끝입니다.</li>\n</ol>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fastJson <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fast-json-stringify'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Example Schema with required field'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">properties</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">nickname</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'string'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">mail</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'string'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'mail'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">nickname</span><span class=\"token operator\">:</span> <span class=\"token string\">'zerozoo'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">mail</span><span class=\"token operator\">:</span><span class=\"token string\">'zoozooClub@sbs.com'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> stringifySchema <span class=\"token operator\">=</span> <span class=\"token function\">fastJson</span><span class=\"token punctuation\">(</span>schema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">stringifySchema</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>(*속도 밴치마크는 해당 npm 링크에 기재되어 있습니다.)</p>\n",
			"date_published": "2023-10-06T00:00:45Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JS/server/nest/nest.js-using-IOC/",
			"url": "https://zerozoo-a.github.io/blog/JS/server/nest/nest.js-using-IOC/",
			"title": "nest.js 제어의 역전 IOC",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">제어의 역전 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/server/nest/nest.js-using-IOC/\">#</a></h1>\n<p>제어의 역전은 보통 의존성을 다루는 주체가 역전된 것을 가리킵니다.</p>\n<p>의존성이란 어떤 객체가 다른 객체에 의존하는 것을 의미합니다.\n객체지향에서 이 패턴이 두드러지게 나타나는데요</p>\n<p>부모 자식간의 관계에서 자식은 부모에 의존합니다.</p>\n<p>자식 클래스는 부모 클레스에 의존하죠.</p>\n<p>부모 클래스를 extend한 자식클래스는 부모 클래스를 항상 명시해야합니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Children</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>house <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">House</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>생성자 함수 내에서 House 클래스를 생성해 사용해도 이는 의존적이라 할 수 있습니다.</p>\n<p>보통 이를 하나씩 생성하는 주체가 개발자이지만 프레임워크에 맡기는 경우\n제어가 역전되었다고 합니다.</p>\n<h2 id=\"nest-js\" tabindex=\"-1\">nest.js에서 사용하는 방법 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/server/nest/nest.js-using-IOC/\">#</a></h2>\n<p>nest에서는 <code>@Injectable</code> 데코레이터를 사용해 IOC를 구현합니다.\n해당 데코레이터가 붙은 클래스는 이제 nest.js에서 생성과 소멸을 관리합니다.</p>\n<p>보통 <code>controller</code> 클래스는 <code>service</code> 클래스를 사용합니다.</p>\n<p><code>service</code> 클래스에 <code>@Injectable</code>를 붙이고,\n다른 클래스에 주입해 사용하는 클래스가 만들어졌습니다.</p>\n<p>해당 클래스는 모듈 클래스(<code>@Module</code> 데코레이터가 붙은)의 프로바이더 설정에 추가해주면 됩니다.</p>\n<p>이제 constructor에서 아래와 같이 써줍니다.</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GoodService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GoodRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GoodController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> goodService<span class=\"token operator\">:</span> GoodService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    controllers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>GoodController<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    provider<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>GoodService<span class=\"token punctuation\">,</span> GoodRepository<span class=\"token punctuation\">]</span> <span class=\"token comment\">// nest.js의 컨테이너에 Injectable 할 class들을 명시해줌</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GoodModule</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n",
			"date_published": "2023-10-05T00:35:43Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/wiki/db/schema-model/",
			"url": "https://zerozoo-a.github.io/blog/wiki/db/schema-model/",
			"title": "schema model",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"db-schema-model\" tabindex=\"-1\">DB에서의 schema와 model <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/db/schema-model/\">#</a></h1>\n<h2 id=\"schema\" tabindex=\"-1\">schema 스키마 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/db/schema-model/\">#</a></h2>\n<p>스키마는 데이터베이스 테이블의 명세를 기술한 데이터입니다.</p>\n<p>user라는 테이블을 생성하는 경우 해당 테이블에는</p>\n<ul>\n<li>문자열 20자, user_name</li>\n<li>숫자 4자리 age</li>\n</ul>\n<p>등과 같은 정보가 필요합니다. 이런 정보를 정의한 것을 스키마라합니다.</p>\n<h2 id=\"model\" tabindex=\"-1\">model 모델 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/db/schema-model/\">#</a></h2>\n<p>모델은 데이터베이스의 특정 테이블과 테이블에 있는 컬럼들의 형태를 정의한 클래스입니다.\nuser 테이블에 대해 모델을 만든다면 User 클래스를 만들고, 변수로 String userName, int age를 선언해야 합니다.</p>\n",
			"date_published": "2023-10-04T22:13:05Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JS/node/increase-libuv-threadpool/",
			"url": "https://zerozoo-a.github.io/blog/JS/node/increase-libuv-threadpool/",
			"title": "increase libuv threadpool",
			"content_html": "<sup>\n</sup>\n<br>\n<br>\n<br>\n<h2 id=\"uv-threadpool-size\" tabindex=\"-1\">UV_THREADPOOL_SIZE <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/node/increase-libuv-threadpool/\">#</a></h2>\n<p>UV_THREADPOOL_SIZE는 node.js에서 사용하는 핵심 라이브러리인\nlibuv의 <strong>thread pool</strong> 설정을 변경하는 명령어입니다.</p>\n<h2 id=\"libuv\" tabindex=\"-1\">이벤트기반에 필수인 libuv <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/node/increase-libuv-threadpool/\">#</a></h2>\n<p>node.js는 싱글스레드로 이벤트 루프를 돌리는 이벤트 기반 논블로킹 I/O모델을 사용하는 자바스크립트 런타임이다.</p>\n<p>싱글스레드로 이벤트 루프를 돌리고 그 외의 비동기 처리는 os의 process 혹은\nlibuv에서 제공하는 thread pool을 이용해 병렬처리를 진행한다.</p>\n<p>단순한 node.js 사용에는 위 내용을 굳이 알 필요가 없다. 시간을 많이 소모하는\n연산등을 만들어진 라이브러리에서 꺼내어 쓴다면 이미 비동기 처리를 하고 있을 확률이 높고 높은만큼 내부적으로 멀티 쓰레드 환경에서 해당 처리를 연산하고 있을 확률이 더더욱 높기 때문이다.</p>\n<p><a href=\"https://docs.libuv.org/en/v1.x/design.html\">libuv</a>는 멀티플렛폼을(linux 계열, window, mac등) 지원하는 비동기처리 라이브러리로 node.js에서 비동기 처리의 핵심적인 역할을 담당하고 있다.</p>\n<h2 id=\"worker-pool-a-k-a-thread-pool\" tabindex=\"-1\">입맛이 싹 도는 worker pool(a.k.a thread pool) 하지만 사용처는 제한이 있습니다. <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/node/increase-libuv-threadpool/\">#</a></h2>\n<p>항상 main thread를 금이야 옥이야 사용하고 있는 자바스크립트 개발자들은\nthread에 굶주려있습니다.</p>\n<p>node.js에서 기본 제공해주는 thread pool에 내 callstack 하나 얹어보고 싶은 이 마음은\n누구나 비슷하리라 봅니다.</p>\n<p>하지만 사용 할 수 있는 범위는 아래의 API로 극히 제한됩니다.</p>\n<pre><code>1. I/O-intensive\nDNS: dns.lookup(), dns.lookupService().\nFile System: fs.FSWatcher()와 libuv의 스레드 풀을 명백하게 동기적으로 사용하는 경우를 제외한 모든 파일 시스템 API.\n\n2. CPU-intensive\nCrypto: crypto.pbkdf2(), crypto.scrypt(), crypto.randomBytes(), crypto.randomFill(), crypto.generateKeyPair().\nZlib: libuv의 스레드 풀을 명백하게 동기적으로 사용하는 경우를 제외한 모든 zlib API.\n</code></pre>\n<p><a href=\"https://nodejs.org/ko/docs/guides/dont-block-the-event-loop\">출처</a></p>\n<h2 id=\"network-i-o\" tabindex=\"-1\">network i/o에 좀 사용하고 싶은 경우 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/node/increase-libuv-threadpool/\">#</a></h2>\n<p>network i/o인 http.get 등의 method에 libuv의 thread를 늘려 긍정적인\n효과를 줄 수 있지 않을까 생각했습니다.</p>\n<p>그러나 libuv는 dns관련 api에서 thread pool을 활용하고,\nnetwork i/o 작업은 os process에 그 task가 넘어가게 됩니다.</p>\n<h2 id=\"json-parse-stringify\" tabindex=\"-1\">JSON으로 parse, stringify하는데 사용하고 싶은 경우 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/node/increase-libuv-threadpool/\">#</a></h2>\n<p><code>JSON.parse</code> , <code>JSON.stringify</code>는 비용이 상당합니다.\n이벤트루프를 길게 차단하고 있는 작업들은 모두 오프로드(worker thread를 생성 작업을 일임)를 하거나 파티셔닝등이 필요합니다.\nstreamAPI를 사용한다면 적은 버퍼만으로도 작업을 끝낼 수 있겠지만 cpu를 점유하는 시간은\n크게 다르지 않을것입니다.</p>\n<p>오프로드는 오버헤드가 발생하고, 통신비용으로 메모리를 복제하는 비용이 발생합니다.\nnode.js에도 공유메모리가 있어 한 메모리에 여러 thread가 붙어 작업하는 것이 가능합니다만,\natomic과 직접 설계하기 난해할 수 있습니다.</p>\n",
			"date_published": "2023-10-03T19:43:49Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JS/server/nest/get-header-property/",
			"url": "https://zerozoo-a.github.io/blog/JS/server/nest/get-header-property/",
			"title": "header property를 받아보자",
			"content_html": "<sup>\n\t각주:[1](배너_이미지_출처)\n</sup>\n<br>\n<br>\n<br>\n<h1 id=\"nest-js-header-property\" tabindex=\"-1\">nest.js에서 header의 property를 바로 받아보자 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/server/nest/get-header-property/\">#</a></h1>\n<p>nest.js의 컨트롤러로 넘어오는 header에서 값을 꺼내기 위해선 아래와 같이\n해봅시다.</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Response<span class=\"token punctuation\">,</span>\n  Get<span class=\"token punctuation\">,</span>\n  Headers<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'/kakaoLoginInfo'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">kakaoLoginInfo</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Headers</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'authorized'</span><span class=\"token punctuation\">)</span> authorized<span class=\"token punctuation\">,</span> <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Response</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request header로 부터 꺼낸 값인 >>>'</span><span class=\"token punctuation\">,</span>authorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      a<span class=\"token operator\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<hr>\n<p><a name=\"배너 이미지 출처\" href=\"https://images.unsplash.com/photo-1514888286974-6c03e2ca1dba?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2886&q=80\">image 출처</a></p>\n",
			"date_published": "2023-09-23T22:47:04Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/rational-function-graph-2/",
			"url": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/rational-function-graph-2/",
			"title": "rational function graph 2",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"rational-function-graph\" tabindex=\"-1\">rational function graph를 갈라보자 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/rational-function-graph-2/\">#</a></h1>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mfrac><mo>=</mo><mi>C</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mfrac><mrow><msup><mi>A</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">P(x) = \\frac{A(x)}{B(x)} = C(x) + \\frac{A&#x27;(x)}{B(x)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.53em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">A</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.58448em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.06448em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8278285714285715em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></p>\n<p>식보다는 예제를 보는 것이 이해하기 좋습니다.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>1</mn></mrow><mi>x</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">f(x) = \\frac{x^2+1}{x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.36292em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01792em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913142857142857em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> 이러한 식이 있다고 하죠,</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>1</mn></mrow><mi>x</mi></mfrac><mo>=</mo><mfrac><msup><mi>x</mi><mn>2</mn></msup><mi>x</mi></mfrac><mo>+</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mo>=</mo><mi>x</mi><mo>+</mo><mfrac><mn>1</mn><mi>x</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">f(x) = \\frac{x^2+1}{x} = \\frac{x^2}{x} + \\frac{1}{x} \n= x + \\frac{1}{x}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>각 항을 각각의 함수로 보면 일차함수와 유리함수 하나씩으로 나눠집니다.</p>\n<h2 id=\"h-x\" tabindex=\"-1\">일차함수의 그래프 h(x) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/rational-function-graph-2/\">#</a></h2>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>h</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">h(x) = x\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></span></p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/Q4eJsdO8pR-410.webp\" width=\"100%\" height=\"auto\" alt=\"h(x)=x\" loading=\"lazy\" decoding=\"async\"></div>\n<h2 id=\"g-x\" tabindex=\"-1\">유리함수의 그래프 g(x) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/rational-function-graph-2/\">#</a></h2>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mi>x</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">g(x) = \\frac{1}{x}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/g0JqDVHqrt-410.webp\" width=\"100%\" height=\"auto\" alt=\"g(x)=frac{1}{x}\" loading=\"lazy\" decoding=\"async\"></div>\n<h2 id=\"\" tabindex=\"-1\">이 둘을 더한 함수는 어떤 그래프일까요? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/rational-function-graph-2/\">#</a></h2>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>h</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x) = h(x) + g(x)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/_g_WE0boGT-398.webp\" width=\"100%\" height=\"auto\" alt=\"f(x) = h(x) + g(x)\" loading=\"lazy\" decoding=\"async\"></div>\n<h2 id=\"-1\" tabindex=\"-1\">곂쳐서 보면 보이는 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/rational-function-graph-2/\">#</a></h2>\n<p>함수 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>h</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x) = h(x) + g(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>는 유리함수 그래프 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">g(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>의 점근선이\n일차함수 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">h(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> 를 따라가고 있다는 것을 알 수 있습니다.</p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/kuZa56OP5r-800.webp\" width=\"100%\" height=\"auto\" alt=\"f(x) = h(x) + g(x)\" loading=\"lazy\" decoding=\"async\"></div>\n",
			"date_published": "2023-09-23T12:27:22Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/rational-function-graph/",
			"url": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/rational-function-graph/",
			"title": "유리함수의 그래프들 rational function graph 1",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">유리함수의 그래프 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/rational-function-graph/\">#</a></h1>\n<h2 id=\"-1\" tabindex=\"-1\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">f(x) = 1/x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">x</span></span></span></span> <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/rational-function-graph/\">#</a></h2>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/WV9Cu74n35-804.webp\" width=\"100%\" height=\"auto\" alt=\"f(x)=1/x\" loading=\"lazy\" decoding=\"async\"></div>\n<h2 id=\"-2\" tabindex=\"-1\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x) = 1/(x-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/rational-function-graph/\">#</a></h2>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/6aPOVXnoSl-808.webp\" width=\"100%\" height=\"auto\" alt=\"f(x)=1/(x-1)\" loading=\"lazy\" decoding=\"async\"></div>\n<h2 id=\"-3\" tabindex=\"-1\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">f(x) = 1/x^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/rational-function-graph/\">#</a></h2>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/SYHUVlVdiu-810.webp\" width=\"100%\" height=\"auto\" alt=\"f(x)=1/x^2\" loading=\"lazy\" decoding=\"async\"></div>\n<h2 id=\"-4\" tabindex=\"-1\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x) = 1/(x^2-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/rational-function-graph/\">#</a></h2>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/UJwIS3vIJ_-900.webp\" width=\"100%\" height=\"auto\" alt=\"f(x)=1/(x^2-1)\" loading=\"lazy\" decoding=\"async\"></div>\n<h2 id=\"-5\" tabindex=\"-1\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x) = 1/(x^2-2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span> <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/rational-function-graph/\">#</a></h2>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/eatOGg0OZE-900.webp\" width=\"100%\" height=\"auto\" alt=\"f(x)=1/(x^2-2)\" loading=\"lazy\" decoding=\"async\"></div>\n<h2 id=\"-6\" tabindex=\"-1\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mn>9</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x) = 1/(x^2-9)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">9</span><span class=\"mclose\">)</span></span></span></span> <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/rational-function-graph/\">#</a></h2>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/AVKUVuhZLk-900.webp\" width=\"100%\" height=\"auto\" alt=\"f(x)=1/(x^2-9)\" loading=\"lazy\" decoding=\"async\"></div>",
			"date_published": "2023-09-23T11:58:56Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/(x+/frac%7B1%7D%7Bx%7D)^2/",
			"url": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Funcitons/(x+/frac%7B1%7D%7Bx%7D)^2/",
			"title": "(x+&#92;frac{1}{x})^2",
			"content_html": "<br>\n<br>\n<br>\n<p>아래와 같은 식을 본 적이 있을겁니다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><mo>+</mo><mfrac><mn>1</mn><msup><mi>x</mi><mn>2</mn></msup></mfrac></mrow><annotation encoding=\"application/x-tex\">(x+\\frac{1}{x})^2 = x^2 + 2 + \\frac{1}{x^2}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mfrac><mn>1</mn><msup><mi>x</mi><mn>2</mn></msup></mfrac><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>=</mo><msup><mi>x</mi><mn>4</mn></msup><mo>+</mo><mn>2</mn><mo>+</mo><mfrac><mn>1</mn><msup><mi>x</mi><mn>4</mn></msup></mfrac></mrow><annotation encoding=\"application/x-tex\">(x^2+\\frac{1}{x^2})^2 = x^4 + 2 + \\frac{1}{x^4}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>아래의 식을 변형해 위의 공식을 유도해 값을 뽑아낼 수 있습니다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mi>x</mi><mo>+</mo><mn>1</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x^2+4x+1=0\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9474379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo>=</mo><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mi>x</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mo>=</mo><mn>0</mn><mfrac><mn>1</mn><mi>x</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">= (x^2+4x+1)\\frac{1}{x}=0\\frac{1}{x}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\">0</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mn>4</mn><mo>+</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">= (x+4+\\frac{1}{x})=0\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mo stretchy=\"false\">)</mo><mo>=</mo><mo>−</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">= (x+\\frac{1}{x})=-4\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">4</span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo>=</mo><mi>x</mi><mo>+</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mo>=</mo><mo>−</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">= x+\\frac{1}{x}=-4\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">4</span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>=</mo><mo>−</mo><msup><mn>4</mn><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">(x+\\frac{1}{x})^2=-4^2\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><mo>+</mo><mfrac><mn>1</mn><msup><mi>x</mi><mn>2</mn></msup></mfrac><mo>=</mo><mn>16</mn></mrow><annotation encoding=\"application/x-tex\">=x^2 + 2 + \\frac{1}{x^2} = 16\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">6</span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mfrac><mn>1</mn><msup><mi>x</mi><mn>2</mn></msup></mfrac><mo>=</mo><mn>14</mn></mrow><annotation encoding=\"application/x-tex\">=x^2 + \\frac{1}{x^2} = 14\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">4</span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>x</mi><mo>+</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mo>+</mo><mfrac><mn>1</mn><msup><mi>x</mi><mn>2</mn></msup></mfrac><mo>=</mo><mn>14</mn><mo>−</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">=x^2 + x + \\frac{1}{x} + \\frac{1}{x^2} = 14 - 4\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span></span></p>\n",
			"date_published": "2023-09-19T21:45:52Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JS/server/nest/nestjs-env-setting/",
			"url": "https://zerozoo-a.github.io/blog/JS/server/nest/nestjs-env-setting/",
			"title": "nest js jwt토큰 발행시 .env 파일을 읽지 못할 때",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"env\" tabindex=\"-1\">.env 세팅하기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/server/nest/nestjs-env-setting/\">#</a></h1>\n<p>Nest.js로 .env 값을 읽어오려면 보통 아래와 같이 합니다.</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    TypeOrmModule<span class=\"token punctuation\">.</span><span class=\"token function\">forRootAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> useFactory<span class=\"token operator\">:</span> ormConfig <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    ConfigModule<span class=\"token punctuation\">.</span><span class=\"token function\">forRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isGlobal<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    UsersModule<span class=\"token punctuation\">,</span>\n    AuthModule<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  controllers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>AppController<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>AppService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n<p>타 모듈에서 아래와 같이 process.env.xxx를 통해 접근하게 되면\n이상하게 아무 값도 읽어오지 못하고 undefined를 받습니다.</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    JwtModule<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      secret<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">JWT_SECRET</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// undefined 😵‍💫</span>\n      signOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> expiresIn<span class=\"token operator\">:</span> <span class=\"token string\">'300s'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    PassportModule<span class=\"token punctuation\">,</span>\n    UsersModule<span class=\"token punctuation\">,</span>\n    TypeOrmModule<span class=\"token punctuation\">.</span><span class=\"token function\">forFeature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>User<span class=\"token punctuation\">,</span> UserAuthority<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  controllers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>AuthController<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>AuthService<span class=\"token punctuation\">,</span> UsersService<span class=\"token punctuation\">,</span> JwtStrategy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n<p>nest.js 프로젝트가 실행될 때, env file을 읽는 작업은 비동기로 실행됩니다.\n프로젝트는 비동기 함수가 끝나는 것을 기다리지 않고 nest 프로젝트를 모두 읽어버리기 때문에\n이런 현상이 발생합니다.</p>\n<p>아래와 같이 변경해줍시다.</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    JwtModule<span class=\"token punctuation\">.</span><span class=\"token function\">registerAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      inject<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>ConfigService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">useFactory</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> ConfigService<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        secret<span class=\"token operator\">:</span> config<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'JWT_SECRET'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        signOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> expiresIn<span class=\"token operator\">:</span> <span class=\"token string\">'300s'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    PassportModule<span class=\"token punctuation\">,</span>\n    UsersModule<span class=\"token punctuation\">,</span>\n    TypeOrmModule<span class=\"token punctuation\">.</span><span class=\"token function\">forFeature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>User<span class=\"token punctuation\">,</span> UserAuthority<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  controllers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>AuthController<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>AuthService<span class=\"token punctuation\">,</span> UsersService<span class=\"token punctuation\">,</span> JwtStrategy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n",
			"date_published": "2023-09-17T11:55:08Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/wiki/install/install-mysql-using-home-brew/",
			"url": "https://zerozoo-a.github.io/blog/wiki/install/install-mysql-using-home-brew/",
			"title": "install mysql using home brew",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">설치 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/install/install-mysql-using-home-brew/\">#</a></h1>\n<p>home brew를 설치해줍니다.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">/bin/bash <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class=\"token variable\">)</span></span>\"</span></code></pre>\n<p>mysql 버전을 아래 표를 참고해서 골라주세요</p>\n<table>\n<thead>\n<tr>\n<th>출시</th>\n<th>GA (General availability)</th>\n<th>최신 마이너 버전</th>\n<th>최신 릴리스</th>\n<th>수명 종료</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5.1</td>\n<td>2008년 11월 14일 (14년 전)</td>\n<td>5.1.73</td>\n<td>2013-12-03</td>\n<td>Dec 2013</td>\n</tr>\n<tr>\n<td>5.5</td>\n<td>2010년 12월 3일 (12년 전)</td>\n<td>5.5.62</td>\n<td>2018-10-22</td>\n<td>Dec 2018</td>\n</tr>\n<tr>\n<td>5.6</td>\n<td>2013년 2월 5일 (10년 전)</td>\n<td>5.6.51</td>\n<td>2021-01-20</td>\n<td>Feb 2021</td>\n</tr>\n<tr>\n<td>5.7</td>\n<td>2015년 10월 21일 (7년 전)</td>\n<td>5.7.41</td>\n<td>2023-01-17</td>\n<td>Oct 2023</td>\n</tr>\n<tr>\n<td>8.0</td>\n<td>2018년 4월 19일 (5년 전)</td>\n<td>8.0.32</td>\n<td>2023-01-17</td>\n<td>Apr 2026</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> mysql // <span class=\"token function\">install</span> latest version\nbrew <span class=\"token function\">install</span> mysql@5.7 // <span class=\"token function\">install</span> version <span class=\"token number\">5.7</span></code></pre>\n<p>설치하면 아래와 같은 설명이 줄줄이 뜨는데 무시하고 닫으면 안됩니다\n잘 읽고 여러분이 사용하시는 rc파일에 해당 내용을 복붙해주세요</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">If you need to have mysql@5.7 first <span class=\"token keyword\">in</span> your <span class=\"token environment constant\">PATH</span>, run:\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'export PATH=\"/opt/homebrew/opt/mysql@5.7/bin:$PATH\"'</span> <span class=\"token operator\">>></span> ~/.zshrc\n\nFor compilers to <span class=\"token function\">find</span> mysql@5.7 you may need to set:\n  <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">LDFLAGS</span><span class=\"token operator\">=</span><span class=\"token string\">\"-L/opt/homebrew/opt/mysql@5.7/lib\"</span>\n  <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">CPPFLAGS</span><span class=\"token operator\">=</span><span class=\"token string\">\"-I/opt/homebrew/opt/mysql@5.7/include\"</span>\n\nFor pkg-config to <span class=\"token function\">find</span> mysql@5.7 you may need to set:\n  <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">PKG_CONFIG_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"/opt/homebrew/opt/mysql@5.7/lib/pkgconfig\"</span>\n\nTo start mysql@5.7 now and restart at login:\n  brew services start mysql@5.7\nOr, <span class=\"token keyword\">if</span> you don't want/need a background <span class=\"token function\">service</span> you can just run:\n  /opt/homebrew/opt/mysql@5.7/bin/mysqld_safe --datadir<span class=\"token punctuation\">\\</span><span class=\"token operator\">=</span>/opt/homebrew/var/mysql\n<span class=\"token operator\">==</span><span class=\"token operator\">></span> Summary\n🍺  /opt/homebrew/Cellar/mysql@5.7/5.7.43: <span class=\"token number\">321</span> files, <span class=\"token number\">233</span>.9MB\n<span class=\"token operator\">==</span><span class=\"token operator\">></span> Running <span class=\"token variable\"><span class=\"token variable\">`</span>brew cleanup mysql@5.7<span class=\"token variable\">`</span></span><span class=\"token punctuation\">..</span>.\nDisable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.\nHide these hints with HOMEBREW_NO_ENV_HINTS <span class=\"token punctuation\">(</span>see <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">man</span> brew<span class=\"token variable\">`</span></span><span class=\"token punctuation\">)</span>.</code></pre>\n<p>아래 명령어를 통해 mysql을 실행해주세요</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">  brew services start mysql@5.7</code></pre>\n<p>mySql Workbench나 dbeaver🦫 를 이용해 db를 사용해보세요\nhappy hacking!</p>\n",
			"date_published": "2023-09-13T21:28:31Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/rational-expression/",
			"url": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/rational-expression/",
			"title": "rational expression",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"rational-expression\" tabindex=\"-1\">rational expression중 특이한 형태 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/rational-expression/\">#</a></h2>\n<p>아래와 같은 식을 본 적이 있을 것입니다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mfrac><mn>1</mn><mrow><mi>A</mi><mi>B</mi></mrow></mfrac><mo>=</mo><mfrac><mn>1</mn><mrow><mi>B</mi><mo>−</mo><mi>A</mi></mrow></mfrac><mo stretchy=\"false\">(</mo><mfrac><mn>1</mn><mi>A</mi></mfrac><mo>−</mo><mfrac><mn>1</mn><mi>B</mi></mfrac><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{AB} = \\frac{1}{B-A}(\\frac{1}{A}-\\frac{1}{B})\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.09077em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">A</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>시간이 지남에 따라 까먹기 쉽지만 인수분해처럼 위 식을 활용해 아래의 문제를 풀어봅시다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mfrac><mn>1</mn><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mn>3</mn><mo stretchy=\"false\">)</mo></mrow></mfrac><mo>+</mo><mfrac><mn>1</mn><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mn>6</mn><mo stretchy=\"false\">)</mo></mrow></mfrac><mo>+</mo><mfrac><mn>1</mn><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mn>6</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mn>9</mn><mo stretchy=\"false\">)</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{(x+3)} + \\frac{1}{(x+3)(x+6)} + \\frac{1}{(x+6)(x+9)}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.25744em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.25744em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">6</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.25744em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">6</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">9</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mfrac><mn>1</mn><mn>3</mn></mfrac><mo stretchy=\"false\">(</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mo>+</mo><mfrac><mn>1</mn><mrow><mi>x</mi><mo>+</mo><mn>3</mn></mrow></mfrac><mo>−</mo><mfrac><mn>1</mn><mrow><mi>x</mi><mo>+</mo><mn>3</mn></mrow></mfrac><mo>−</mo><mfrac><mn>1</mn><mrow><mi>x</mi><mo>+</mo><mn>6</mn></mrow></mfrac><mo>+</mo><mfrac><mn>1</mn><mrow><mi>x</mi><mo>+</mo><mn>6</mn></mrow></mfrac><mo>−</mo><mfrac><mn>1</mn><mrow><mi>x</mi><mo>+</mo><mn>9</mn></mrow></mfrac><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{3}(\\frac{1}{x} + \\frac{1}{x+3} - \\frac{1}{x+3} - \\frac{1}{x+6} + \\frac{1}{x+6} - \\frac{1}{x+9})\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.09077em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">3</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.09077em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">3</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.09077em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">6</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.09077em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">6</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.09077em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">9</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mfrac><mn>1</mn><mn>3</mn></mfrac><mo stretchy=\"false\">(</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mo>−</mo><mfrac><mn>1</mn><mrow><mi>x</mi><mo>+</mo><mn>9</mn></mrow></mfrac><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{3}(\\frac{1}{x} - \\frac{1}{x+9})\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.09077em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">9</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n",
			"date_published": "2023-09-11T22:26:43Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/life/2023-infcon-review/",
			"url": "https://zerozoo-a.github.io/blog/life/2023-infcon-review/",
			"title": "2023 인프런 후기",
			"content_html": "<sup>\n\t각주:[1](배너_이미지_출처)\n</sup>\n<br>\n<br>\n<br>\n<h1 id=\"2023\" tabindex=\"-1\">인프콘 2023 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/life/2023-infcon-review/\">#</a></h1>\n<p>인프콘 2023은 인프런의 2 번째 개발자 컨퍼런스입니다.\n1 번째 컨퍼런스는 참여하지 못했는데,\n금번은 운이 좋게 당첨되어 참여하게 되었습니다.</p>\n<h2 id=\"\" tabindex=\"-1\">규모 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/life/2023-infcon-review/\">#</a></h2>\n<p>국내외의 내로라하는 대기업인 jetbrain, mongodb, 현대차, 요기요, 당근, 무신사 등\n큰 기업들과 규모는 조금 작더라도 알찬, 기업의 PR을 위해 열심인 강소기업들이 많았습니다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">컨퍼런스 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/life/2023-infcon-review/\">#</a></h2>\n<p>가장 감명깊게 본 세션은 <em><strong>인프런 아키텍쳐 개선기</strong></em> 입니다.\naws에 강하게 의존하고 있는 느낌이지만 그에 비해 적은 수의 개발자로\n큰 사이트의 레거시를 개편, 안정적으로 운영하고 있습니다.</p>\n<p>거의 모든 개발회사들이 비슷하거나 혹은 다른 방식으로 레거시를 옮기고 있을것 같습니다.</p>\n<h2 id=\"-2\" tabindex=\"-1\">개인적 후기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/life/2023-infcon-review/\">#</a></h2>\n<ul>\n<li>사람이 너무 많아서 줄이 꼬이는 것은 어쩔 수 없겠으나 대책이 필요 할 듯</li>\n<li>부스는 생각보다 사은품을 너무 적게 준비 함</li>\n<li>큰 화면에 빵빵한 사운드로 좋은 세션을 잘 들을 수 있었음</li>\n</ul>\n",
			"date_published": "2023-08-15T22:06:51Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/sufficiency-and-necessity/",
			"url": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/sufficiency-and-necessity/",
			"title": "충분조건과 필요조건",
			"content_html": "<sup>\n\t각주:[1](배너_이미지_출처)\n</sup>\n<br>\n<br>\n<br>\n<h2 id=\"\" tabindex=\"-1\">필요조건 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/sufficiency-and-necessity/\">#</a></h2>\n<blockquote>\n<p>필요조건(necessary condition)은 어떤 진술이 참이 되기 위해서 반드시 충족되어야 하는 조건이다.</p>\n</blockquote>\n<ul>\n<li>인간이면 동물이다.</li>\n</ul>\n<p>인간은 동물이지만 모든 동물이 인간이라고 할 순 없습니다.</p>\n<p>또한 동물이 아닌 경우 인간은 더더욱 아니므로 동물임은 인간이기 위한 필요조건임을 알 수 있습니다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">충분조건 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/sufficiency-and-necessity/\">#</a></h2>\n<p>충분조건(sufficient condition)은 그것이 만족되었을 때 진술의 참을 보장한다.</p>\n<ul>\n<li>인간이면 동물이다.</li>\n<li>자연수이면 실수이다.</li>\n<li>북극여우면 포유류이다.</li>\n<li>개면 개과다.</li>\n</ul>\n<p>예시처럼 집합 p가 q에 속해있는 경우 p가 참임을 보이면 q는 저절로 성립됨을 보일 수 있습니다.</p>\n<h2 id=\"-2\" tabindex=\"-1\">필요충분조건 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/sufficiency-and-necessity/\">#</a></h2>\n<blockquote>\n<p>'P이면 Q이고, Q이면 P이다.'에서 P는 Q의 필요충분조건이며, Q도 역시 P의 필요충분조건이라 한다. P가 참이면 Q도 참이며, P가 거짓이면 Q도 거짓이다. 반대로 Q가 참이면 P도 참이며, Q가 거짓이면 P도 거짓이다. 그래서, 이 때의 P와 Q를 동치라고도 한다.</p>\n</blockquote>\n<p>이 조건은 동치입니다. 따라서 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>=</mo><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">P=Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span>로 나타낼 수 있습니다.</p>\n<h2 id=\"-3\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/sufficiency-and-necessity/\">#</a></h2>\n<p>필요조건: p는 q이기 위한 최소한의 조건\n충분조건: p가 참이면 q임이 충분히 보장되는 조건\n필요충분조건: p = q</p>\n",
			"date_published": "2023-08-13T23:43:44Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/LOGIC/logical-implication/",
			"url": "https://zerozoo-a.github.io/blog/CS/LOGIC/logical-implication/",
			"title": "조건과 결과 | logical implication",
			"content_html": "<sup>\n\t각주:[1](배너_이미지_출처)\n</sup>\n<br>\n<br>\n<br>\n<h1 id=\"logical-implication\" tabindex=\"-1\">논리적 함의(= logical implication)란? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/LOGIC/logical-implication/\">#</a></h1>\n<p>두 개의 명제간의 관계를 나타내는 논리적 개념을 뜻합니다.</p>\n<p>진리표는 아래와 같습니다.</p>\n<table>\n<thead>\n<tr>\n<th>전제 (A)</th>\n<th>결과 (B)</th>\n<th>논리적 함의 (A → B)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>거짓</td>\n<td>거짓</td>\n<td>참</td>\n</tr>\n<tr>\n<td>거짓</td>\n<td>참</td>\n<td>참</td>\n</tr>\n<tr>\n<td>참</td>\n<td>거짓</td>\n<td>거짓</td>\n</tr>\n<tr>\n<td>참</td>\n<td>참</td>\n<td>참</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"\" tabindex=\"-1\">예시 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/LOGIC/logical-implication/\">#</a></h2>\n<p>logical implication에선 전제와 결과라는 두 명제가 있습니다.</p>\n<p>전제를 <strong>지구는 둥글다</strong>라고 하겠습니다.\n결과를 <strong>지구는 둥글다고 주장하면 감옥에 보낸다</strong>라고 하겠습니다.</p>\n<hr>\n<h3 id=\"-1\" tabindex=\"-1\"><strong>지구를 평평하다고 주장하겠습니다. 🫓</strong> <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/LOGIC/logical-implication/\">#</a></h3>\n<p>지구가 평평하다고 주장했습니다.</p>\n<p>지구가 둥글다고 주장하면 감옥에 보낸다고 했으니 보내지 않겠습니다.</p>\n<p>결과는 참입니다.</p>\n<table>\n<thead>\n<tr>\n<th>전제 (A)</th>\n<th>결과 (B)</th>\n<th>논리적 함의 (A → B)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>거짓</td>\n<td>거짓</td>\n<td>참</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"-2\" tabindex=\"-1\"><strong>지구를 평평하다고 주장하겠습니다. 🫓</strong> <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/LOGIC/logical-implication/\">#</a></h3>\n<p>지구가 평평하다고 주장했습니다.</p>\n<p>지구가 둥글다고 주장하면 감옥에 보낸다고 했습니다만</p>\n<p><em><strong>감옥에 보내겠습니다.</strong></em></p>\n<p>이는 참입니다.</p>\n<p>지구가 둥글다고 주장하면 감옥에 보낸다고 했지만\n다른 이유로 보낼 수도 있습니다.</p>\n<p>억지같지만,\n감옥에 보내는 이유를 꼭 지구를 둥글다고\n주장해야만 감옥에 보낸다고한 것은 아닙니다.</p>\n<p>따라서 이는 참입니다.</p>\n<table>\n<thead>\n<tr>\n<th>전제 (A)</th>\n<th>결과 (B)</th>\n<th>논리적 함의 (A → B)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>거짓</td>\n<td>참</td>\n<td>참</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"-3\" tabindex=\"-1\"><strong>지구를 둥글다고 주장하겠습니다. 🌍</strong> <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/LOGIC/logical-implication/\">#</a></h3>\n<p>지구가 둥글다고 주장했습니다.</p>\n<p>감옥에 보내지 않겠습니다.</p>\n<p>결과로 정한 명제를 위반하고 있습니다.\n이는 거짓입니다.</p>\n<table>\n<thead>\n<tr>\n<th>전제 (A)</th>\n<th>결과 (B)</th>\n<th>논리적 함의 (A → B)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>참</td>\n<td>거짓</td>\n<td>거짓</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"-4\" tabindex=\"-1\"><strong>지구를 둥글다고 주장하겠습니다. 🌏</strong> <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/LOGIC/logical-implication/\">#</a></h3>\n<p>지구가 둥글다고 주장했습니다.</p>\n<p>감옥에 보내겠습니다.</p>\n<p>이는 전제도 결과도 모두 참입니다.</p>\n<table>\n<thead>\n<tr>\n<th>전제 (A)</th>\n<th>결과 (B)</th>\n<th>논리적 함의 (A → B)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>참</td>\n<td>거짓</td>\n<td>참</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p><a name=\"배너 이미지 출처\" href=\"https://www.psypost.org/wp-content/uploads/2023/06/flat-earth-1024x512.jpg\">\nimage 출처</a></p>\n",
			"date_published": "2023-08-13T16:17:24Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/LOGIC/exclusive-or/",
			"url": "https://zerozoo-a.github.io/blog/CS/LOGIC/exclusive-or/",
			"title": "xor, exclusive or, 배타적 논리합",
			"content_html": "<sup>\n\t각주:[1](배너_이미지_출처)\n</sup>\n<br>\n<br>\n<br>\n<h1 id=\"xor-exclusive-or\" tabindex=\"-1\">xor (= exclusive or)란? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/LOGIC/exclusive-or/\">#</a></h1>\n<blockquote>\n<p>배타적 논리합(排他的論理合, exclusive or)은 수리 논리학에서 주어진 2개의 명제 가운데 1개만 참일 경우를 판단하는 논리 연산이다. 약칭으로 XOR, EOR, EXOR라고도 쓴다.</p>\n</blockquote>\n<h2 id=\"\" tabindex=\"-1\">벤다이어그램 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/LOGIC/exclusive-or/\">#</a></h2>\n<p>벤다이어그램으로 표현하면 아래와 같다.\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>=</mo><msup><mi>A</mi><mi>c</mi></msup></mrow><annotation encoding=\"application/x-tex\">A&#x27; = A^c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span></span></span></span></span></span></span></span>이다. (complement)</p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/8YbX1_BetN-900.webp\" width=\"100%\" height=\"auto\" alt=\"xor venn diagram image\" loading=\"lazy\" decoding=\"async\"></div>\n<a href=\"https://www.geogebra.org/m/Pxm3Hump#material/HXUFNzJF\">\n출처 geogebra\n</a>\n<h2 id=\"-1\" tabindex=\"-1\">진리표 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/LOGIC/exclusive-or/\">#</a></h2>\n<p>진리표로 나타내면 아래와 같다.</p>\n<table>\n<thead>\n<tr>\n<th>Operand 1</th>\n<th>Operand 2</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>false</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>false</td>\n<td>true</td>\n<td>true</td>\n</tr>\n<tr>\n<td>true</td>\n<td>false</td>\n<td>true</td>\n</tr>\n<tr>\n<td>true</td>\n<td>true</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<p>xor는 Operand 1, 2의 값 중 하나만 true인 경우 결과값으로 true를 반환한다.</p>\n<p>이를 이렇게 해석 할 수도 있다.</p>\n<p>input 2개의 (이항연산이므로) 인자가 서로 다르면,\ntrue를 반환한다.</p>\n<p>같으면,\nfalse를 반환한다.</p>\n<h2 id=\"code\" tabindex=\"-1\">code <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/LOGIC/exclusive-or/\">#</a></h2>\n<p>code로 나타내보자.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// js</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">B</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// xor operator = ^</span>\n\n<span class=\"token constant\">B</span> <span class=\"token operator\">^</span> <span class=\"token constant\">B</span> <span class=\"token comment\">// 0</span>\n<span class=\"token constant\">B</span> <span class=\"token operator\">^</span> <span class=\"token constant\">A</span> <span class=\"token comment\">// 1</span>\n<span class=\"token constant\">A</span> <span class=\"token operator\">^</span> <span class=\"token constant\">B</span> <span class=\"token comment\">// 1</span>\n<span class=\"token constant\">A</span> <span class=\"token operator\">^</span> <span class=\"token constant\">A</span> <span class=\"token comment\">// 0</span></code></pre>\n<p>자바스크립트의 ^ operator는 xor연산과 같다.</p>\n<p>단 그 반환값을 0, 1로 반환하는데 이게 싫고 boolean으로 받고 싶다면 아래와 같이 boolean으로 형변환해줄 수 있습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// js</span>\n<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token constant\">B</span> <span class=\"token operator\">^</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token constant\">B</span> <span class=\"token operator\">^</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token comment\">// java</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> xor <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">boolean</span> a <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">boolean</span> b <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span> a <span class=\"token operator\">^</span> b<span class=\"token punctuation\">;</span>\n\n\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a ^ b: \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a ^ b: true</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"-2\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/LOGIC/exclusive-or/\">#</a></h2>\n<p>xor는 서로 다른 인자를 비교하는 경우 true\n서로 같은 인자를 비교하는 경우 false를 반환합니다.</p>\n<hr>\n<p><a name=\"배너 이미지 출처\" href=\"https://images.unsplash.com/photo-1461838432805-dff34fe2d8cb?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1770&q=80\">image 출처</a></p>\n",
			"date_published": "2023-08-13T15:24:06Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/SEARCH/merge-sort-nlogn/",
			"url": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/SEARCH/merge-sort-nlogn/",
			"title": "[알고리즘 &gt; 정렬] 합병정렬과 n log n 이해하기 merge sort n log n",
			"content_html": "<sup>\n\t각주:[1](배너_이미지_출처)\n</sup>\n<br>\n<br>\n<br>\n<h1 id=\"merge-sort\" tabindex=\"-1\">합병정렬(merge sort)이란? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/ALGORITHMS/SEARCH/merge-sort-nlogn/\">#</a></h1>\n<blockquote>\n<p>합병 정렬 또는 병합 정렬(영어: merge sort 머지 소트[*])은 O(n log n) 비교 기반 정렬 알고리즘이다. 일반적인 방법으로 구현했을 때 이 정렬은 안정 정렬에 속하며, 분할 정복 알고리즘의 하나이다. 존 폰 노이만이 1945년에 개발했다. 상향식 합병 정렬에 대한 자세한 설명과 분석은 1948년 초 헤르만 골드스타인과 폰 노이만의 보고서에 등장하였다. - 출처: wiki -</p>\n</blockquote>\n<h2 id=\"\" tabindex=\"-1\">합병정렬의 흐름 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/ALGORITHMS/SEARCH/merge-sort-nlogn/\">#</a></h2>\n<p>합병정렬은 아래와 같은 순서로 진행됩니다.</p>\n<ul>\n<li>배열을 재귀적으로 반으로 나눕니다 (배열의 인자가 한개일 때 까지)</li>\n<li>나뉘어진 배열을 정렬하며 합칩니다.</li>\n<li>재귀로 인해 쌓여진 콜스택이 모두 해제되면 정렬된 배열이 만들어집니다.</li>\n</ul>\n<div class=\"mermaid\">\n%%{init: {'theme':'dark'}}%%\n\ngraph TD;\n    A([4,1,2,3])-->B([4, 1])\n    A-->C([2, 3])\n    B-->D([4])\n    B-->E([1])\n    C-->F([2])\n    C-->G([3])\n</div>\n<p>위의 그래프를 기준으로 최하단의 [2], [3]을 비교해 정렬하고\n새로운 배열([2, 3])을 만들어 반환합니다.</p>\n<p>위 과정을 반복합니다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">예시코드 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/ALGORITHMS/SEARCH/merge-sort-nlogn/\">#</a></h2>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">A</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> l <span class=\"token operator\">=</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> r <span class=\"token operator\">=</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// mergeSort의 결과값은 다음 호출될 콜스택의 l과 r의 인자로 사용됩니다.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">l<span class=\"token punctuation\">,</span> r</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    l<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// l, r 두 배열의 0번째 인자를 서로 비교하면서 result 배열에 담아줍니다.</span>\n\t<span class=\"token comment\">// shift로 비교가 끝난 배열의 0번째 인덱스를 지워주면 다음 순회에서도 두 배열을 비교할 수 있습니다.</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>result<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>l<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// l과 r 배열은 인자가 남게 됩니다. 이를 destructuring해주어 정리해줍니다.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> r <span class=\"token operator\">=</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3, 4]</span></code></pre>\n<h2 id=\"n-log-n\" tabindex=\"-1\">n log n <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/ALGORITHMS/SEARCH/merge-sort-nlogn/\">#</a></h2>\n<p>n개의 인자를 가진 배열을 2로 x번 나누면 1개의 인자를 가진 배열이 되었습니다.</p>\n<p>이는 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi mathvariant=\"normal\">/</mi><msup><mn>2</mn><mi>x</mi></msup></mrow><annotation encoding=\"application/x-tex\">n/2^x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span></span></span></span>입니다.</p>\n<p>반대로 1개의 인자를 가진 배열을 x번 두배하면 n개의 인자를 가진 하나의 배열이 될 것입니다.</p>\n<p>이는 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mi>x</mi></msup><mo>=</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">1 * 2^x=n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>로 표현 할 수 있습니다.</p>\n<p>밑을 2로하는 로그로 나타내면\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">x=log_2n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span></span></span></span>입니다.</p>\n<p>4개의 인자를 가진 배열의 경우 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mn>4</mn><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">x=log_24 = 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> 즉 재귀트리의 level은 2까지 자라나게 됩니다.</p>\n<div class=\"mermaid\">\ngraph TD;\n    A([4,1,2,3])-->B([4, 1])\n    A-->C([2, 3])\n    B-->D([4])\n    B-->E([1])\n    C-->F([2])\n    C-->G([3])\n</div>\n<p>나머지 n은 무엇일까요?</p>\n<p>위 코드에서 while문으로 순회하는 비교 및 재정렬이 n에 해당합니다.</p>\n<h2 id=\"-2\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/ALGORITHMS/SEARCH/merge-sort-nlogn/\">#</a></h2>\n<p>합병정렬은 분할정복의 대표적인 예시입니다.\n재귀적으로 분할이 이루어지고,\n콜스택을 해제하면서 합병이 이루어집니다.</p>\n",
			"date_published": "2023-08-10T23:11:29Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/binary-operations-set-differences/",
			"url": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/binary-operations-set-differences/",
			"title": "빼기 | 집합간의 연산",
			"content_html": "<sup>\n각주:  \n[1](배너_이미지_출처)\n</sup>\n<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">집합간의 연산이란 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/binary-operations-set-differences/\">#</a></h1>\n<p>집합간의 연산을 통해 새로운 집합을 만들어내는 것을 의미합니다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">집합간의 빼기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/binary-operations-set-differences/\">#</a></h2>\n<p>집합 A, B에 대해 A에는 포함되고 B에는 포함되지 않는 원소들을 모은 집합을 A - B로 나타낸다, 이를 차집합이라고 한다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>A</mi><mo>−</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A - B\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span></span></p>\n<p>집합 A - B는 무슨 뜻일까요?</p>\n<ul>\n<li>집합 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>∩</mo><mi>B</mi><mo stretchy=\"false\">!</mo><mo>=</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">A \\cap B != \\emptyset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">!</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">∅</span></span></span></span>인 경우 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>−</mo><mi>B</mi><mo>=</mo><mi>A</mi><mo>∩</mo><msup><mi>B</mi><mi>c</mi></msup></mrow><annotation encoding=\"application/x-tex\">A-B=A \\cap B^c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span></span></span></span></span></span></span></span></li>\n<li>집합 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>∩</mo><mi>B</mi><mo>=</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">A \\cap B = \\emptyset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">∅</span></span></span></span>인 경우 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>−</mo><mi>B</mi><mo>=</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A-B = A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span></li>\n</ul>\n<p>여기서 case 1번은 집합 A에서 집합 B와의 교집합 부분을 뺀 부분을 나타냅니다.\ncase 2번은 교집합이 없는 서로소 집합이므로 집합 A에서 빼줄 것이 없으므로 집합 A가 그대로 나오게 됩니다.</p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/vsikvK__wW-900.webp\" width=\"100%\" height=\"auto\" alt=\"set A and B\" loading=\"lazy\" decoding=\"async\"></div>\n<br>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>A</mi><mo>−</mo><mi>B</mi><mo>=</mo><mi>A</mi><mo>∩</mo><msup><mi>B</mi><mi>c</mi></msup></mrow><annotation encoding=\"application/x-tex\">A - B = A \\cap B^{c}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7143919999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>위 벤다이어그램에서 A와 B가 아닌 모든 부분을 제거한 집합을 새로 만들어 내는 것이므로</p>\n<p>집합 A에서 교집합 부분을 뺀 집합을 의미합니다.</p>\n<p>집합간의 뺄셈에서 아래와 같은 연산이 참임을 알 수 있습니다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>B</mi><mo>−</mo><mi>A</mi><mo>=</mo><mi>B</mi><mo>∩</mo><msup><mi>B</mi><mi>c</mi></msup></mrow><annotation encoding=\"application/x-tex\">B - A = B \\cap B^c\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7143919999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>P</mi><mo>−</mo><mi>Q</mi><mo>=</mo><mi>P</mi><mo>∩</mo><msup><mi>P</mi><mi>c</mi></msup></mrow><annotation encoding=\"application/x-tex\">P - Q = P \\cap P^c\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7143919999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<h2 id=\"1\" tabindex=\"-1\">다른 표현 방법 - 1 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/binary-operations-set-differences/\">#</a></h2>\n<p>위 처럼 표시하는 것 말고도 다른 여러가지 표현 방법이 있습니다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>A</mi><mo>−</mo><mi>B</mi><mo>=</mo><mi>A</mi><mo>∩</mo><msup><mi>B</mi><mi>c</mi></msup><mo>=</mo><mi>A</mi><mo>−</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo>∩</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A - B = A \\cap B^{c} = A - (A \\cap B)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7143919999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>A</mi><mo>−</mo><mi>B</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo>∪</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A - B = (A \\cup B) - B\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span></span></p>\n<p>위에서 사용한 complement를 이용해 <code>-</code> 기호를 없애 볼 수 있습니다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>A</mi><mo>−</mo><mi>B</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo>∪</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>B</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo>∪</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>∩</mo><msup><mi>B</mi><mi>c</mi></msup></mrow><annotation encoding=\"application/x-tex\">A - B = (A \\cup B) - B = (A \\cup B) \\cap B^c\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7143919999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<h2 id=\"2\" tabindex=\"-1\">다른 표현 방법 - 2 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/binary-operations-set-differences/\">#</a></h2>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mo>−</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>∪</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo>∩</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo>∩</mo><msup><mi>B</mi><mi>c</mi></msup><mo stretchy=\"false\">)</mo><mo>∪</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo>∩</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(A - B) \\cup (A \\cap B) = (A \\cap B^c) \\cup (A \\cap B)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mo>∩</mo><msup><mi>B</mi><mi>c</mi></msup><mo stretchy=\"false\">)</mo><mo>∪</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo>∩</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>A</mi><mo>∪</mo><mo stretchy=\"false\">(</mo><mi>B</mi><mo>∩</mo><msup><mi>B</mi><mi>c</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(A \\cap B^c) \\cup (A \\cap B) = A \\cup (B \\cap B^c)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>이때 독특한 식이 하나 나오게 됩니다.\n바로 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo>∩</mo><msup><mi>B</mi><mi>c</mi></msup></mrow><annotation encoding=\"application/x-tex\">B \\cap B^c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span></span></span></span></span></span></span></span>입니다.</p>\n<p>이게 무슨 뜻일까요? 집합 B와 여집합 B의 교집합..\n집합 B에 속하면서 B에 속하지 않는 원소들의 집합이란 것은 공집합을 가리킵니다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>A</mi><mo>∪</mo><mo stretchy=\"false\">(</mo><mi>B</mi><mo>∩</mo><msup><mi>B</mi><mi>c</mi></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mi>A</mi><mo>∪</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">A \\cup (B \\cap B^c) = A \\cup \\emptyset\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">∅</span></span></span></span></span></p>\n<p>다시 독특한 식인 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>∪</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">A \\cup \\emptyset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">∅</span></span></span></span>이 나옵니다.\n이는 A와 공집합의 교집합을 의미하므로 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>만 나오게 됩니다.(이는 마치 5 - 0과 같습니다.)</p>\n<p>따라서 정리하면</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>A</mi><mo>∪</mo><mo stretchy=\"false\">(</mo><mi>B</mi><mo>∩</mo><msup><mi>B</mi><mi>c</mi></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A \\cup (B \\cap B^c) = A\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span></span></p>\n<p>라고 할 수 있습니다.</p>\n<h2 id=\"-2\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/binary-operations-set-differences/\">#</a></h2>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo>∩</mo><msup><mi>B</mi><mi>c</mi></msup><mo>=</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">B \\cap B^c = \\emptyset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">∅</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>∪</mo><mi mathvariant=\"normal\">∅</mi><mo>=</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A \\cup \\emptyset = A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">∅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>∩</mo><mi mathvariant=\"normal\">∅</mi><mo>=</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">A \\cap \\emptyset = \\emptyset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">∅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">∅</span></span></span></span></li>\n</ul>\n<hr>\n<p><a name=\"배너 이미지 출처\" href=\"https://images.unsplash.com/photo-1422207049116-cfaf69531072?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1735&q=80\">image 출처</a></p>\n",
			"date_published": "2023-08-06T21:31:17Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/MATHEMATICS/latex-symbols/",
			"url": "https://zerozoo-a.github.io/blog/MATHEMATICS/latex-symbols/",
			"title": "latex 자주 쓰는 심볼들 정리 | latex",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"latex-latex\" tabindex=\"-1\">latex 자주 쓰는 심볼들 정리 | latex <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/latex-symbols/\">#</a></h1>\n<sup>\n[1](PDF_출처)\n[2](배너_이미지_출처)\n</sup>\n<h2 id=\"\" tabindex=\"-1\">자주 쓰는 모음 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/latex-symbols/\">#</a></h2>\n<h3 id=\"forall\" tabindex=\"-1\">forall <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/latex-symbols/\">#</a></h3>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi></mrow><annotation encoding=\"application/x-tex\">\\forall</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">∀</span></span></span></span>: <code>\\forall</code></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mo separator=\"true\">,</mo><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">\\forall{x}, p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∀</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> : x가 될 수 있는 모든 경우에 대해 조건 p가 만족된다.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mo>∈</mo><mi mathvariant=\"double-struck\">N</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\forall{x}\\in \\mathbb{N}, x &gt; 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">∀</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.88333em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> = 모든 자연수에 속하는 x는 0 보다 크다.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mo>∈</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><msqrt><mi>x</mi></msqrt><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\forall{x} \\in [0,\\infin), \\sqrt{x} \\geq 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">∀</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.05028em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8002800000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-2.76028em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.23972em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> = 모든 0 이상의 실수에 대해 x의 제곱근은 0 보다 크거나 같다.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mtext> </mtext><mi>e</mi><mi>x</mi><mi>c</mi><mi>e</mi><mi>p</mi><mi>t</mi><mtext> </mtext><mi>x</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn><mo separator=\"true\">,</mo><mi>x</mi><mo>⋅</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\forall{x} \\ except \\ x \\neq 0, x \\cdot \\frac{1}{x} = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∀</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> = 모든 실수 x에 (0은 제외), <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⋅</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x \\cdot \\frac{1}{x} = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>을 만족한다.</p>\n<h3 id=\"exist\" tabindex=\"-1\">exist <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/latex-symbols/\">#</a></h3>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi></mrow><annotation encoding=\"application/x-tex\">\\exist</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">∃</span></span></span></span>: <code>\\exist</code></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi><mi>x</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\exist{x}, x - 1 = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∃</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>−</mo><mn>1</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x - 1 = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>을 만족하는 x가 적어도 하나는 존재한다.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∃</mi><mi>a</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>+</mo><mi>a</mi><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\forall{x}, \\exist{a}, x + a = x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∀</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∃</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> = 모든 x에 대해 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>a</mi><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x+a=x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>를 만족하는 a가 적어도 하나는 존재한다.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∃</mi><mi>a</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>+</mo><mi>a</mi><mo>=</mo><mi>x</mi><mo>⟶</mo><mi>a</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\forall{x}, \\exist{a}, x + a = x \\longrightarrow a = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∀</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∃</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟶</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> = 모든 x에 대해 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>a</mi><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x+a=x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>를 만족하는 a가 적어도 하나는 존재한다. 그 a는 0이다.</p>\n<h2 id=\"oplus\" tabindex=\"-1\">oplus <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/latex-symbols/\">#</a></h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊕</mo></mrow><annotation encoding=\"application/x-tex\">\\oplus</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">⊕</span></span></span></span>: 두 인자가 서로 다른 경우 true를 반환합니다.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mi>a</mi><mi>l</mi><mi>s</mi><mi>e</mi><mo>⊕</mo><mi>f</mi><mi>a</mi><mi>l</mi><mi>s</mi><mi>e</mi><mo>=</mo><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">false \\oplus false = true</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mi>a</mi><mi>l</mi><mi>s</mi><mi>e</mi><mo>⊕</mo><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi><mo>=</mo><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">false \\oplus true = true</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi><mo>⊕</mo><mi>f</mi><mi>a</mi><mi>l</mi><mi>s</mi><mi>e</mi><mo>=</mo><mi>f</mi><mi>a</mi><mi>l</mi><mi>s</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">true \\oplus false = false</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69841em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi><mo>⊕</mo><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi><mo>=</mo><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">true \\oplus true = true</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69841em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span></span></span></span></p>\n<h2 id=\"-1\" tabindex=\"-1\">그리스와 히브리 문자 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/latex-symbols/\">#</a></h2>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/qmt6vXw6tj-1200.webp\" width=\"100%\" height=\"auto\" alt=\"greek symbols\" loading=\"lazy\" decoding=\"async\"></div>\n<h2 id=\"math-constructs\" tabindex=\"-1\">Math constructs <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/latex-symbols/\">#</a></h2>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/CBecdqyc_m-1200.webp\" width=\"100%\" height=\"auto\" alt=\"math-constructs symbols\" loading=\"lazy\" decoding=\"async\"></div>\n<h2 id=\"delimiters\" tabindex=\"-1\">Delimiters 구분기호 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/latex-symbols/\">#</a></h2>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/QissgUj5w2-1200.webp\" width=\"100%\" height=\"auto\" alt=\"delimiters symbols\" loading=\"lazy\" decoding=\"async\"></div>\n<h2 id=\"variable-sized-symbols\" tabindex=\"-1\">Variable-sized symbols <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/latex-symbols/\">#</a></h2>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><msup><mi>x</mi><mn>2</mn></msup><mtext> </mtext><mi>d</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\int_{a}^{b} x^2 \\,dx\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.5109580000000005em;vertical-align:-0.9119499999999999em;\"></span><span class=\"mop\"><span class=\"mop op-symbol large-op\" style=\"margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5990080000000004em;\"><span style=\"top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span><span style=\"top:-3.812900000000001em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9119499999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span></span></span></span></span></p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/m2YulbaHPA-1200.webp\" width=\"100%\" height=\"auto\" alt=\"variable-sized-symbols symbols\" loading=\"lazy\" decoding=\"async\"></div>\n<h2 id=\"binary-operations-relation-symbols\" tabindex=\"-1\">Binary Operations/Relation symbols 이진 연산 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/latex-symbols/\">#</a></h2>\n<br>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/GX1ZOASpuo-1200.webp\" width=\"100%\" height=\"auto\" alt=\"binary-operation-relation-symbols symbols\" loading=\"lazy\" decoding=\"async\"></div>\n<br>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/xkRS7T5Ypi-1200.webp\" width=\"100%\" height=\"auto\" alt=\"binary-operation-relation-symbols-1 symbols\" loading=\"lazy\" decoding=\"async\"></div>\n<br>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/VnUv2JZtRt-1200.webp\" width=\"100%\" height=\"auto\" alt=\"binary-operation-relation-symbols-2 symbols\" loading=\"lazy\" decoding=\"async\"></div>\n<br>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/qwjXGYU45k-1200.webp\" width=\"100%\" height=\"auto\" alt=\"binary-operation-relation-symbols-3 symbols\" loading=\"lazy\" decoding=\"async\"></div>\n<br>\n<h2 id=\"arrow-symbols\" tabindex=\"-1\">Arrow symbols <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/latex-symbols/\">#</a></h2>\n<br>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/AQ-vRyP9x9-1200.webp\" width=\"100%\" height=\"auto\" alt=\"arrow-symbols symbols\" loading=\"lazy\" decoding=\"async\"></div>\n<br>\n<h2 id=\"miscellaneous-symbols\" tabindex=\"-1\">Miscellaneous symbols <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/latex-symbols/\">#</a></h2>\n<br>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/AffDh5du5c-1200.webp\" width=\"100%\" height=\"auto\" alt=\"miscellaneous-symbols symbols\" loading=\"lazy\" decoding=\"async\"></div>\n<br>\n<h2 id=\"math-mode-accents\" tabindex=\"-1\">Math mode accents <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/latex-symbols/\">#</a></h2>\n<br>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/AffDh5du5c-1200.webp\" width=\"100%\" height=\"auto\" alt=\"miscellaneous-symbols symbols\" loading=\"lazy\" decoding=\"async\"></div>\n<br>\n<h2 id=\"array-environment-examples\" tabindex=\"-1\">Array environment, examples 집합 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/latex-symbols/\">#</a></h2>\n<br>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/c4OtGL34U9-1200.webp\" width=\"100%\" height=\"auto\" alt=\"array-environment symbols\" loading=\"lazy\" decoding=\"async\"></div>\n<br>\n<h2 id=\"other-styles\" tabindex=\"-1\">Other styles <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/latex-symbols/\">#</a></h2>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/cnYkfh3AuH-1200.webp\" width=\"100%\" height=\"auto\" alt=\"other-styles symbols\" loading=\"lazy\" decoding=\"async\"></div>\n<h2 id=\"font-sizes\" tabindex=\"-1\">Font sizes <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/latex-symbols/\">#</a></h2>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/h7nuAUzqNu-1200.webp\" width=\"100%\" height=\"auto\" alt=\"font-sizes symbols\" loading=\"lazy\" decoding=\"async\"></div>\n<h2 id=\"text-mode-accents-and-symbols\" tabindex=\"-1\">Text mode: Accents and Symbols <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/latex-symbols/\">#</a></h2>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/cnYkfh3AuH-1200.webp\" width=\"100%\" height=\"auto\" alt=\"other-styles symbols\" loading=\"lazy\" decoding=\"async\"></div>\n<hr>\n<p><a name=\"PDF_출처\">1</a>: https://cmor.rice.edu/people/faculty, Shield\nRICE UNIVERSITY\nComputational Applied Mathematics &amp; Operations Research, 06/08/2023</p>\n<a name=\"배너_이미지_출처\">\n<p>https://images.unsplash.com/photo-1617617494949-1b29b0e1bf5f?ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;auto=format&amp;fit=crop&amp;w=1776&amp;q=80\n---</p></a><p></p>\n",
			"date_published": "2023-08-06T10:00:30Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/cardinality-of-sets/",
			"url": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/cardinality-of-sets/",
			"title": "집합 원소의 수 | cardinality of sets",
			"content_html": "<p><a href=\"https://plus.unsplash.com/premium_photo-1668487827091-80bfd26b15a9?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1712&q=80\">이미지 출처</a>\n<br>\n<br>\n<br></p>\n<h2 id=\"cardinality-cardinal-number\" tabindex=\"-1\">cardinality란? (= cardinal number) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/cardinality-of-sets/\">#</a></h2>\n<blockquote>\n<p>집합론에서, 집합의 크기(영어: cardinality) 또는 농도(濃度)는 집합의 &quot;원소 개수&quot;에 대한 척도이다. 유한 집합의 크기의 표현은 자연수로 충분하다. 임의의 집합의 크기는 단사 함수 및 전단사 함수를 통해 비교할 수 있으며, 기수로서 대상화할 수도 있다. 집합 A의 크기는 |A| 또는 n(A), A, card(A), # A로 표기한다. - 출처 wiki</p>\n</blockquote>\n<p>집합에서 원소 개수에 대한 척도. 즉 원소 개수를 의미합니다.</p>\n<h2 id=\"\" tabindex=\"-1\">예시 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/cardinality-of-sets/\">#</a></h2>\n<p>set builder로 만든 유한집합을 예로 예시를 들어봅시다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>A</mi><mtext> </mtext><mi mathvariant=\"normal\">∣</mi><mtext> </mtext><mi>A</mi><mtext> </mtext><mi>i</mi><mi>s</mi><mtext> </mtext><mn>1</mn><mtext> </mtext><mo>−</mo><mtext> </mtext><mi>d</mi><mi>i</mi><mi>g</mi><mi>i</mi><mi>t</mi><mtext> </mtext><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mtext> </mtext><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{ A \\space | \\space A \\space is \\space 1 \\space - \\space digit \\space number \\space \\}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\"> </span><span class=\"mord\">∣</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">A</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\"> </span><span class=\"mord\">1</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\"> </span><span class=\"mclose\">}</span></span></span></span></span></p>\n<p>위 집합의 경우 1의 자리 숫자를 집합으로 들었으니\nA의 cardinality는 <code>{1, 2, 3, ..., 9}</code> 총 9개의 원소의 갯수, 즉 9 임을 알 수 있습니다.</p>\n<p><code>집합 B는 3이하의 자연수다</code> 는 아래와 같이 표현할 수 있습니다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>A</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">|A| = 2\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">A</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>B</mi><mo>∣</mo><mi>B</mi><mo>∈</mo><mi mathvariant=\"double-struck\">N</mi><mo>∧</mo><mi>B</mi><mo>≤</mo><mn>3</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{B \\mid B \\in \\mathbb{N} \\wedge B \\leq 3\\}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">}</span></span></span></span></span></p>\n<p>B의 cardinality는 <code>${1, 2, 3}</code> 총 3 입니다.\n아래와 같이 표현할 수 있습니다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>B</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">|B| = 3\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span></span></p>\n<h2 id=\"-1\" tabindex=\"-1\">특별한 집합 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/cardinality-of-sets/\">#</a></h2>\n<ul>\n<li>Empty set\n원소가 없는 집합</li>\n</ul>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∅</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">|\\empty| = 0\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∅</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></span></p>\n<ul>\n<li>Singleton Set\n어떤 원소가 단 하나의 원자만을 가지는 경우</li>\n</ul>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>A</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">|A| = 1\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">A</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span></p>\n<ul>\n<li>Equivalent Sets\n원소의 갯수가 서로 같은 집합</li>\n</ul>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>A</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mi>B</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">|A| = |B|\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">A</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord\">∣</span></span></span></span></span></p>\n<h2 id=\"finite-sets\" tabindex=\"-1\">유한집합 (= Finite Sets) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/cardinality-of-sets/\">#</a></h2>\n<p>원소의 갯수가 정해진 집합 Empty Set이나 원소의 갯수가 n개인 집합\n(n != infinity)</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>n</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mn>0</mn><mtext> </mtext><mi>o</mi><mi>r</mi><mtext> </mtext><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">|n| = 0\\ or\\ n\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">n</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span></span></span></span></span></p>\n<p>컴퓨터는 집합을 특히 많이 사용하게 되는데 어떤 집합이든\n프로그래밍 언어에선 집합에 index가 달립니다.</p>\n<p>이를 Encoding of Elements라고 부르게 됩니다.\n예를 들면 이런 작업입니다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>A</mi><mtext> </mtext><mo>=</mo><mtext> </mtext><mo stretchy=\"false\">{</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>c</mi><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">A\\ =\\ \\{a,b,c, \\dots,x,y,z\\}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">}</span></span></span></span></span></p>\n<p>아래의 각 숫자는 1 = a 부터 z = 26까지 1 대 1 매칭관계를 가집니다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>A</mi><mi>E</mi></msub><mo>=</mo><mo stretchy=\"false\">{</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mn>24</mn><mo separator=\"true\">,</mo><mn>25</mn><mo separator=\"true\">,</mo><mn>26</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">A_E=\\{1,2,3,\\dots,24,25,26\\}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mord\">6</span><span class=\"mclose\">}</span></span></span></span></span></p>\n<h2 id=\"infinite-sets\" tabindex=\"-1\">무한집합 (= Infinite Sets) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/cardinality-of-sets/\">#</a></h2>\n<p>말 그대로 원소의 갯수가 무한한 집합입니다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>A</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">|A| = \\infin\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">A</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span></span></p>\n<p>무한집합은 두가지로 나뉩니다.</p>\n<p>무한하지만 원소의 갯수를 encoding 할 수 있는 집합(Countably Infinite Sets)과, 아닌 집합(UnCountably Infinite Sets)입니다.\n무한집합 중 하나인 자연수를 encoding해보겠습니다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"double-struck\">N</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mo>…</mo><mtext> </mtext><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">|\\mathbb{N}| = \\{1, 2, 3, \\dots\\}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mclose\">}</span></span></span></span></span></p>\n<p>그럼 정수를 encoding 하는 경우 어떻게 해야 할까요?\n정수는 음수부터 0, 양수를 포함하기 때문에 음의 무한대에서 0을 지나 양의 무한대로 확장합니다.</p>\n<p>따라서 encoding이 불가능할까요?</p>\n<p>숫자를 다시 <code>재배치</code>하면 됩니다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mo>−</mo><mn>2</mn><mo separator=\"true\">,</mo><mo>…</mo><mtext> </mtext><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">|\\mathbb{Z}| = \\{0,1,-1,2,-2,\\dots\\}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">−</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mclose\">}</span></span></span></span></span></p>\n<p>반대로 재배치할 수 없는 경우 encoding 할 수 없다고 보면 됩니다.\n실수를 어떻게 배치할 수 있을까요?</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"double-struck\">R</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>0.1</mn><mo separator=\"true\">,</mo><mn>0.01</mn><mo separator=\"true\">,</mo><mo>…</mo><mtext> </mtext><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">|\\mathbb{R}| = \\{0,0.1,0.01,\\dots\\}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mclose\">}</span></span></span></span></span></p>\n<p>음.. 아무래도 불가능해보입니다. 실수 사이사이에 무한한 실수들이 존재하기 때문이죠</p>\n<h2 id=\"-2\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/cardinality-of-sets/\">#</a></h2>\n<p>집합의 cardinality는 집합 원소의 갯수를 나타내며\n수 마다 그 정의가 다르다.</p>\n",
			"date_published": "2023-08-03T23:50:53Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JS/contains/",
			"url": "https://zerozoo-a.github.io/blog/JS/contains/",
			"title": "contains 함수",
			"content_html": "<a href=\"https://images.unsplash.com/photo-1586510433654-bcd64f4d3518?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=774&q=80\">\n이미지 출처\n</a>\n<br>\n<br>\n<br>\n<h2 id=\"contains\" tabindex=\"-1\"><code>contains</code> 함수란? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/contains/\">#</a></h2>\n<p><code>Node.contains()</code> 메소드는 주어진 인자가 node 의 자손인지, 아닌지에 대한 Boolean 값을 리턴합니다. - 출처 mdn</p>\n<p>즉, Node간의 부모 자식간의 관계를 확인하는 함수입니다.</p>\n<p>부모 자식의 관계는 개발에서 매우 중요한 개념인데요\n브라우저에서도 마찬가지입니다.</p>\n<p>특정 이벤트를 버블링 혹은 캡쳐링해서 흘려보낼 때,\n특정 자식이거나 특정 노드인 경우 contains 함수를 활용할 수 있습니다.</p>\n<p>예를 들어 drawer 메뉴가 있다고 합시다.\ndrawer 메뉴는 보통 왼쪽에서 나와 화면의 모든 높이를 차지합니다.</p>\n<p>메뉴가 꽉 차있지 않다면 메뉴에 공백이 생기게 됩니다.</p>\n<p>공백을 클릭했을 때 메뉴를 닫아주고 싶은 경우 contains 함수를 활용할 수 있습니다.</p>\n<p>아래는 예시입니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">\t\t<span class=\"token keyword\">const</span> openDrawerBtn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'openDrawerBtn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> drawerMenu <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'drawerMenu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\topenDrawerBtn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\tdrawerMenu<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tdocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>drawerMenu<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> event<span class=\"token punctuation\">.</span>target <span class=\"token operator\">===</span> drawerMenu<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   \t\t        drawerMenu<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token string\">'-280px'</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n\t\t\tevent<span class=\"token punctuation\">.</span>target <span class=\"token operator\">!==</span> drawerMenu \n\t\t\t<span class=\"token operator\">&amp;&amp;</span> event<span class=\"token punctuation\">.</span>target <span class=\"token operator\">!==</span> openDrawerBtn\n\t\t\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>drawerMenu<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   \t\t         drawerMenu<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token string\">'-280px'</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        </code></pre>\n<p>메뉴에 빈칸을 눌러 메뉴의 취소 이벤트를 발생 시키고 싶은 경우\ncontains로 클릭된 Node가 drawer의 자식인지 확인하고\ndrawer메뉴 자신인지 확인하면 됩니다.</p>\n<p>혹은 자식 Node가 아닌지 확인하는 것으로 충분합니다.</p>\n<h2 id=\"\" tabindex=\"-1\">요약 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/contains/\">#</a></h2>\n<p>contains를 활용하면 x버튼을 굳이 만들지 않아도\n거대하고 편리한 x 버튼을 만들 수 있습니다.</p>\n<p>감사합니다.</p>\n",
			"date_published": "2023-08-02T00:53:18Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/",
			"url": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/",
			"title": "집합 { x | x는 자연수}",
			"content_html": "<p><a href=\"https://images.unsplash.com/photo-1566140967404-b8b3932483f5?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1770&q=80\">이미지 출처</a>\n<br>\n<br>\n<br></p>\n<h1 id=\"\" tabindex=\"-1\">집합에 대해 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/\">#</a></h1>\n<p>집합은 서로 같지 않은 종류의 object 모음이라고 할 수 있다.\n예를 들면 아래와 같이 집합을 정의 할 수 있다.</p>\n<p>프로그래밍에선 집합에 여러 객체를 집어 넣을 수 있으며\n언어에 따라 함수나 클래스 혹은 코드 자체를 집어넣을 수도 있다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>S</mi><mi>e</mi><mi>t</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>4</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">Set=\\{1,2,3,4\\}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">4</span><span class=\"mclose\">}</span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>S</mi><mi>e</mi><mi>t</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>c</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">Set=\\{a, b, c, ..., z\\}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">}</span></span></span></span></span></p>\n<h1 id=\"-1\" tabindex=\"-1\">집합을 표현하는 방법들 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/\">#</a></h1>\n<h2 id=\"enumerating-elements-roster-form\" tabindex=\"-1\">원소나열법 Enumerating elements (Roster form) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/\">#</a></h2>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>S</mi><mi>e</mi><mi>t</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>e</mi><mi>l</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><msub><mi>t</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi>e</mi><mi>l</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><msub><mi>t</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><mi>e</mi><mi>l</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><msub><mi>t</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">Set = \\{element_1, element_2, ..., element_n\\}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></span></p>\n<h2 id=\"set-builder\" tabindex=\"-1\">Set Builder <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/\">#</a></h2>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>S</mi><mi>e</mi><mi>t</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>e</mi><mi>l</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mtext> </mtext><mi mathvariant=\"normal\">∣</mi><mtext> </mtext><mi>e</mi><mi>l</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><msup><mi>s</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi>c</mi><mi>o</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">Set = \\{element \\space | \\space elements&#x27;condition\\}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.051892em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\"> </span><span class=\"mord\">∣</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.801892em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">}</span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>A</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mtext> </mtext><mi mathvariant=\"normal\">∣</mi><mtext> </mtext><mn>1</mn><mo>≤</mo><mi>x</mi><mo>∋</mo><mi mathvariant=\"double-struck\">N</mi><mo>≤</mo><mn>10</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">A = \\{x \\space | \\space 1 \\leq x \\ni \\N \\leq 10\\}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\"> </span><span class=\"mord\">∣</span><span class=\"mspace\"> </span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∋</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.82486em;vertical-align:-0.13597em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mclose\">}</span></span></span></span></span></p>\n<h1 id=\"-2\" tabindex=\"-1\">집합의 예시들 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/\">#</a></h1>\n<ul>\n<li>함수\n<ul>\n<li>domain (정의역)\n<ul>\n<li>함수 f(x)의 입력이 될 수 있는 모든 x 값의 집합을 domain이라고 합니다.</li>\n</ul>\n</li>\n<li>codomain (공역)\n<ul>\n<li>함수에 어떤 값을 대입한 결과가 될 수 있는 것들의 집합이다.</li>\n<li>함수의 값에 해당하는 치역을 포함한다.</li>\n<li>치역이 되지 못한 값들은 공역에 존재한다.</li>\n</ul>\n</li>\n<li>range (치역)\n<ul>\n<li>함수의 값에 해당한다.</li>\n<li>이 값들의 집합을 range라 한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>직선, 평면\n<ul>\n<li>일차함수는 그래프로 나타내면 직선이 되는데 이 직선은 점들의 집합이다.\n<ul>\n<li>따라서 일차함수의 치역들의 집합은 직선이라고 할 수 있다.</li>\n<li></li>\n</ul>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>y</mi><mo>=</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">y = ax + b\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>L</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi>y</mi><mo>=</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">L = \\{(x, y) | y = ax + b\\}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">}</span></span></span></span></span></p>\n  <div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/4Tf2lFkJaq-468.webp\" width=\"100%\" height=\"auto\" alt=\"graph of y=ax+b\" loading=\"lazy\" decoding=\"async\"></div>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"-3\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/\">#</a></h1>\n<p>집합의 기본적인 선언 방법을 알아봤습니다.\n집합의 갯수가 적절히 적다면 나열법이 간단합니다만,\n집합을 나열하기 어려운 경우 Set Builder를 사용합시다.</p>\n",
			"date_published": "2023-07-25T22:38:00Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/Identities-and-Inverses/",
			"url": "https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/Identities-and-Inverses/",
			"title": "항등원과 역원에 대해 | Identities and Inverses",
			"content_html": "<p><a href=\"https://images.unsplash.com/photo-1583265567466-4d9b4e7f63cd?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1770&q=80\">이미지 출처</a>\n<br>\n<br>\n<br></p>\n<h2 id=\"identities\" tabindex=\"-1\">Identities(항등원) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/Identities-and-Inverses/\">#</a></h2>\n<p>어떤 값과 연산이 있을 때, 이 값에 연산을 진행한 결과가 원래의 값과 동일하게 만드는 값\n어떠한 연산을 k라고 하겠습니다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>a</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mi>e</mi><mo>=</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a\\space (k)\\space e = a\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span></span></p>\n<p>연산의 결과로 a가 반환되었습니다.\ne를 이렇게 정의 할 수 있습니다.</p>\n<blockquote>\n<p>e는 연산 k에 대한 항등원이다.</p>\n</blockquote>\n<h2 id=\"inverses\" tabindex=\"-1\">Inverses(역원) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/Identities-and-Inverses/\">#</a></h2>\n<p>Inverse는 Identity를 통해 구할 수 있습니다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>a</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mi>e</mi><mo>=</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a\\space (k)\\space e = a\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span></span></p>\n<p>일 때,</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>a</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mi>x</mi><mo>=</mo><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">a\\space (k)\\space x = e\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span></span></p>\n<p>인 식에 대해</p>\n<p>x는 연산 (k)에 대한 Inverse다. 라고 할 수 있습니다.</p>\n<h2 id=\"additive-identities\" tabindex=\"-1\">Additive Identities (덧셈에 대한 항등원 구하기) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/Identities-and-Inverses/\">#</a></h2>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>a</mi><mo>+</mo><mi>e</mi><mo>=</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a + e = a\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span></span></p>\n<p>양변에 - a를 취합니다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>e</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>a</mi><mo>=</mo><mi>a</mi><mo>−</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">(a + e) - a = a - a  \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span></span></p>\n<p><a href=\"https://www.britannica.com/science/commutative-law\">commutativity law</a>를 통해 위치를 변경합니다.\n(더하기 연산은 commutativity law를 만족합니다. ex: a + b = b + a)</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>e</mi><mo>+</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>a</mi><mo>=</mo><mi>a</mi><mo>−</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">(e + a) - a = a - a\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span></span></p>\n<p><a href=\"https://www.britannica.com/science/associative-law\">associativity law</a>를 통해 연산의 순서를 변경합니다.\n(더하기 연산은 associativity law를 만족합니다. ex: a + (b + c) = (a + b) + c)</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>e</mi><mo>+</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>−</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">e + (a - a) = 0 \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>e</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">e = 0\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></span></p>\n<blockquote>\n<p>0은 임의의 a에 대해 additive Identity(덧셈에 대한 항등원)이다.</p>\n</blockquote>\n<h3 id=\"example\" tabindex=\"-1\">example <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/Identities-and-Inverses/\">#</a></h3>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>2</mn><mo>+</mo><mn>0</mn><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2 + 0 = 2\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>π</mi><mo>+</mo><mn>0</mn><mo>=</mo><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi + 0 = \\pi\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span></span></p>\n<h2 id=\"additive-inverses\" tabindex=\"-1\">Additive Inverses 구하기 (덧셈에 대한 역원 구하기) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/Identities-and-Inverses/\">#</a></h2>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>a</mi><mo>+</mo><mi>x</mi><mo>=</mo><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">a + x = e\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span></span></p>\n<p>에 대해 additive Identity는 0 이라는 것을 증명했으므로 e는 0이다. (e = 0)</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>a</mi><mo>+</mo><mi>x</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a + x = 0\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>a</mi><mo>=</mo><mn>0</mn><mo>−</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">(a + x) - a = 0 - a\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span></span></p>\n<ul>\n<li>by commutative law</li>\n</ul>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>a</mi><mo>=</mo><mo>−</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">(x + a) - a = - a\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">a</span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>x</mi><mo>+</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>−</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo>−</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">x + (a - a) = - a\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">a</span></span></span></span></span></p>\n<ul>\n<li>by associative law</li>\n</ul>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>x</mi><mo>=</mo><mo>−</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">x = - a\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">a</span></span></span></span></span></p>\n<blockquote>\n<p>-a는 임의의 a의 additive inverse이다.</p>\n</blockquote>\n<h3 id=\"example-1\" tabindex=\"-1\">example <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/Identities-and-Inverses/\">#</a></h3>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>2</mn><mo>+</mo><mi>x</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">2 + x = 0\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>π</mi><mo>+</mo><mi>x</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\pi + x = 0 \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></span></p>\n<h2 id=\"multiplicative-identities\" tabindex=\"-1\">Multiplicative Identities (곱셈에 대한 항등원) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/Identities-and-Inverses/\">#</a></h2>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>a</mi><mo>∗</mo><mi>e</mi><mo>=</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a * e = a\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo>⋅</mo><mi>e</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mi>a</mi><mo>⋅</mo><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">(a \\cdot e) \\cdot a^{-1} = a \\cdot a^{-1}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.864108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.864108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>e</mi><mo>⋅</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">(e \\cdot a) \\cdot a^{-1} = 1\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.864108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span></p>\n<ul>\n<li>by commutative</li>\n</ul>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>e</mi><mo>⋅</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">(e \\cdot a) \\cdot a^{-1} = 1\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.864108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span></p>\n<ul>\n<li>by associative</li>\n</ul>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>e</mi><mo>⋅</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>⋅</mo><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">e \\cdot (a \\cdot a^{-1}) = 1\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>e</mi><mo>⋅</mo><mn>1</mn><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">e \\cdot 1 = 1\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>e</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">e = 1\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span></p>\n<blockquote>\n<p>1은 임의의 a의 multiplicative identity이다.</p>\n</blockquote>\n<h3 id=\"example-2\" tabindex=\"-1\">example <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/Identities-and-Inverses/\">#</a></h3>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>π</mi><mo>⋅</mo><mn>1</mn><mo>=</mo><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi \\cdot 1 = \\pi\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span></span></p>\n<h2 id=\"multiplicative-inverses\" tabindex=\"-1\">Multiplicative Inverses (곱셈에 대한 역원) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/Identities-and-Inverses/\">#</a></h2>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>a</mi><mo>⋅</mo><mi>x</mi><mo>=</mo><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">a \\cdot x = e\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span></span></p>\n<p>에 대해 e는 Multiplicative identity임을 보였으므로 e = 1이다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>a</mi><mo>⋅</mo><mi>x</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a \\cdot x = 1\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo>⋅</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mn>1</mn><mo>⋅</mo><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">(a \\cdot x) \\cdot a^{-1} = 1 \\cdot a^{-1}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.864108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.864108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>by commutative</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>⋅</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">(x \\cdot a) \\cdot a^{-1} = a^{-1}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.864108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.864108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>by associative</p>\n<p>이제 정리해주면</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>x</mi><mo>⋅</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>⋅</mo><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">x \\cdot (a \\cdot a^{-1}) = a^{-1}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.864108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>x</mi><mo>⋅</mo><mn>1</mn><mo>=</mo><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">x \\cdot 1 = a^{-1}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.864108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>x</mi><mo>=</mo><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">x = a^{-1}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.864108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>x</mi><mo>=</mo><mfrac><mn>1</mn><mi>a</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">x = \\frac{1}{a}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>임을 알 수 있다.</p>\n<blockquote>\n<p>a{^-1}은 임의의 a의 multiplicative inverse다.</p>\n</blockquote>\n<h3 id=\"example-3\" tabindex=\"-1\">example <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/Identities-and-Inverses/\">#</a></h3>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>π</mi><mo>⋅</mo><mi>x</mi><mo>=</mo><mn>1</mn><mo>→</mo><mi>x</mi><mo>=</mo><msup><mi>π</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo>=</mo><mfrac><mn>1</mn><mi>π</mi></mfrac><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\pi \\cdot x = 1 \\rightarrow x = \\pi^{-1}(x = \\frac{1}{\\pi})\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<h2 id=\"\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/MATHEMATICS/Algebraic/Sets/Identities-and-Inverses/\">#</a></h2>\n<p>기초적이지만 정리할 필요가 있음을 느낍니다.</p>\n",
			"date_published": "2023-07-23T13:21:31Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/wiki/Http/post-man%EC%97%90-authorization-token-%EC%8B%AC%EA%B8%B0/",
			"url": "https://zerozoo-a.github.io/blog/wiki/Http/post-man%EC%97%90-authorization-token-%EC%8B%AC%EA%B8%B0/",
			"title": "post man의 header 다루기",
			"content_html": "<p><a href=\"https://images.unsplash.com/photo-1575895901610-ae6503f60136?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=928&q=80\">이미지 출처</a></p>\n<br>\n<br>\n<br>\n<blockquote>\n<p>postman에서 header를 다루어보자</p>\n</blockquote>\n<h2 id=\"postman\" tabindex=\"-1\">postman이란? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/Http/post-man%EC%97%90-authorization-token-%EC%8B%AC%EA%B8%B0/\">#</a></h2>\n<p>postman은 각종(http를 포함한) 통신들을\n쉽게 다루고 저장, 공유등을 도와주는 소프트웨어입니다.</p>\n<p><a href=\"https://www.postman.com/\">postman site</a></p>\n<h2 id=\"header\" tabindex=\"-1\">header란? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/Http/post-man%EC%97%90-authorization-token-%EC%8B%AC%EA%B8%B0/\">#</a></h2>\n<p>HTTP 헤더는 클라이언트와 서버가 요청 또는 응답으로 부가적인 정보를 전송할 수 있도록 해줍니다.</p>\n<h2 id=\"\" tabindex=\"-1\">필요한 이유 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/Http/post-man%EC%97%90-authorization-token-%EC%8B%AC%EA%B8%B0/\">#</a></h2>\n<p>비즈니스로직이 복잡해질 수록 헤더에는 이런저런 정보들이 올라가게 됩니다.</p>\n<p>특정 상황이 될수록 http 통신이 이루어지는 state를 재구현하기 힘든 경우가 생겨나게됩니다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">하는 법 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/Http/post-man%EC%97%90-authorization-token-%EC%8B%AC%EA%B8%B0/\">#</a></h2>\n<p>아래의 이미지를 보시면 http 통신에 사용되는 옵션들을 설정할 수 있습니다.</p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/czINRzgWqw-1200.webp\" width=\"100%\" height=\"auto\" alt=\"postman request\" loading=\"lazy\" decoding=\"async\"></div>\n<p>Authorization 옵션을 선택합니다.\n본인의 환경에 맞는 방법을 선택해주세요</p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/gBNQ8ivAAT-628.webp\" width=\"100%\" height=\"auto\" alt=\"postman Authorization setting\" loading=\"lazy\" decoding=\"async\"></div>\n<p>예시로 token을 선택해봅시다.</p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/prTw01d1F3-1200.webp\" width=\"100%\" height=\"auto\" alt=\"postman Authorization setting\" loading=\"lazy\" decoding=\"async\"></div>\n토큰의 경우 서버측에서 사용하는 스펙을 알고있다면 더욱 좋습니다.\n<h2 id=\"-2\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/Http/post-man%EC%97%90-authorization-token-%EC%8B%AC%EA%B8%B0/\">#</a></h2>\n<p>postman은 보통 서버측에서 사용하는 경우가 많습니다.</p>\n<p>하지만 클라이언트 측에서도 그 활용도는 막강합니다.\n이런 단순 요청 저장이외에도 응답받은 데이터를 그대로 로컬에 저장 할 수도 있습니다.\nworkspace를 통해 동료와 함께 사용한다면 그 효용성이 더욱 좋을것입니다.</p>\n",
			"date_published": "2023-07-23T00:58:53Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/wiki/operating-system/lsof-kill/",
			"url": "https://zerozoo-a.github.io/blog/wiki/operating-system/lsof-kill/",
			"title": "lsof-kill",
			"content_html": "<br>\n<p><a href=\"https://plus.unsplash.com/premium_photo-1677535563007-d10ba8cb423d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2233&q=80\">이미지 출처</a></p>\n<blockquote>\n<p>cli 프로그램을 알아보고 사용할 수 있다.</p>\n</blockquote>\n<h2 id=\"lsof\" tabindex=\"-1\">lsof <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/operating-system/lsof-kill/\">#</a></h2>\n<p>lsof = list of file process를 점유하고 있는 list를 보여줍니다.\n(기본적으로 많은 내용을 담고 있으므로 찾고 싶은 특정 process를 찾아내려면 필터링이 필요합니다.)</p>\n<ul>\n<li>\n<p>--help 명령어를 통해 option과 사용법을 알 수 있습니다.</p>\n</li>\n<li>\n<p>-i 옵션을 통해 특정 port번호를 사용하고 있는 PID(process id)를 확인할 수 있습니다.</p>\n</li>\n</ul>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"> <span class=\"token function\">lsof</span> <span class=\"token parameter variable\">-i</span> :8080\n COMMAND     PID <span class=\"token environment constant\">USER</span>   FD   TYPE             DEVICE SIZE/OFF NODE NAME\nGoogle    <span class=\"token number\">47241</span>  zerozoo   26u  IPv6 0x000000000000000d      0t0  TCP localhost:53197-<span class=\"token operator\">></span>localhost:http-alt <span class=\"token punctuation\">(</span>CLOSE_WAIT<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">..</span>.</code></pre>\n<br>\n<br>\n<h2 id=\"kill\" tabindex=\"-1\">kill <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/operating-system/lsof-kill/\">#</a></h2>\n<p>특정 프로세스를 죽입니다.\nkill -l 명령어를 통해 프로세스를 죽이는 방식을 확인 할 수 있습니다.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">// OSX <span class=\"token number\">13.3</span>.1\nHUP INT QUIT ILL TRAP ABRT EMT FPE KILL BUS SEGV SYS PIPE ALRM <span class=\"token environment constant\">TERM</span> URG STOP TSTP CONT CHLD TTIN TTOU IO XCPU XFSZ VTALRM PROF WINCH INFO USR1 USR2</code></pre>\n<p>보통 9, 15를 많이 사용합니다. 9는 kill -l의 kill을 나타내며 15는 term (terminate)를 나타냅니다.</p>\n<p>9는 강제 종료, 15는 저장 후 종료입니다.</p>\n<h2 id=\"\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/operating-system/lsof-kill/\">#</a></h2>\n<ul>\n<li>\n<p>lsof를 통해 PID를 알아냅니다.</p>\n</li>\n<li>\n<p>kill을 통해 프로세스를 죽입니다.</p>\n</li>\n</ul>\n",
			"date_published": "2023-07-23T00:32:24Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/RECURSIVE/tower-of-hanoi/",
			"url": "https://zerozoo-a.github.io/blog/CS/RECURSIVE/tower-of-hanoi/",
			"title": "선행재귀를 알아보는 법",
			"content_html": "<p><a href=\"https://images.unsplash.com/photo-1562516155-e0c1ee44059b?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2232&q=80\">이미지 출처</a>\n<br>\n<br>\n<br></p>\n<h1 id=\"\" tabindex=\"-1\">선행재귀란? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/RECURSIVE/tower-of-hanoi/\">#</a></h1>\n<p>재귀함수는 보통 재귀 호출부와 작업 수행부로 나눌 수 있습니다.</p>\n<p>선행재귀는 작업을 수행하기 전에 재귀 호출부를 먼저 수행하는 재귀함수를 뜻합니다.</p>\n<h1 id=\"-1\" tabindex=\"-1\">예시 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/RECURSIVE/tower-of-hanoi/\">#</a></h1>\n<p>아래의 함수는 실행부인 덧셈이 시작되긴하지만 완료되기 전에 재귀함수를 호출합니다.\n따라서 재귀는 연속적으로 호출되다 기저조건을 만나 재귀호출부가 완전히 종료됩니다.</p>\n<p>그 다음 실행부인 덧셈이 연속적으로 실행되고 콜스택이 모두 소진되면 답을 반환합니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {number} n\n * */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">+</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n",
			"date_published": "2023-07-19T22:37:08Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/RECURSIVE/recursive-hanoi-tower/",
			"url": "https://zerozoo-a.github.io/blog/CS/RECURSIVE/recursive-hanoi-tower/",
			"title": "하노이의 탑",
			"content_html": "<br>\n<br>\n<br>\n<h1 id=\"\" tabindex=\"-1\">하노이의 탑이란? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/RECURSIVE/recursive-hanoi-tower/\">#</a></h1>\n<blockquote>\n<p>하노이의 탑(Tower of Hanoi)은 퍼즐의 일종이다. 세 개의 기둥과 이 기둥에 꽂을 수 있는 크기가 다양한 원판들이 있고, 퍼즐을 시작하기 전에는 한 기둥에 원판들이 작은 것이 위에 있도록 순서대로 쌓여 있다.</p>\n</blockquote>\n<p><a href=\"https://ko.wikipedia.org/wiki/%ED%95%98%EB%85%B8%EC%9D%B4%EC%9D%98_%ED%83%91\">wikipedia</a></p>\n<p>하노이의 탑의 규칙</p>\n<ol>\n<li>한 번에 한개의 원판만 옮길 수 있다.</li>\n<li>가장 위에 있는 원판만 이동할 수 있다.</li>\n<li>큰 원판이 작은 원판 위에 있어서는 안 된다.</li>\n</ol>\n<br>\n<br>\n<p>DP 관련 서적들을 뒤적이다 보면 꼭 등장하는 단골 손님인 하노이의 탑 문제입니다.</p>\n<p>하노이의 탑 문제를 분석해봅시다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">분석 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/RECURSIVE/recursive-hanoi-tower/\">#</a></h2>\n<p>하노이의 탑 문제는 하위문제로 상위 문제를 해결 할 수 있습니다.</p>\n<p>그 이유를 예제를 통해 알아보겠습니다.</p>\n<h2 id=\"-2\" tabindex=\"-1\">예제 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/RECURSIVE/recursive-hanoi-tower/\">#</a></h2>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/wNDlzw7jgn-900.webp\" width=\"100%\" height=\"auto\" alt=\"3 tower\" loading=\"lazy\" decoding=\"async\"></div>\n<br>\n<blockquote>\n<p>n = 2인 하노이의 탑은 이런 모양으로 시작하게 됩니다.\n탑의 순서대로 <code>s, d, e</code>로 각각 이름을 지어줍니다.\n<br>\n<br>\n<code>s = start, d = destination, e = extra입니다.</code></p>\n</blockquote>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/ze49TBH5X6-1200.webp\" width=\"100%\" height=\"auto\" alt=\"3 tower_2\" loading=\"lazy\" decoding=\"async\"></div>\n<blockquote>\n<p><code>n - 1</code> 개의 원판을, <br>\n<strong>탑 <code>&quot;d&quot;</code>를 이용해,</strong> <br>\n탑 <code>&quot;e&quot;</code>에 옮겨놓았다고 가정합시다.<br><br></p>\n</blockquote>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/MVYSLkmwvP-1200.webp\" width=\"100%\" height=\"auto\" alt=\"3 tower_3\" loading=\"lazy\" decoding=\"async\"></div>\n<blockquote>\n<p><code>n</code> 번째 원판을 d에 옮겨줍니다.<br><br>\n<code>n</code> 번째 원판은 가장 큰 원판을 가리킵니다.</p>\n</blockquote>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/ZqhYZTNsmP-1200.webp\" width=\"100%\" height=\"auto\" alt=\"3 tower_4\" loading=\"lazy\" decoding=\"async\"></div>\n<blockquote>\n<p><code>n - 1</code> 개의 원판을, <br>\n<strong>탑 <code>&quot;s&quot;</code>를 이용해,</strong> <br>\n탑 <code>&quot;d&quot;</code>에 옮겨놓습니다.\n<br><br></p>\n</blockquote>\n<h2 id=\"-3\" tabindex=\"-1\">구현 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/RECURSIVE/recursive-hanoi-tower/\">#</a></h2>\n<p>하노이의 탑 구현은 아래와 같습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// javascript</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token number\">3</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>n<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 번째 원판을</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>s<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">에서 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>d<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">로 이동</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>실행은 아래와 같습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"-4\" tabindex=\"-1\">기저조건 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/RECURSIVE/recursive-hanoi-tower/\">#</a></h3>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// javascript</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token number\">3</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 기저조건입니다.</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>기저조건은 <code>n &lt;= 0</code>입니다.</p>\n<p>n은 원판의 번호를 나타냅니다.</p>\n<p>0 번째 원판은 원판이 모두 소진되어 바닥을 봤다는 의미입니다.</p>\n<p>함수의 각 부분을 나누어 이해하겠습니다.\n<br></p>\n<h3 id=\"-5\" tabindex=\"-1\">경유지 탑으로의 재귀 호출 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/RECURSIVE/recursive-hanoi-tower/\">#</a></h3>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// javascript</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token number\">3</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 재귀 호출</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이 호출을 이해하기 위해서는 두가지 설명이 필요합니다.</p>\n<ol>\n<li>재귀 호출 인자의 순서가 바뀐 것</li>\n<li>호출의 이유</li>\n</ol>\n<p><code>1번</code>을 설명하면 <code>2번</code>도 자연스레 설명됩니다.</p>\n<p>재귀 호출의 순서가 바뀌었죠\n이는 탑의 순서가 바뀐 것입니다.</p>\n<p>함수의 각 인자는 아래의 예시처럼\n인자의 위치(탑의 이름이 아닌)에 따라 역할을 정할 수 있습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// javascript</span>\n<span class=\"token comment\">/**\n * @param {string} s 원판이 쌓인 장소 (출발 탑)\n * @param {string} d 원판이 쌓인 장소로부터 이동 할 탑 (목적지 탑)\n * @param {string} e 원판을 목적지로 이동시키기 위해 필요한 (경유지 탑)\n * @param {number} n 원판의 수\n * */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token number\">3</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>그림을 통해 확인한 바로는</p>\n<p>n - 1까지의 원판들을 목적지로 이동시키기 위해선\n먼저 n - 1까지의 원판들을 경유지 탑까지 이동 시켜야합니다.</p>\n<blockquote>\n<p><code>hanoi</code>함수의 첫 인자는 출발 탑,<br>\n두 번째 인자는 목적지 탑,<br>\n세 번째 인자는 경유지 탑,<br>\n네 번째 인자는 원판의 번호입니다.</p>\n</blockquote>\n<p>여기서 순서는 중요합니다.</p>\n<blockquote>\n<p>첫번째 인자에 d를 넣고,<br>\n두번째 인자에 e를 넣고,<br>\n세번째 인자에 s를 넣으면</p>\n</blockquote>\n<p>이렇게 해석됩니다.</p>\n<p><code>탑 d에서 탑 s를 이용해 탑 e로 원판들을 옮긴다.</code></p>\n<p>위 규칙에 따라 재귀 호출을 시작할 때\nn - 1번째 까지의 원판을 경유지 탑으로 옮기기 위해</p>\n<p>목적지 탑 인자의 위치에 경유지 탑을,\n경유지 탑 위치에 목적지 탑을 넣은 것입니다.</p>\n<h3 id=\"-6\" tabindex=\"-1\">실행하기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/RECURSIVE/recursive-hanoi-tower/\">#</a></h3>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// javascript</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token number\">3</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>n<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 번째 원판을 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>s<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">에서 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>d<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">로 이동</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>재귀호출을 돌다가 원판을 이동시킵니다.</p>\n<p>인자 d는 재귀호출 인자의 순서를 변경하면서 바뀔 수 있다는 것을\n이미 언급했습니다. d는 변수이고 안의 내용물은 바뀌게 됩니다.</p>\n<h3 id=\"-7\" tabindex=\"-1\">목적지 탑으로의 재귀 호출 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/RECURSIVE/recursive-hanoi-tower/\">#</a></h3>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// javascript</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token number\">3</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 재귀호출 인자의 순서가 가진 규칙에 따르면</p>\n<p><code>탑 e에 있는 원판들을 탑 s를 이용해 탑 d로 이동시킵니다.</code></p>\n<h3 id=\"-8\" tabindex=\"-1\">의문점 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/RECURSIVE/recursive-hanoi-tower/\">#</a></h3>\n<p>가장 큰 의문점은 이렇게 풀어봤자 이해가 가지 않는다는\n치명적인 단점이 있습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// javascript</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token number\">3</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>n<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 번째 원판을 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>d<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">로 이동</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>n을 2로 실행횟수를 줄여 이해 해봅시다.</p>\n<p>첫 재귀는 인자의 d와 e의 순서를 서로 변경합니다.\n아래와 같은 인자로 함수를 호출합니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>그럼 다시 시작된 hanoi 함수의 인자는</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// javascript debugger</span>\n<span class=\"token literal-property property\">s</span><span class=\"token operator\">:</span> s<span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">d</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">e</span><span class=\"token operator\">:</span> d<span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">n</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span></code></pre>\n<p>위의 상태가 됩니다.</p>\n<p>기저조건을 통과하고 다시 재귀함수를 만나게 됩니다.</p>\n<p>함수의 인자를 아래와 같이 넘겨줄 것입니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// javascript</span>\n<span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>다시 첫 재귀 호출을 하던 인자로 넘겨주고 있습니다.</strong>\n기저조건에 닿아 위 함수의 실행하기 부분은 무시되겠지만\n실행된다고 가정한다면</p>\n<p><code>s 탑에 있는 0번째 원판을 꺼내 d로 옮긴다.</code>입니다.</p>\n<p>콜스택에 쌓인대로 정리하자면</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 무시됨</span>\n<span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 실행됨</span>\n<span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 실행됨</span></code></pre>\n<p>콜스택의 인자들을 보면 인자들의 순서가 반복됨을 알 수 있습니다.</p>\n<p>실행되는 함수들의 실행부의 출력만 모아보면</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">\n<span class=\"token comment\">// 1 번째 원반을 s에서 e로 이동시킵니다.</span>\n<span class=\"token comment\">// 2 번째 원반을 s에서 d로 이동시킵니다.</span></code></pre>\n<p>인자의 입력 순서가 번갈아가며 반복되는 덕에 적절하게 각 탑에 원판을 올바른 순서로 분배했습니다.</p>\n<p>기저조건에 닿았으니 함수들이 실행되었습니다.</p>\n<p>그 다음은 <strong>목적지 탑으로의 재귀 호출</strong>입니다.</p>\n<p>목적지 탑으로의 재귀 호출은\n경유지 탑으로의 재귀 호출과 그 방식이 다르지 않습니다.\n따라서 설명보다는 이 알고리즘의 프레임에 대해 언급하는 것이 낫겠습니다.</p>\n<p>이 풀이의 골자는 재귀함수의 중위순회에 있습니다.</p>\n<p>중위순회는 루트의 값을 순회중 출력이 중앙값에 도달했을 때 출력합니다.</p>\n<p>따라서 가장 큰 원판을 출발 탑에서 목적지 탑으로 옮길 수 있는 것이고</p>\n<p>경유지탑으로 옮겼던 원판들을 똑같은 방법을 통해\n목적지 탑으로 옮길 수 있는 것입니다.</p>\n<h2 id=\"-9\" tabindex=\"-1\">마치며 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/RECURSIVE/recursive-hanoi-tower/\">#</a></h2>\n<p>아주 재미있는 문제입니다.</p>\n<p>처음엔 어려웠지만 여러번 되새길 수록 배울게 많은 문제입니다.</p>\n<p>최적화 할 것도 많아보입니다.</p>\n",
			"date_published": "2023-07-06T23:45:48Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/wiki/11ty/use-latext-in-11ty/",
			"url": "https://zerozoo-a.github.io/blog/wiki/11ty/use-latext-in-11ty/",
			"title": "11ty에서-latex-사용하기",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"latex\" tabindex=\"-1\">latex란? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/11ty/use-latext-in-11ty/\">#</a></h2>\n<p><a href=\"https://namu.wiki/w/LaTeX\">latex</a> latex는\nmd와 비슷하게 특정 형식으로 쓰여진 문자열을 수학 식으로 바꿔 표현해주는 것을 의미합니다.</p>\n<p>예를 들어 <code>log5</code>를 적으면 로그 5라는 것을 알 수는 있습니다.</p>\n<p>단 이쁘지 않고 식이 복잡해지기 시작하면 식이 더 못생겨지고 못생긴 수학식은 서로 다르게 이해할 수 있습니다.</p>\n<p>수학의 가장 강한 특징인 전세계 공통 언어라는 특징을 잃어버립니다.</p>\n<p>이제 여기서 latex가 하는 일이 무엇인지 아실겁니다.</p>\n<p><strong>바로 수학 식을 이쁘게 바꿔줍니다.</strong></p>\n<p>아래와 같이 말입니다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.3599999999999999em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext> if </mtext><mn>1</mn><mo separator=\"true\">,</mo><mtext> </mtext><mn>1</mn><mo stretchy=\"false\">(</mo><mi>n</mi><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext> if </mtext><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mtext> </mtext><mn>1</mn><mo stretchy=\"false\">(</mo><mi>n</mi><mo>&gt;</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">f(n)=\\begin{cases}\n\\text{ if } 1,\\space{1}(n = 1, 2) \\\\\n\\text { if } f(n - 1) + f(n - 2),\\space{1}(n &gt; 2)\n\\end{cases}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0000299999999998em;vertical-align:-1.25003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\"> if </span></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\"> if </span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<h2 id=\"eleventy\" tabindex=\"-1\">eleventy에 설치하기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/11ty/use-latext-in-11ty/\">#</a></h2>\n<p>library를 설치합니다.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token comment\"># 원하는 lib를 찾아 설치해주세요</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> @iktakahiro/markdown-it-katex</code></pre>\n<h2 id=\"eleventy-config\" tabindex=\"-1\">eleventy.config에 설정하기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/11ty/use-latext-in-11ty/\">#</a></h2>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// eleventy.config.js 설정하기</span>\n\n<span class=\"token keyword\">const</span> mk <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@iktakahiro/markdown-it-katex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Customize Markdown library settings:</span>\neleventyConfig<span class=\"token punctuation\">.</span><span class=\"token function\">amendLibrary</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"md\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">mdLib</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 여러분들의 md lib들을 추가해주세요</span>\n    mdLib<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>mk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n",
			"date_published": "2023-07-06T22:42:30Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/RECURSIVE/recursive-power/",
			"url": "https://zerozoo-a.github.io/blog/CS/RECURSIVE/recursive-power/",
			"title": "recursive-power",
			"content_html": "<br>\n<br>\n<br>\n<p>임의의 수 x의 n제곱을 점화식으로 나타내면 다음과 같이 정의할 수 있습니다.</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msup><mi>x</mi><mi>n</mi></msup><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.3599999999999999em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>x</mi><mo>∗</mo><msup><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo separator=\"true\">,</mo><mtext> </mtext><mn>1</mn><mo stretchy=\"false\">(</mo><mi>n</mi><mo>&gt;</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mn>1</mn><mo separator=\"true\">,</mo><mtext> </mtext><mn>1</mn><mo stretchy=\"false\">(</mo><mi>n</mi><mo>=</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">x^n = \n\\begin{cases}\nx * x^{n-1}, \\space{1} (n &gt; 1)\\\\\n1, \\space{1} (n = 1)\n\\end{cases}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7143919999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0000299999999998em;vertical-align:-1.25003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>이를 재귀로 표현합니다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token comment\">// java</span>\n<span class=\"token keyword\">package</span> <span class=\"token namespace\">recursiveTree</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Recurisves</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token function\">power</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">power</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> <span class=\"token function\">power</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n",
			"date_published": "2023-07-06T22:33:12Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/DATA_STRUCTURE/TREE/basic-of-recursive/",
			"url": "https://zerozoo-a.github.io/blog/CS/DATA_STRUCTURE/TREE/basic-of-recursive/",
			"title": "재귀 함수의 기본 1",
			"content_html": "<p><a href=\"https://unsplash.com/ko/%EC%82%AC%EC%A7%84/2UjheC7FBWQ\">출처</a></p>\n<br>\n<br>\n<br>\n<h2 id=\"\" tabindex=\"-1\">재귀를 호출하기 전, 후의 차이 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/DATA_STRUCTURE/TREE/basic-of-recursive/\">#</a></h2>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token comment\">// java</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> recursiveTree <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">recur</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> recur <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before call recur count\"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">recur</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after call recur count\"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위 함수의 출력은 아래와 같습니다.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">before call recur count3\nbefore call recur count2\nbefore call recur count1\nafter call recur count1\nafter call recur count2\nafter call recur count3</code></pre>\n<p>재귀는 보통 콜스택에 쌓이는 형태입니다.</p>\n<p>또한 재귀는 특정 데이터를 재귀 함수의 연속적인 호출을 통해\n데이터를 넘겨줍니다.</p>\n<p>이를 활용할 수 있습니다.</p>\n<ol>\n<li>콜스택에 쌓이기 전에 데이터를 조회합니다.</li>\n<li>콜스택에 쌓이고 난 후에 데이터를 조회합니다.</li>\n</ol>\n<p>위의 예를 통해 이해해보자면 3이라는 데이터를 넘기면서\n다음 함수에 넘겨줄 인자로 3 - 1의 값을 넘겨줍니다.</p>\n<p>이 값을 다음 함수에 넘겨주기 전에 호출한다면</p>\n<p>콜스택에 쌓이기 전에 데이터를 조회한 것입니다.</p>\n<p>그렇다면 콜스택에 쌓이고 난 후에 데이터를 조회하는 방법은\n그 반대입니다.</p>\n<p><code>if(count == 0) return;</code></p>\n<p>재귀 함수는 기저조건에 닿게 되면 재귀 함수의 종료를 의미합니다.\n따라서 콜스택은 쌓아둔 스택을 하나씩 해제합니다.</p>\n<p>해제하면서 쌓아둔 <code>스택을 역으로 순회</code>합니다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/CS/DATA_STRUCTURE/TREE/basic-of-recursive/\">#</a></h2>\n<p>재귀에서 이어지는 데이터를 언제 조회하는지에 따라\n오름차순, 내림차순을 조회할 수 있다는 것을 알아보았습니다.</p>\n",
			"date_published": "2023-07-04T22:58:00Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JAVA/leet-code/n-queen/",
			"url": "https://zerozoo-a.github.io/blog/JAVA/leet-code/n-queen/",
			"title": "n-queen 문제",
			"content_html": "<br>\n<br>\n<br>\nn queens 문제\n<p>이번 문제는 leet code를 돌아다니다가 좋은 답을 발견하여 이를 이해해보고자 합니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// js</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">solveNQueens</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//  final result</span>\n  <span class=\"token keyword\">let</span> goodPlacement <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// chess board, initialized with '.', of size n x n</span>\n  <span class=\"token keyword\">let</span> board <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> colSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// occupy flag for each column</span>\n  <span class=\"token keyword\">let</span> priDiagSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// occupy flag for each primary diagonal (i.e., Northwest &lt;-> Southeast direction )</span>\n  <span class=\"token keyword\">let</span> secDiagSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// occupy flag for each secondary diagonal (i.e., Northeast &lt;-> Southwest direction )</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">isSafe</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">row<span class=\"token punctuation\">,</span> col</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">!</span>colSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n      <span class=\"token operator\">!</span>priDiagSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>col <span class=\"token operator\">-</span> row<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n      <span class=\"token operator\">!</span>secDiagSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>col <span class=\"token operator\">+</span> row<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">,</span> putOn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>putOn <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// put Queen on specified position, and set corresponding occupy flag</span>\n      board<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Q\"</span><span class=\"token punctuation\">;</span>\n      colSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      priDiagSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>col <span class=\"token operator\">-</span> row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      secDiagSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>col <span class=\"token operator\">+</span> row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// take Queen away from specified position, and clear corresponding occupy flag</span>\n      board<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">;</span>\n      colSet<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      priDiagSet<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>col <span class=\"token operator\">-</span> row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      secDiagSet<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>col <span class=\"token operator\">+</span> row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Notice that here we use the DFS + backtracking template, just like what we described before.</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">placeQueen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">row <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Base case aka stop condition</span>\n    <span class=\"token comment\">// We already placed all N Queens in good position</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>row <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      goodPlacement<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">eachRow</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> eachRow<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// General cases:</span>\n    <span class=\"token comment\">// Try all possible columns in DFS + backtracking</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> col <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> col <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isSafe</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// make a selection</span>\n        <span class=\"token function\">placeQueen</span><span class=\"token punctuation\">(</span>row <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// solve next row in DFS</span>\n        <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undo selection</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ---------------------------------------</span>\n\n  <span class=\"token comment\">// Start placing Queen from row_#0</span>\n  <span class=\"token function\">placeQueen</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> goodPlacement<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">solveNQueens</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><a href=\"https://www.geeksforgeeks.org/n-queen-problem-backtracking-3/\">n-queen</a>의 설명은 링크와 같습니다.</p>\n<p>n-queen 문제의 핵심적인 풀이법은 아래와 같습니다.</p>\n<p>퀸은 한 행에 하나의 퀸만 놓을 수 있습니다.</p>\n<p>각 행의 퀸들은 북서에서 남동 방향 모든 칸들, 북동에서 남서로 이어지는 모든 칸들을 이동할 수 있습니다.</p>\n<p>또한 북에서 남으로 동에서 서로 이어지는 모든 칸을 이동 할 수 있습니다.</p>\n<p>이동 방향위에 다른 체스 말이 있다면 해당 말을 잡을 수 있습니다.</p>\n<p>따라서 각 퀸은 서로의 이동 방향에 놓여있으면 안됩니다.</p>\n<p>대략적인 풀이는 아래와 같습니다.</p>\n<ul>\n<li>첫 행에 퀸을 놓고,</li>\n<li>다음 행으로 이동합니다. (재귀 호출)</li>\n<li>다음 행 n개의 열에 퀸을 놓을 수 있는지 검사합니다. (다음 행의 칸만큼 반복문 실행 + promising 검사)</li>\n<li>퀸을 놓을 수 있다면 퀸을 놓고 다음 행으로 이동합니다.</li>\n<li>놓을 수 없다면 반복문을 종료하고 재귀 호출한 함수를 반환해 stack을 없애줍니다.</li>\n<li>다음 열로 이동해 반복합니다.</li>\n</ul>\n<p>위 알고리즘에서 배울 점은 아래의 프레임입니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> col <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> col <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isSafe</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// make a selection</span>\n        <span class=\"token function\">placeQueen</span><span class=\"token punctuation\">(</span>row <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// solve next row in DFS</span>\n        <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undo selection</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></code></pre>\n<p>n개의 행이 있다면 반복문 n번을 순회합니다.</p>\n<p>현재 진행중인 행의 각 칸마다 하위 행 n개 만큼을 재귀호출합니다.</p>\n<p>재귀트리를 타고 내려가다 조건에 부합하지 않는 경우\n반복문을 빠져나오게 됩니다.</p>\n<p>예를 들어 다음 행 모든 칸에 퀸을 놓을 수 없는 경우 반복문이 종료되고 재귀 함수가 반환됩니다.</p>\n<p>반환된 재귀함수는 스택을 반환하고 해당 행의 queen을 행에서 지웁니다.</p>\n<p>반복문이 돌아가고 다음 칸에 queen을 놓게 됩니다.</p>\n<p>아래는 java의 풀이입니다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">solveNQueens</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token comment\">// Chess board initialization</span>\n        board <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token comment\">//Start placing Queen from row_#0</span>\n        <span class=\"token function\">placeQueen</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">return</span> goodPlacement<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    \n    <span class=\"token comment\">// final result</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> goodPlacement <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> board<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// occupy flag for each column</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> colSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// occupy flag for each primary diagonal (i.e., Northwest &lt;-> Southeast direction )</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> priDiagSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// occupy flag for each secondary diagonal (i.e., Northeast &lt;-> Southwest direction )</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> secDiagSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSafe</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>colSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span> col <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>priDiagSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span> col <span class=\"token operator\">-</span> row <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>secDiagSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span> col <span class=\"token operator\">+</span> row <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> putOn <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> putOn <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// put Queen on specified position, and set corresponding occupy flag</span>\n            board<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'Q'</span><span class=\"token punctuation\">;</span>\n            colSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span> col <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            priDiagSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span> col <span class=\"token operator\">-</span> row <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            secDiagSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span> col <span class=\"token operator\">+</span> row <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// take Queen away from specified position, and clear corresponding occupy flag</span>\n            board<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">;</span>\n            colSet<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span> col <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            priDiagSet<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span> col <span class=\"token operator\">-</span> row <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            secDiagSet<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span> col <span class=\"token operator\">+</span> row <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    \n    <span class=\"token comment\">// Notice that here we use the DFS + backtracking template, just like what we described before.</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">placeQueen</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> row <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        \n        <span class=\"token comment\">// Base case aka stop condition</span>\n        <span class=\"token comment\">// We already placed all N Queens in good position</span>\n        <span class=\"token comment\">// Base case</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> row <span class=\"token operator\">==</span> board<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            \n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> solution <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> perRow <span class=\"token operator\">:</span> board<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                solution<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyValueOf</span><span class=\"token punctuation\">(</span>perRow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            \n            goodPlacement<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span> solution <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token comment\">// General cases:</span>\n        <span class=\"token comment\">// Try all possible columns in DFS + backtracking</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> col <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> col <span class=\"token operator\">&lt;</span> board<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">isSafe</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                \n                <span class=\"token function\">update</span><span class=\"token punctuation\">(</span> row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// make a selection</span>\n                <span class=\"token function\">placeQueen</span><span class=\"token punctuation\">(</span> row <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// solve next row in DFS </span>\n                <span class=\"token function\">update</span><span class=\"token punctuation\">(</span> row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// undo selection</span>\n            <span class=\"token punctuation\">}</span>\n            \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span></code></pre>\n",
			"date_published": "2023-06-26T00:14:50Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JAVA/leet-code/decision-tree-of-backtracking/",
			"url": "https://zerozoo-a.github.io/blog/JAVA/leet-code/decision-tree-of-backtracking/",
			"title": "의사결정트리와 순회",
			"content_html": "<h1 id=\"decision-tree\" tabindex=\"-1\">의사결정트리 (decision tree)란? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/decision-tree-of-backtracking/\">#</a></h1>\n<blockquote>\n<p>결정 트리(decision tree)는 의사 결정 규칙과 그 결과들을 트리 구조로 도식화한 의사 결정 지원 도구의 일종이다. 결정 트리는 운용 과학, 그 중에서도 의사 결정 분석에서 목표에 가장 가까운 결과를 낼 수 있는 전략을 찾기 위해 주로 사용된다. <a href=\"https://ko.wikipedia.org/wiki/%EA%B2%B0%EC%A0%95_%ED%8A%B8%EB%A6%AC\">wiki 의사결정트리</a></p>\n</blockquote>\n<h2 id=\"\" tabindex=\"-1\">역추적 알고리즘의 의사결정트리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/decision-tree-of-backtracking/\">#</a></h2>\n<p>3개의 수 [1, 2, 3]이 주어지고 이 수들의 순열을 찾을때 역추적 알고리즘의 의사결정트리를 사용 할 수 있습니다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/RP9B2iCW48RtdaAo5nnVIJOb1-Wb0d6NMcZIdhyJ7ALJPlVv-JCFSJdEzNM-7xigpothuPu_URU3NWzThFgLOA1gq5oxgjsVzbLxpQgu5W_SKZfoInsJc1t5x2HsczaGlfK0opMb0UIquxgzXvUB13aT5SvYjJ4tF7HodJnUGyNG2T_5LKgTS7zVQUfqxHceDkuM2R5F8iH68o7EFH5YfvamgYMN3N_45m00\" alt=\"uml diagram\">\n<p>위 UML은 backtracking의 의사결정트리입니다.\n순열을 처음 계산할 때 손으로 만들던 그 트리와 비슷합니다.</p>\n<p>해당 트리는 루트 노드에서부터 트리를 순회하고 경로를 숫자로 기록합니다.</p>\n<p>배열의 길이가 3이므로 트리의 레벨은 출발점부터 계산하면 레벨 3까지 총 길이는 4가 되겠습니다.</p>\n<p>이를 의사결정트리라고 부르는 이유는 각 트리의 노드에서 의사결정을 내리기 때문입니다.</p>\n<p>노드에서 하위 트리를 생성할 때, 자신이 기록해둔 값들이\n&quot;1, 2라면 나머지 3을 하위 트리로 만든다&quot; 라는 의사결정이 각 노드들에서 일어나는 것이 위 순열 문제의 의사결정입니다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">순회 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/decision-tree-of-backtracking/\">#</a></h2>\n<p>순회에는 전위, 중위, 후위 순회가 있습니다.</p>\n<p>각 순회의 위치는 root 노드의 방문 순서에 따라 이름 지어졌습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// js</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>예시를 위해 이진트리를 생성합니다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuShBJqbLK39KKaWiLYY2yemWF3sOh36K3vCtWSd3LPZ2HOguk8eKT7NjmDfXh28k80yc2X97uXLnEQJcfG2T0W00\" alt=\"uml diagram\">\n<p>트리는 위와 같은 그림을 그리게 됩니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">preOrderTraversal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 현재 노드의 값</span>\n\n  <span class=\"token function\">preOrderTraversal</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 왼쪽 노드로</span>\n  <span class=\"token function\">preOrderTraversal</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 오른쪽 노드로</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>전위순회 함수인 preOrderTraversal 함수는\n현재 방문한 node의 값을 출력합니다.</p>\n<p>그리고 왼쪽 하위 트리로 재귀를 실행합니다.\n따라서 왼쪽 하위 트리부터 방문을 하면서 기저조건에 닿은 경우 콜스택이 반환되고 그 다음 오른쪽 트리를 방문하게 됩니다.</p>\n<p>따라서 <code>1 --&gt; 2 --&gt; 4 --&gt; 5 --&gt; 3</code>의 순서로 방문하게 됩니다.</p>\n<p>전위순회는 루트를 가장 먼저 방문하기 때문에 전위입니다.</p>\n<p>중위순회는 루트를 중간에 방문하기 때문에 중위순회입니다.</p>\n<p>후위순회는 루트를 중간에 방문하기 때문에 후위순회입니다.</p>\n<iframe src=\"https://codesandbox.io/embed/brave-darwin-grqgls?autoresize=1&expanddevtools=1&fontsize=14&hidenavigation=1&module=%2Fsrc%2Findex.js&theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"brave-darwin-grqgls\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n<p>따라서 언제 각 노드의 값에 접근하는지에 따라 순회가 결정됩니다.</p>\n<h3 id=\"-2\" tabindex=\"-1\">중위순회 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/decision-tree-of-backtracking/\">#</a></h3>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// js </span>\n<span class=\"token comment\">// 중위순회 4 --> 2 --> 5 --> 1 --> 3</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">inOrderTraversal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">preOrderTraversal</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 왼쪽 노드로</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 현재 노드의 값</span>\n  <span class=\"token function\">preOrderTraversal</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 오른쪽 노드로</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"-3\" tabindex=\"-1\">후위순회 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/decision-tree-of-backtracking/\">#</a></h3>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// js </span>\n<span class=\"token comment\">// 후위순회 4 --> 5 --> 2 --> 3 --> 1</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">postOrderTraversal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">preOrderTraversal</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 왼쪽 노드로</span>\n  <span class=\"token function\">preOrderTraversal</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 오른쪽 노드로</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 현재 노드의 값</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이렇게 각 순회 방법을 알아봤습니다.</p>\n<p>감사합니다.</p>\n",
			"date_published": "2023-06-25T15:56:00Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JAVA/leet-code/backtrack-algorithm/",
			"url": "https://zerozoo-a.github.io/blog/JAVA/leet-code/backtrack-algorithm/",
			"title": "backtracking 알고리즘",
			"content_html": "<p><a href=\"https://unsplash.com/ko/%EC%82%AC%EC%A7%84/QfV6AqEwNBw\">이미지 출처</a>\n<br>\n<br>\n<br></p>\n<h2 id=\"backtracking\" tabindex=\"-1\">backtracking 알고리즘이란? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/backtrack-algorithm/\">#</a></h2>\n<blockquote>\n<p>Backtracking can be defined as a general algorithmic technique that considers searching every possible combination in order to solve a computational problem. -geeks for geeks-</p>\n</blockquote>\n<p>백트레킹 알고리즘은 문제 해결을 위해 가능한 모든 조합을 검색하는 일반적인 알고리즘 기법입니다.</p>\n<h2 id=\"\" tabindex=\"-1\">구하는 것 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/backtrack-algorithm/\">#</a></h2>\n<p>주어진 배열의 모든 중복되지 않은 조합을 찾습니다.\nint 배열 <code>int[] nums = {1, 2, 3}</code>이 주어졌을 때 아래의 답을 반환하면 됩니다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\">res<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></code></pre>\n<h2 id=\"-1\" tabindex=\"-1\">주어진 것 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/backtrack-algorithm/\">#</a></h2>\n<p>문제에서 주어지는 것은 숫자 배열입니다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token comment\">// java</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token function\">permute</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre>\n<h2 id=\"-2\" tabindex=\"-1\">풀이 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/backtrack-algorithm/\">#</a></h2>\n<p>풀이는 아래와 같습니다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token comment\">// java</span>\n\n<span class=\"token keyword\">package</span> <span class=\"token namespace\">leetCodes</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LinkedList</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Backtracking</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token function\">permute</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res: \"</span><span class=\"token operator\">+</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">permute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> track <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">backtrack</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> track<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">backtrack</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> track<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>track<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// base-case</span>\n\t\t\tres<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>track<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>track<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\ttrack<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">backtrack</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> track<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\ttrack<span class=\"token punctuation\">.</span><span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"-3\" tabindex=\"-1\">해석 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/backtrack-algorithm/\">#</a></h2>\n<p>기본적인 프레임은 DFS를 통한 재귀 트리의 순회입니다.</p>\n<p>주어진 배열을 반복문으로 순회하면서 재귀 호출을 실행합니다.</p>\n<p>재귀 호출의 조건 중 기저조건에 닿으면</p>\n<ul>\n<li><strong>값을 반환하고</strong>,</li>\n<li><strong>해당 콜스택은 사라지고</strong>,</li>\n<li><strong>tracking하던 값의 마지막 값을 삭제합니다.</strong></li>\n</ul>\n<p>UML을 그려보겠습니다.</p>\n<p>배열 <code>{1, 2}</code>를 입력받았다고 가정합니다.</p>\n<p>트리는 DFS조건을 따라 가장 왼쪽 리프 노드 부터 진행됩니다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuShBJqbLK39GKaWiLiWpW78D8Ln3D6wy4LJ02280uoOb5gU2HK0CBguy0mLTNJkWUWKk88OmuusiAk0ye3uZC0kitY4rBmNe4W00\" alt=\"uml diagram\">\n<p>중복되는 track인 1 노드에 접근한 경우 <code>continue</code>를 통해 건너 뛰어줍니다.</p>\n<p>리프노드에 도달해 <code>base case</code>에 닿은 경우가 발생했습니다.</p>\n<p>2번 노드가 base case에 닿은 노드가 되었습니다.</p>\n<ul>\n<li>base case에 도달한 경우 콜스택을 반환합니다.</li>\n<li>track에서 마지막 값을 지웁니다.</li>\n</ul>\n<p>track의 상태는 <code>1 -&gt; 2</code>에서 <code>1</code>이 됩니다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuShBJqbLK39GKaWiLiWpW78D8Ln3D6wy4LJ02280uoOb5gU2HK0CBguy0mLTNJkWUWKk88OmuusiAk0ye3uZC0ki7ie6siO5uaELM1MbbfGMvN4vfEQb0Dq90000\" alt=\"uml diagram\">\n<p>이 상황에서 레벨 1의 노드 1의 상태는 아래와 같습니다.</p>\n<ul>\n<li>하위 노드에게서 반환을 받음</li>\n<li>순회중인 반복문의 i 값은 1임</li>\n<li>하위 노드에게 반환을 받는 위치는 정확히 backtrack함수를 호출한 시점임</li>\n<li>다음 명령어는 removeLast 함수임</li>\n</ul>\n<p>위의 4개 상황이 node 1이 처한 상황이고\n앞으로의 행동을 나타냅니다.</p>\n<p>node1은 값을 반환받고 다음 명령어로 removeLast를 수행합니다.</p>\n<p>track은 <code>1</code>에서 순서대로 removeLast 함수에 의해 <code>1</code>이 삭제되어\n이제 아무것도 가리키지 않게 됩니다.</p>\n<p>그리고 반복문의 <code>i</code> 값은 1이였으므로 반복문이 종료되고\n레벨 1의 노드 1은 할 일이 이제 없습니다. 스택은 사라지게 되고\n레벨 0의 노드는 다음 반복문을 실행합니다.</p>\n<p>nums의 배열에 다음 값은 2이므로 <code>i = 2</code>가 되고\n다음 track의 시작값은 2입니다.\n마지막 track의 값을 지우는 이유는 이전 값들을 재활용하기 위해서입니다.</p>\n<p><code>{1, 2}</code> 배열의 경우 1을 구한 순간 남은 값은 2밖에 없어서 별로 티가 나지 않지만</p>\n<p><code>{1, 2, 3}</code> 배열의 경우 1을 구한 상태에서 <code>{1, 2, 3}</code>을 구할 수 있고, <code>{1, 3, 2}</code>를 구할 수도 있기 때문입니다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/RP0z2iGW58HxJ_587_2dIx7a9i4GkwmBQc2Fdz6diYkfz9iPPiGr9XlIzJw5_noE9ZcHZUIbgAoOLKNDg3Sz1g3yHqRVZ1McLUmskYBcovDMrYJDymj5rA_y2bNrJI_VJbY7snppGzX53a91NaIYK-xCPqqlmQKhUC5MBspowlo1pxi1\" alt=\"uml diagram\">\n<p>위의 트리 노드는 배열 <code>{1, 2}</code>를 구하는 과정을 나타낸 것입니다.</p>\n<p>위 트리에서 base case까지 도달한 경우\n해당하는 루트들은 조건에 알맞은 값이라고 볼 수 있습니다.</p>\n<p>고작 배열 2개 짜리인데 트리의 깊이는 3레벨에 달합니다.\n모든 경우의 수를 따지는 것이 기본이기 때문에 최적화에도 한계가 있습니다.</p>\n",
			"date_published": "2023-06-24T13:44:34Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JS/iterator-protocol/",
			"url": "https://zerozoo-a.github.io/blog/JS/iterator-protocol/",
			"title": "자바스크립트 iterator의 특징",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"iterator\" tabindex=\"-1\">iterator란 무엇일까? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/iterator-protocol/\">#</a></h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">iterator란? </a></p>\n<p>iterator의 개념 자체는 단순합니다.\n반복문을 사용하기 편하도록 규칙을 세워 이 규칙을 따르면 iterator이고\n그렇지 않으면 iterator가 아니다! 라는 것입니다.</p>\n<p>즉 iterator 규칙을 따르는 반복문 생성자와 그 반복문입니다.</p>\n<br>\n<br>\n<br>\n<h2 id=\"\" tabindex=\"-1\">코드로 보기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/iterator-protocol/\">#</a></h2>\n<p>말로만 봐선 이해가 어려울 수 있습니다.\nMDN에서 보여주는 예시입니다, iterable protocol을 따르는 객체를 생성했습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 1</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 2</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Returning\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> i <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> i <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Closing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// method를 지정함</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {done: false, value: 1}</span></code></pre>\n<ol>\n<li>\n<p><code>Symbol.iterator</code>라는 Symbol.iterator로 객체의 메서드 키를 지정했습니다.</p>\n</li>\n<li>\n<p><code>return</code>으로 next라는 함수를 반환합니다.</p>\n<ol>\n<li><code>next()</code>의 설명은\n<ol>\n<li><code>A function that accepts zero or one argument and returns an object conforming to the IteratorResult interface (see below). If a non-object value gets returned (such as false or undefined) when a built-in language feature (such as for...of) is using the iterator, a TypeError (&quot;iterator.next() returned a non-object value&quot;) will be thrown.</code> next 함수는 저희가 제작한게 아닌 언어차원에서 제공됩니다. 예외는\n객체로 값을 반환해야 한다고 합니다.</li>\n<li>예제에서는 i 값을 올려줍니다. 클로저가 적용되어 해당 스코프 내의 값은 외부에서 건들 수 없게 되었습니다.</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>가장 큰 특징으로 iterator는 <strong>반복문을 중간 저장</strong>하고 done, value 값을 반환합니다.</p>\n</li>\n</ol>\n<p>이외에도 한번 실행해서 done상태가 된 iterator는 객체를 새로 생성해야 다시 사용할 수 있습니다.\n이 외에도 여러 특징들이 있지만 한번에 다 설명하기 힘들정도입니다.</p>\n<h3 id=\"-1\" tabindex=\"-1\">장황한 문법을 간단하게 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/iterator-protocol/\">#</a></h3>\n<p>위의 문법은 좀 장황합니다. 사용하기 힘들 정도이죠</p>\n<p>그래서 문법설탕이 존재합니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">oddEven</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token string\">'odd'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token string\">'even'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> oddAndEven <span class=\"token operator\">=</span> <span class=\"token function\">oddEven</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\noddAndEven<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// {value: 'odd', done: false}</span>\noddAndEven<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value\n<span class=\"token comment\">// 'even'</span></code></pre>\n<p>무한한 반복문을 사용 할 수 있다는 것도 큰 특징 중 하나입니다.\n무한루프나 무한수열은 개발언어에서 다루기 힘든 주제이거나\n어떤 특정 값 중 도달할 수 없는 값의 비교값 정도로 사용되는 것이 전부입니다.</p>\n<p>하지만 이렇게 무한한 루프를 끊어서 사용 할 수 있다는 장점이 있습니다.</p>\n<p>물론 iterable을 사용하지 않고도 구현 할 수 있는 방법은 많습니다.</p>\n<p>단, iterable을 사용하면 좀 더 편리하다는 것이죠\n위 예제는 odd, even을 무한히 반환합니다.</p>\n<p>하지만 여기에 2로 나누어 떨어지는가? 에 대한 연산은 없죠\n만약 숫자가 무한히 늘어나게 된다면 성능이나 개발 언어가 설정해둔 범위로 에러가 반환될 것입니다.</p>\n<h2 id=\"-2\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/iterator-protocol/\">#</a></h2>\n<p>iterable protocol은 protocol이라는 이름답게 해당 조건이 맞으면\niterable하다고 할 수 있습니다.</p>\n<p>브라우저의 DOM이나 자바스크립트의 자료형등 이런 요구를 따라가고 있습니다.</p>\n<p>iterable의 가장 큰 장점 중 하나에 대해 설명드렸습니다.\n바로 무한을 다룰 수 있다는 것입니다,\n다른 하나는 최적화입니다만 다른 글에서 작성하도록 하겠습니다.</p>\n",
			"date_published": "2023-06-24T00:23:37Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JAVA/leet-code/coin-change-problem-bottom-up/",
			"url": "https://zerozoo-a.github.io/blog/JAVA/leet-code/coin-change-problem-bottom-up/",
			"title": "동전 교환 문제 - bottom-up",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"bottom-up\" tabindex=\"-1\">bottom up <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/coin-change-problem-bottom-up/\">#</a></h2>\n<p><a href=\"https://leetcode.com/problems/coin-change\">leet code</a></p>\n<p>문제는 이전 게시글인 <a href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/coin-change-problem/\">재귀 트리를 통한 접근</a>에 있습니다.</p>\n<ul>\n<li>amount보다 하나 큰 배열을 만든다.</li>\n<li>amount를 순회한다.\n<ul>\n<li>순회하면서 각 인덱스의 값을 가진 coins만큼 순회한다.</li>\n<li>이전 dp의 값에서 코인만큼 뒤에 있는 값을 꺼내와 하나를 더해 비교한다.</li>\n<li>더 작은 값을 반환한다.</li>\n<li>dp 배열에 저장한다.</li>\n<li>반복한다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token comment\">// java</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> coins <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> amount <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></code></pre>\n<p>위와 같은 코인 배열과 amount를 예로 들면,</p>\n<p>amount + 1만큼 int 배열을 만듭니다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token comment\">// java</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>amount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n<p>dp배열의 각 인덱스를\n인덱스의 값만큼 최소한의 코인으로 채운 코인의 수라고 합시다.</p>\n<p>예를 들어</p>\n<p>dp[0]은 index 0입니다. index 0을 코인의 amount로 본다면\namount 0은 코인 0개로 만들 수 있습니다.</p>\n<p>dp[1]은 index 1입니다. index 1은 코인 1짜리 한개로 만들 수 있습니다.\ndp[1] = 1이 되야합니다.</p>\n<p>dp[2]는 index 2입니다. index 2 는 코인 1 짜리 두개 혹은 2 짜리 코인 한개로 만들 수 있습니다.\n그럼 둘 중 작은 값을 dp[2]에 넣어줍니다. dp[2] = 1 입니다.</p>\n<p>이런 식으로 값을 채워나가는 것입니다.</p>\n<p><strong>여기서 중복계산이 숨어있다는 것을 어렴풋이 느낄 수 있습니다.\n바로 dp[2]에는 dp[1]의 값을 활용 할 수 있다는 것입니다.</strong></p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token comment\">// java</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> coins <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> amount <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></code></pre>\n<p>아래와 같이 이중 반복문을 만듭니다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> coins <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> amount <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> coins<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> coin <span class=\"token operator\">:</span> coins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 아직 빈칸</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>amount는 3이네요.</p>\n<p>소유한 코인으로 0을 만드는 경우를 포함하기 위해,\n3 보다 하나 큰 배열을 만들고 해당 배열을\n4로 초기화 하겠습니다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token comment\">// java</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> coins <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> amount <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>amount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [0, 0, 0, 0]</span>\n\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">,</span> amount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [4, 4, 4, 4]</span>\ndp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [0, 4, 4, 4]</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> coins<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> coin <span class=\"token operator\">:</span> coins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 아직 빈칸</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>dp[0]의 값은 아무 코인도 넣지 않으면 되고 이미 <code>dp[0] = 0;</code>을 통해 값을 초기화 했으므로\n적절한 조건문을 통해 넘어가줘야 합니다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token comment\">// java </span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> coins<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> coin <span class=\"token operator\">:</span> coins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> coin <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br>\n<br>\n<br>\n<h2 id=\"coin\" tabindex=\"-1\">coin만큼 뒤에서 값을 꺼내오기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/coin-change-problem-bottom-up/\">#</a></h2>\n<p>dp 배열에 접근 할 수 있으려면 <code>i - coin</code>의 값은 0 이상이여야 합니다.\n<code>i - coin</code>은 외부 반복문이 dp를 순회하며 이전 <code>dp[i - coin]</code>의 값을 가져오는데도 사용됩니다.</p>\n<p><code>dp[i-coin]</code>은 dp 배열에 저장한 각 dp 배열의 index 만큼을 coins로 달성하기 위해\n최소 몇개가 필요한지를 저장한 저장소입니다.</p>\n<p><code>dp[i-coin]</code>으로 접근한다는 것은 현재 dp index에서 지금 순회하고 있는 coin만큼\n뒤로 이동한다는 것인데요</p>\n<p>coin만큼 뒤로 이동한 결과값에 + 1을 한 경우 이전의 결과값에 수중의 코인 한개를 더하면\ndp에 값을 채워넣을 수 있다는 것입니다. (특정 코인이 아닌 코인 한개!)</p>\n<p>아래는 디버깅 중인 값을 추출해왔다고 생각해주세요</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\">dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 아래는 반복문</span>\n\ndp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token comment\">/** 4 */</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">/** 1 */</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 반복문 coin = 1 일 때,</span>\n\ndp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">/** 2 */</span> <span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">/** 0 */</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 반복문 coin = 2 일 때</span></code></pre>\n<p>coins로 내부에서 반복문이 다시 돌기 때문에 위와 같은 상황이 만들어집니다.</p>\n<p>coin = 1일 때 dp에서 코인 1 만큼 이전 데이터 값을 불러옵니다.\ndp[2 - 1]이겠네요 이 값은 1이죠 이 값에 코인 1을 더하면 2가 되므로 dp[2]의 값 4와 비교하면 더 작은 값으로 저장됩니다.</p>\n<p>이 방식은 dp에서 순회중인 코인만큼의 이전 값을 꺼내와 해당 값에 해당 코인을 하나 더하면 최소 값을 만족하는 것을 이용한 것입니다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">leetCodes</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CoinChangeIterate</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> coins <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> amount <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token function\">coinChange</span><span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result: \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">coinChange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> coins<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>amount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">,</span> amount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tdp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> dp<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> coin <span class=\"token operator\">:</span> coins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> coin <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> coin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>amount<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> amount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> dp<span class=\"token punctuation\">[</span>amount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위 알고리즘의 성능입니다.</p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/DQyV3uPKLi-1200.webp\" width=\"100%\" height=\"auto\" alt=\"normal-dp\" loading=\"lazy\" decoding=\"async\"></div>\n<br>\n<br>\n<br>\n<h2 id=\"\" tabindex=\"-1\">요약 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/coin-change-problem-bottom-up/\">#</a></h2>\n<p>bottom-up 방식의 핵심은 이전 값들에서 새로운 값을 뽑아낸다는 것입니다.\n위 문제에선 이전 값을 찾아가는 방식이 핵심입니다.</p>\n<p>보통 bottom-up 방식은 각 배열의 index에 해당하는 값이\n각 문제의 정답을 가지고 있습니다.</p>\n<p>n번째 문제를 구하기 위해 n - coin번째의 값을 꺼내오는 것입니다.\n만약 n - coin번째의 값에 답이 없다면 처음 <code>Array.fill</code> 메서드로\n초기화한 값이 반환되게 되므로 해당 값은 amount + 1의 값이므로\n최대값을 항상 넘게 됩니다.</p>\n<p>이렇게 적고 보니 너무 장황한 글이 되었습니다.</p>\n<p>퇴고를 반복해 글을 다듬어보겠습니다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">최적화 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/coin-change-problem-bottom-up/\">#</a></h2>\n<p>중첩된 반복문을 아래와 같이 변경해보세요</p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/5eXKpjmRry-1200.webp\" width=\"100%\" height=\"auto\" alt=\"normal-dp-optimized\" loading=\"lazy\" decoding=\"async\"></div>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\">\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> coin <span class=\"token operator\">:</span> coins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> coin<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> amount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> coin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span></code></pre>\n<p>위 반복문은 이전 풀이와 사뭇 다릅니다.</p>\n<p>dp[i]의 값이 가지는 의미는 같습니다만, 필요없는 초반 탐색을 많이 개선했습니다.</p>\n",
			"date_published": "2023-06-18T15:14:21Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JAVA/leet-code/coin-change-problem/",
			"url": "https://zerozoo-a.github.io/blog/JAVA/leet-code/coin-change-problem/",
			"title": "동전 교환 문제 - 재귀",
			"content_html": "<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/22_vz2DHf2-1200.webp\" width=\"100%\" height=\"auto\" alt=\"dropping coins picture\" loading=\"lazy\" decoding=\"async\"></div>\n(<a href=\"https://unsplash.com/ko/%EC%82%AC%EC%A7%84/VK7jXtOtEuM\">이미지 출처</a>)\n<br>\n<br>\n<br>\n<h2 id=\"\" tabindex=\"-1\">동전 교환 문제 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/coin-change-problem/\">#</a></h2>\n<p>각 동전의 개수가 무한한 동전과 거슬러 줘야 하는 값이 있습니다.\n각각 coins, <code>amount</code>로 표현해보겠습니다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token comment\">// java</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> coins <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> amount <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></code></pre>\n<p>동전을 <code>amount</code> 만큼 거슬러 줘야 합니다.</p>\n<p>단, 가장 최소한의 동전 갯수를 사용해 거슬러주면 됩니다.</p>\n<p>위 조건의 경우 동전 5짜리를 하나가 최소한의 갯수를 충족하므로 정답은 1입니다.</p>\n<br>\n<br>\n<br>\n<h2 id=\"-1\" tabindex=\"-1\">시작하기 전에 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/coin-change-problem/\">#</a></h2>\n<p>이 문제를 풀기에 앞서 이해하면 좋을 내용들</p>\n<ul>\n<li>트리에 대한 이해</li>\n<li>DP에 대한 이해</li>\n</ul>\n<h3 id=\"-2\" tabindex=\"-1\">트리에 대한 이해 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/coin-change-problem/\">#</a></h3>\n<p>텍스트보단 아래와 같은 이미지가 설명에 훨씬 도움이 될 것입니다.</p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/ZxLsxMjhR0-900.webp\" width=\"100%\" height=\"auto\" alt=\"Tree data structure with explain\" loading=\"lazy\" decoding=\"async\"></div>\n(출처: <a href=\"https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.geeksforgeeks.org%2Fintroduction-to-tree-data-structure-and-algorithm-tutorials%2F&psig=AOvVaw2KMJOaZHuYlqHfLtW1HSdf&ust=1686751012842000&source=images&cd=vfe&ved=0CBEQjRxqFwoTCIiPsqmzwP8CFQAAAAAdAAAAABAE\"> geeks for geeks</a>)\n<br>\n<br>\n<br>\n<h2 id=\"dp\" tabindex=\"-1\">DP에 대한 이해 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/coin-change-problem/\">#</a></h2>\n<p><code>이 문제는 최적 하위 구조를 가지므로 동적 계획법 문제이다.</code>\n이런 문구를 어디선가 본 적이 있을겁니다.</p>\n<p>이 문제를 예로 최적 하위구조를 설명해보겠습니다.</p>\n<p>거스름돈을 거슬러 줄 때 정해진 n개의 종류로 (각 동전의 갯수는 무한인) 거스름 돈을\n돌려주면 됩니다. 최소한 몇 개의 동전이 필요한지를 구하는 문제이므로</p>\n<p>최적 하위구조에 적합하단 말인데 이 것만으로는 이해가 어렵습니다.</p>\n<p>극단적으로 문제를 쉽게 만들어 이해력을 높여보겠습니다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token comment\">// java</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> coins <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> amount <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>거슬러 줄 수 있는 코인은 2개</li>\n<li>거슬러 줘야 하는 값은 3입니다.</li>\n</ul>\n<p>1짜리 코인으로 <code>amount</code>를 3만큼 거슬러주겠습니다.</p>\n<p><code>(((amount - 1) - 1) - 1) = 0</code> 같은 함수를 3번 중첩합니다.\n이는 재귀 함수이자 합성 함수이죠 3번 함수를 실행하면 <code>amount</code>는 0이 됩니다.</p>\n<p>0이 된 값은 기저조건에 닿게됩니다.\n이렇게 한 번의 조건을 찾아냈습니다.</p>\n<p><code>이는 재귀 트리의 왼쪽 노드만 타고 내려온 결과입니다.</code></p>\n<p>만약 이 왼쪽 최외각 리프 노드에서 바로 위 레벨로 올라가 다시 오른쪽 노드로 내려간다면\n2짜리 코인으로 <code>amount</code>를 빼서 <code>amount</code>의 값은 -1입니다.</p>\n<blockquote>\n<p>이렇게 왼쪽 노드만 타고 내려간 결과와 그 옆에도 한번 다리를 걸친 결과가\n서로 아무 영향을 주지 않기 때문에 최적 하위 구조라고 할 수 있습니다.</p>\n</blockquote>\n<br>\n<br>\n<br>\n<h2 id=\"-3\" tabindex=\"-1\">문제 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/coin-change-problem/\">#</a></h2>\n<ol>\n<li>k개의 서로 다른 종류의 동전이 있습니다.\n<ol>\n<li>예시로 3개라면 1 동전, 2 동전, 5 동전 각각 종류가 다릅니다. 각각의 동전은 무한합니다.</li>\n</ol>\n</li>\n<li><code>amount</code>가 있습니다. k개의 동전을 최소한으로 사용해 <code>amount</code> 만큼 거슬러주면 됩니다.</li>\n</ol>\n<p>동전 배열 <code>{1, 2, 5}</code> 가 주어지고 11이라는 <code>amount</code>가 주어지면 <code>5 + 5 + 1</code>로 3개의 동전을 사용해 <code>amount</code>만큼 거슬러 줄 수 있으므로 답은 3이 됩니다.</p>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<h2 id=\"-4\" tabindex=\"-1\">경우의 수 문제를 재귀로 풀기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/coin-change-problem/\">#</a></h2>\n<p>이 문제는 재귀 호출을 반복문 속에서 호출해\n각 단계에서 일어날 수 있는 경우의 수를 재귀적으로 탐색해\n문제를 풀이합니다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token comment\">// java</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> coin <span class=\"token operator\">:</span> coins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">int</span> subProblem <span class=\"token operator\">=</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">,</span> amount <span class=\"token operator\">-</span> coin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// ...</span></code></pre>\n<p><strong>반복문을 코인만큼 순회합니다.</strong></p>\n<p>현재 코인은 <code>{1, 2}</code>라고 한다면 <code>루트</code>에서 <code>서브트리</code>는 크게 <code>3 - 1</code>, <code>3 - 2</code>를 <code>키</code>로 하는 <code>서브트리</code>가 생겨나게 됩니다.</p>\n<p>반복문 속에 재귀 호출이 일어나게 되면 보통 이런 패턴을 따르게 됩니다.</p>\n<p>코드의 흐름에 따라 재귀를 그려나가 보겠습니다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuShBJqbLK39MKaWiLZ2EDu3oZS1y8o1V2IYefA2hQmSK1BAiT0sv75BpKe1Q0G00\" alt=\"uml diagram\">\n<p><code>루트</code>인 3에서</p>\n<ul>\n<li>\n<p>기저조건을 확인합니다.</p>\n</li>\n<li>\n<p><code>루트에서 코인 1만큼을 제합니다.</code></p>\n</li>\n</ul>\n<p>그리고 다시 재귀 호출이 일어나게 됩니다.</p>\n<ul>\n<li>\n<p>기저조건을 확인합니다.</p>\n</li>\n<li>\n<p><code>2에서 코인 1만큼을 제합니다.</code></p>\n</li>\n</ul>\n<img src=\"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuShBJqbLK39MKaWiLZ2EDu3oZS1y8pZV4Cmt1FAvb82gb1HqTUs0ge0iArr3BZ038cG85N98pKi16Wy0\" alt=\"uml diagram\">\n<p>그리고 다시 재귀 호출이 일어나게 됩니다.</p>\n<ul>\n<li>\n<p>기저조건을 확인합니다.</p>\n</li>\n<li>\n<p><code>1에서 코인 1만큼을 제합니다.</code></p>\n</li>\n</ul>\n<img src=\"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuShBJqbLK39MKaWiLZ2EDu3oZS1y8pZV4CmtXFCDm7m389zB2QXBIK5Nrmwe2yYoqZNa0ZCWGeOm8KEua05Ko24rBmNe0W00\" alt=\"uml diagram\">\n<ul>\n<li>기저조건을 확인합니다.</li>\n</ul>\n<p>기저조건인 <code>amount == 0</code>을 만족하게 되었습니다.</p>\n<p>부모 트리에 0을 반환합니다.</p>\n<p>재귀 함수에서 기저 조건과 기저 조건이 반환하는 값은\n알고리즘의 답을 반환하는 과정입니다.</p>\n<p>저희가 풀고 있는 단순하게 변경한 형태를 더욱 쉽게 변경해서</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token comment\">// java</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> coins <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> amount <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이러한 조건을 가진 문제로 변경했다고 하면 문제는 이미 다 풀어낸 것과 마찬가지입니다.</p>\n<p><code>amount</code>라는 값은 재귀 호출을 통해 코인 1로 값을 제하면서\n다음 호출 스택에 값을 넘겨주게 됩니다.\n<code>3 -&gt; 2 -&gt; 1 -&gt; 0</code> 이런 식으로 말이죠</p>\n<p>해당 문제에서 구하고자 하는 것은 잔돈을 얼만큼 거슬러 주는지 카운트 하는 것입니다.</p>\n<p>따라서 기저 조건을 만족한 값을 제외한 모든 간선의 합을 구하면 해당 문제의 답을 찾게 되는 것입니다.</p>\n<p>단 이러한 질문이 생겨나게 됩니다.</p>\n<blockquote>\n<p>Q: 그 다음 코인에 대한 경우의 수를 제외하면 당연히 그렇게 되는 것이다. 🤔</p>\n</blockquote>\n<p>맞습니다.</p>\n<blockquote>\n<p>이런식으로 문제에 대한 해답을 올바른 방향으로 이끌게 하는 질문을 던지고, 그에 대한 대응을 하는 것으로 알고리즘의 정답에 가까워지는 것이\n이 문제 풀이에 대한 이해를 높이는 접근법입니다.</p>\n</blockquote>\n<p>계속하자면 하나의 하위 문제에 대한 해답을 찾았습니다.\n<code>3 -&gt; 2 -&gt; 1 -&gt; 0</code>에서 기저 조건을 제외한 간선수를 세면 그것이 해당 루트를 통한 거스름 돌려주기에 대한 해입니다.</p>\n<p>만약 <code>3 -&gt; 2 -&gt; 1</code>의 시점에 코인 2를 주는 경우를 생각해봅시다.</p>\n<p><code>3 -&gt; 2 -&gt; 1 -&gt; -1</code>이라는 계산이 되죠 이러면 거스름돈을 원래 값보다 더 많이 주게 되어 해당 경우는 카운트 하지 않아도 됩니다.</p>\n<p>새로운 조건을 찾아냈습니다.</p>\n<p>나아가 한가지 더 생각할 수 있습니다.</p>\n<p><code>3 -&gt; 2</code> 에서 코인 2짜리를 주는 경우입니다.\n3에서 1만큼, 2에서 2만큼 코인을 주면 총 2개로 코인의 수가 거스름돈의 코인 수는 <code>3 -&gt; 2</code>로 줄어들게 됩니다.</p>\n<p>저희가 하나씩 짚어가며 살펴본 루트는 가장 왼쪽의 <code>3 -&gt; 2 -&gt; 1 -&gt; 0</code>으로 뻗어나가는 경우입니다.</p>\n<p><strong>이를 <code>경우 1</code>이라고 하겠습니다.</strong></p>\n<p>그리고 <code>3 -&gt; 2 -&gt; 0</code> 코인 1짜리와 2짜리를 순서대로 주어 코인 2개로 거슬러주는 경우의 수를 보았습니다.</p>\n<p><strong>이를 <code>경우 2</code>이라고 하겠습니다.</strong></p>\n<p>그림으로 보면 아래와 같습니다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuShBJqbLK39MKaWiLZ2EDu3oZS1y8pZV4CmtXFCDm7m33BuX5vSIq1Gb1LrTEw0fG9QLBaZC22vc21L34W9fi3925W4Q15G453944eBeSqZDIm6w6m00\" alt=\"uml diagram\">\n<p>레벨 1의 노드 2에서\n<code>경우 1</code>과 <code>경우 2</code>의 결과 값이 모이게 됩니다.</p>\n<p>코인 1을 3번 쓴 <code>경우 1</code>의 결과 값은 3입니다.</p>\n<p>코인 1, 2를 섞어 사용한 <code>경우 2</code>의 결과 값은 2입니다.</p>\n<p>이제 상위 노드에 <code>경우 1</code>과 <code>경우 2</code>를 비교해\n작은 값을 반환하면 됩니다.\n아래 코드가 바로 그런 코드입니다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token comment\">// java</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subProblem <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t\tres <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> subProblem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">!=</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POSITIVE_INFINITY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre>\n<p>마지막으로 -1을 반환하는 서브트리에 대한 처리입니다.</p>\n<p>해당 서브트리는 결과값을 내지 못했으므로\n무한대의 값을 상위 루트에 올립니다.</p>\n<p>서브트리의 반환값은 서브트리의 부모 트리가 받게 되는데\n해당 값은 다시 비교되어 적은 값을 부모트리에 올립니다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token comment\">// java</span>\n\t\t<span class=\"token keyword\">float</span> res <span class=\"token operator\">=</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POSITIVE_INFINITY</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이제 모든 설명이 끝났습니다. 😆</p>\n<br>\n<br>\n<br>\n<h2 id=\"-5\" tabindex=\"-1\">풀이 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/coin-change-problem/\">#</a></h2>\n<p>아래의 재귀트리는 주어진 코인 배열을 순회하면서 각 코인을 통해\n재귀 함수를 실행합니다.</p>\n<ul>\n<li>재귀 함수의 기저조건은 <code>amount = 0</code>이 되었을 때 0을 반환합니다.</li>\n<li><code>amount</code>의 값이 <code>0</code> 보다 작은 경우 <code>-1</code>을 반환합니다.\n해당 재귀의 결과는 유효하지 않다는 정보를 나타냅니다.</li>\n</ul>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token comment\">// java</span>\n\n<span class=\"token keyword\">package</span> <span class=\"token namespace\">leetCodes</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CoinChange</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> coins <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result: \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> coins<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> `amount`<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// base case</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>amount <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 딱 맞아 떨어지는 경우</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>amount <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 초과하는 경우</span>\n\n\t\t<span class=\"token keyword\">float</span> res <span class=\"token operator\">=</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POSITIVE_INFINITY</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> coin <span class=\"token operator\">:</span> coins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">int</span> subProblem <span class=\"token operator\">=</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">,</span> amount <span class=\"token operator\">-</span> coin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subProblem <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t\tres <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> subProblem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">!=</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POSITIVE_INFINITY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이런 문제는 재귀 트리를 그려보면 이해가 쉬운데요</p>\n<p>꼭 자기 손으로 그려보는게 좋습니다.</p>\n<p>아래는 위 재귀트리를 통한 문제풀이를 UML을 사용해 나타낸 것입니다.</p>\n<blockquote>\n<p>단계를 나누어 하나씩 음미하는 시간을 가지겠습니다.</p>\n</blockquote>\n<img src=\"https://www.plantuml.com/plantuml/svg/PL513eGW3Bpp2iATXDQR1-DFDYPw4pTPzVzRIe6YjyvqPZheV5xBxxhZRexlkbatEBkSTlW4mSWOAmR6yC8WE30ETL_mSu-2VGw8BR4nO8oZ9ivwFr4JcaOFcY89KKWoL9p86fKC8secY9475PykWb995FGbsDVTOmrK6nORF1gabQhUdukvEiaYl9_Jmc9vTfxqfm0pRyTAV_CF\" alt=\"uml diagram\">\n<br>\n<br>\n<br>\n<h2 id=\"-6\" tabindex=\"-1\">마무리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/coin-change-problem/\">#</a></h2>\n<p>재귀는 컴퓨터에 무한한 속도와 자원이 있다면 거의 모든 문제를 해결 할 수 있는 만능키와 같습니다. (모든 경우를 무한한 속도로 찾으면 되니까요! 🤖)</p>\n<p>재귀가 나타내는 트리와 그 트리를 탐색하는 방법,</p>\n<p>재귀 함수가 반환한 결과값이 어디로 이동하는지,</p>\n<p>반환된 값들 끼리의 비교</p>\n<p>이 모든 것을 알게 되면 최적화를 할 수 있는 빈틈이 보이게 되리라 믿습니다.</p>\n<p>긴 글 봐주셔서 감사합니다.</p>\n",
			"date_published": "2023-06-13T01:00:27Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JAVA/leet-code/solve-the-Fibonacci-problem-using-a-dynamic-programming-approach/",
			"url": "https://zerozoo-a.github.io/blog/JAVA/leet-code/solve-the-Fibonacci-problem-using-a-dynamic-programming-approach/",
			"title": "정겨운 피보나치 수열",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"\" tabindex=\"-1\">피보나치 수열에 대해 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/solve-the-Fibonacci-problem-using-a-dynamic-programming-approach/\">#</a></h2>\n<hr>\n<p>섬에 토끼를 풀었더니.. 하는 풀이는 대체 이해가 안가더라구요</p>\n<p>그냥 어떤 수열인지를 써놓으면 직관적으로 이해가 될 것입니다.</p>\n<p><code>1 1 2 3 5 ...</code></p>\n<p><a href=\"https://ko.wikipedia.org/wiki/%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98_%EC%88%98\">초항과 둘째항이 1이며 그 뒤의 모든 항은 바로 앞 두항의 합인 수열입니다. - wiki</a></p>\n<br>\n<br>\n<br>\n<h2 id=\"brute-force\" tabindex=\"-1\">brute force 풀이 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/solve-the-Fibonacci-problem-using-a-dynamic-programming-approach/\">#</a></h2>\n<hr>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token comment\">// java</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>소모된 실행시간과 메모리 비트 수를 그래프로 나타낸 모습\n무려 런타임 8ms가 나왔다.</p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/XfBWbeg2-0-1200.webp\" width=\"100%\" height=\"auto\" alt=\"profile solving brute force method\" loading=\"lazy\" decoding=\"async\"></div>\n<ul>\n<li>\n<p>단순 재귀 호출입니다.</p>\n</li>\n<li>\n<p>재귀 호출을 두번 하여 재귀 트리를 그리게 됩니다.</p>\n</li>\n<li>\n<p>외우기 좋습니다.</p>\n</li>\n<li>\n<p>중복된 계산이 많습니다.</p>\n</li>\n</ul>\n<p>재귀 호출을 통해 n이하의 모든 피보나치 값을 전색합니다.</p>\n<br>\n<br>\n<br>\n<h2 id=\"memoization\" tabindex=\"-1\">memoization을 사용한 풀이 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/solve-the-Fibonacci-problem-using-a-dynamic-programming-approach/\">#</a></h2>\n<hr>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token comment\">// java</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> memo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> memo<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tmemo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>속도는 0ms가 나왔습니다. 기존의 로직에 비하면 놀라운 발전이죠</p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/8KIac95JXa-1200.webp\" width=\"100%\" height=\"auto\" alt=\"profile solving memoization method\" loading=\"lazy\" decoding=\"async\"></div>\n<ul>\n<li>메모 전략을 통해 값을 구한적이 있다면 그냥 반환함</li>\n<li>아니라면 저장하고 반환 함</li>\n</ul>\n<p>해당 전략은 메모리를 사용해 속도를 높인다는 단순하지만 강력한 전략입니다.\n요즘 같은 시대에 시간자원과 cpu 처리량은 메모리에 비해 비쌉니다.</p>\n<p>간단히 풀이하자면 memo라는 추가적인 변수가 생겼습니다.\n메모는 위 풀이에선 배열로 구현했지만 key - value 쌍이여도 구현 할 수 있습니다.</p>\n<p>피보나치 수열의 각 값은 고유합니다. 따라서 이런 전략을 세울 수 있습니다.</p>\n<p>피보나치 수열의 각 수열은 초항과 그 다음 항인 1, 1을 제외하면 모든\n수열의 항이 다른 값을 가지게 됩니다.</p>\n<p>따라서 배열의 각 인덱스에 각 항의 값을 저장합니다.</p>\n<p>재귀 트리를 전색하면서 메모에 값이 저장되어 있다면 재귀에 들어가지 않고 바로 값을 반환합니다.</p>\n<p>없다면 메모에 값을 저장하고 값을 반환해줍니다.</p>\n<br>\n<br>\n<br>\n<h2 id=\"dp\" tabindex=\"-1\">dp 배열을 통한 풀이 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/solve-the-Fibonacci-problem-using-a-dynamic-programming-approach/\">#</a></h2>\n<hr>\n<p>dp 배열을 통한 상향식 문제 풀이</p>\n<p>array를 생성하고 dp[1], dp[2]부터 값을 채워 나갑니다.\n초항과 그 다음 항은 피보나치 수열을 반복하는데 필수적인 요소이므로\n직접 넣어줍니다.</p>\n<p>그 다음은 반복문을 돌면서 dp[3], dp[4], ...dp[n]까지\n값을 채워줍니다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\">\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>수치가 준수합니다.</p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/OMis6e4GMK-1200.webp\" width=\"100%\" height=\"auto\" alt=\"profile solving memoization method\" loading=\"lazy\" decoding=\"async\"></div>\n<p>아래는 책의 인용입니다.</p>\n<blockquote>\n<p>위 알고리즘은 실제 문제 구조를 나타내는 수학식인 상태 전이 방정식과 연결된다.</p>\n</blockquote>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.3599999999999999em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext> if </mtext><mn>1</mn><mo separator=\"true\">,</mo><mtext> </mtext><mn>1</mn><mo stretchy=\"false\">(</mo><mi>n</mi><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext> if </mtext><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mtext> </mtext><mn>1</mn><mo stretchy=\"false\">(</mo><mi>n</mi><mo>&gt;</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">f(n)=\\begin{cases}\n\\text{ if } 1,\\space{1}(n = 1, 2) \\\\\n\\text { if } f(n - 1) + f(n - 2),\\space{1}(n &gt; 2)\n\\end{cases}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0000299999999998em;vertical-align:-1.25003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\"> if </span></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\"> if </span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<blockquote>\n<p>상태 전이 방정식은 고급스러운 이름일 뿐이고\nf(n)을 n으로 만들기 위해 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>과 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n - 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>를 더하고 옮기는 바로 이것을 상태 전이라 합니다.\n(출처 알고리즘 치트시트 / 푸둥라이 저)</p>\n</blockquote>\n<br>\n<br>\n<br>\n<h2 id=\"dp-1\" tabindex=\"-1\">dp의 상태 압축 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/solve-the-Fibonacci-problem-using-a-dynamic-programming-approach/\">#</a></h2>\n<hr>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token comment\">// java</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> added <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span> <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            added <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n            a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n            b <span class=\"token operator\">=</span> added<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>메모리와 사용된 비트수가 압도적인 이 방법은 뭘까요?</p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/7BA0nO4DCC-1200.webp\" width=\"100%\" height=\"auto\" alt=\"profile solving iterate method\" loading=\"lazy\" decoding=\"async\"></div>\n<p>이 방법은 하나의 아이디어를 통한 해결방법입니다.</p>\n<p>이 문제에서 구하는 것은 무엇일까요?\nn번째의 피보나치 항이 무슨 값을 가지고 있는가? 입니다.</p>\n<p>사람이 피보나치 수열을 구할 때 재귀 트리를 만들고 이를 순회하진 않습니다.</p>\n<p>바로 이런 방식으로 구하죠</p>\n<p>1, 1, 2, 3, 5 ...\n이렇게 하나씩 세어가며 구합니다. (보통 그렇지 않나요? 👀)\n아무튼 이 방식을 그대로 컴퓨터에게 실행시키는 것입니다.</p>\n<p>memo를 할 필요도 사실은 없는 것입니다.</p>\n<p>피보나치 수열의 100번째를 구하는데 필요한 항은 98, 99번째 항입니다.\n50번째 항이 뭔지는 중요한 것이 아니였다는 거죠</p>\n<h2 id=\"-1\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/leet-code/solve-the-Fibonacci-problem-using-a-dynamic-programming-approach/\">#</a></h2>\n<hr>\n<p>피보나치를 통해 재귀 트리, 메모, 반복문\n각각의 풀이법과 장단점을 알아봤습니다.</p>\n<p>brute force &gt; memoization &gt; dp &gt; dp의 상태 압축\n순으로 성능이 좋아졌습니다.</p>\n<p>다음은 동전 계산하기 문제를 풀어봅니다.</p>\n",
			"date_published": "2023-06-10T21:45:20Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JS/about-reduce/",
			"url": "https://zerozoo-a.github.io/blog/JS/about-reduce/",
			"title": "reduce란 무엇인가",
			"content_html": "<br>\n<br>\n<br>\n<h2 id=\"reduce\" tabindex=\"-1\">reduce란 무엇인가 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/about-reduce/\">#</a></h2>\n<hr>\n<p>수학을 배우다보면 정의 -&gt; 활용의 순서로 배우게 됩니다.</p>\n<p>reduce란 무엇인지 알아봅시다.</p>\n<blockquote>\n<p>reduce() 메서드는 배열의 각 요소에 대해 주어진 리듀서 (reducer) 함수를 실행하고, 하나의 결과값을 반환합니다.</p>\n</blockquote>\n<p>reduce는 reducer함수를 실행한다.. 아리송합니다.\nreducer는 뭘까요?</p>\n<blockquote>\n<p>리듀서 함수는 네 개의 인자를 가집니다. <br></p>\n<ul>\n<li>1️⃣ 누산기 (acc)</li>\n<li>2️⃣ 현재 값 (cur)</li>\n<li>3️⃣ 현재 인덱스 (idx)</li>\n<li>4️⃣ 원본 배열 (src)\n<br>\n리듀서 함수의 반환 값은 누산기에 할당되고, 누산기는 순회 중 유지되므로 결국 최종 결과는 하나의 값이 됩니다.</li>\n</ul>\n</blockquote>\n<p>그렇습니다 reduce는 reducer함수를 실행하는 실행부이고\nreducer는 concrete한 함수를 지니고 있는 구현체입니다.</p>\n<br>\n<br>\n<br>\n<h2 id=\"\" tabindex=\"-1\">그래서 뭔말이야? <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/about-reduce/\">#</a></h2>\n<hr>\n<p>reduce 함수가 하고 싶은 일을 요약하자면</p>\n<p>시퀀스들을 하나의 어떤 값으로 뽑아낸다는 것입니다.</p>\n<p>예를 들어보죠</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span></code></pre>\n<p>위의 배열이 있다고 합시다. 위 배열의 인자를 모두 더한 하나의 값으로 만들고 싶다면\n어떻게 해야 할까요?</p>\n<p>반복문을 실행하면 되겠습니다</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> sum <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 45</span></code></pre>\n<p>이런식입니다.</p>\n<p>전혀 reduce 함수를 사용하지 않아도 구현 할 수 있습니다.</p>\n<p>reduce 함수를 사용하면 이런 느낌이겠습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> cur</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> acc <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>와! 좀 짧아졌네요!</p>\n<p>reduce 함수는 reducer 함수의 인자가 3개일 때와 2개일 때 다르게 작동합니다.\n2개인 경우 시퀀스의 첫 인자를 시작 값으로 합니다.</p>\n<p>위의 예를 들면 reducer 함수가 인자를 2개 받으므로 1이 위 reducer 함수의 시작값이 됩니다.</p>\n<br>\n<br>\n<br>\n<h2 id=\"reduce-1\" tabindex=\"-1\">reduce를 사용해 압축하기 (접기) <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/about-reduce/\">#</a></h2>\n<hr>\n<p>하나의 상황을 가정해보죠 이런 일은 생각보다 현업에서도 있습니다.</p>\n<p>아래의 cars라는 변수에는 객체를 담은 배열이 있습니다.</p>\n<p>그런데 좀 정리를 하고 싶습니다. 예를 들어 make 별로 정리를 하고 싶다고 가정하죠\n물론 여러 방법이 있겠습니다만 reduce를 사용해 이 문제를 해결해봅시다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// cars라는 배열을</span>\n<span class=\"token keyword\">const</span> cars <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">make</span><span class=\"token operator\">:</span> <span class=\"token string\">'audi'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> <span class=\"token string\">'r8'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token string\">'2012'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">make</span><span class=\"token operator\">:</span> <span class=\"token string\">'audi'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> <span class=\"token string\">'rs5'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token string\">'2013'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">make</span><span class=\"token operator\">:</span> <span class=\"token string\">'ford'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> <span class=\"token string\">'mustang'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token string\">'2012'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">make</span><span class=\"token operator\">:</span> <span class=\"token string\">'ford'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> <span class=\"token string\">'fusion'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token string\">'2015'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">make</span><span class=\"token operator\">:</span> <span class=\"token string\">'kia'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> <span class=\"token string\">'optima'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token string\">'2012'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 이런 형태로 만들고 싶습니다.</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"audi\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string-property property\">\"make\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"audi\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-property property\">\"model\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"r8\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-property property\">\"year\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2012\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string-property property\">\"make\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"audi\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-property property\">\"model\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rs5\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-property property\">\"year\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2013\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"ford\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string-property property\">\"make\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ford\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-property property\">\"model\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mustang\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-property property\">\"year\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2012\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string-property property\">\"make\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ford\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-property property\">\"model\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fusion\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-property property\">\"year\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2015\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"kia\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string-property property\">\"make\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"kia\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-property property\">\"model\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"optima\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-property property\">\"year\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2012\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>여기서 현업의 개발자라면 자동차의 maker는 이것보다 훨씬 많고 앞으로도 늘어날지 모른다라는 점과\n확장 가능하면서도 유연한 코드를 작성하고 싶어 할 것입니다.</p>\n<p>이제 여기서 reduce가 등장합니다.</p>\n<br>\n<br>\n<br>\n<h2 id=\"-1\" tabindex=\"-1\">예제 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/about-reduce/\">#</a></h2>\n<hr>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> cars <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">make</span><span class=\"token operator\">:</span> <span class=\"token string\">'audi'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> <span class=\"token string\">'r8'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token string\">'2012'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">make</span><span class=\"token operator\">:</span> <span class=\"token string\">'audi'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> <span class=\"token string\">'rs5'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token string\">'2013'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">make</span><span class=\"token operator\">:</span> <span class=\"token string\">'ford'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> <span class=\"token string\">'mustang'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token string\">'2012'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">make</span><span class=\"token operator\">:</span> <span class=\"token string\">'ford'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> <span class=\"token string\">'fusion'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token string\">'2015'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">make</span><span class=\"token operator\">:</span> <span class=\"token string\">'kia'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> <span class=\"token string\">'optima'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token string\">'2012'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\ncars<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span>cur</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">.</span>make<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 누적 값에 make가 이미 있다면</span>\n        acc<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">.</span>make<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 누적 값의 배열에 push</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        acc<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">.</span>make<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 아니면 make를 key로 배열을 생성</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 누적 값을 다음 시퀀스 인자에 넘겨준다.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 빈 객체부터 시작</span></code></pre>\n<br>\n<br>\n<br>\n<h2 id=\"-2\" tabindex=\"-1\">예제의 설명 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/about-reduce/\">#</a></h2>\n<hr>\n<p>reduce에 친숙하지 않다면 위 코드는 살짝 머리아플 수 있습니다.\n하지만 괜찮습니다.</p>\n<p>알고보면 어려울게 하나도 없습니다.</p>\n<p>위 코드는 빈 객체부터 시작합니다.</p>\n<p>acc에는 빈 객체가 담겨 있습니다.\n만약 빈 객체에 make라는 key가 있다면 값을 추가하고\n아니라면 key를 기준으로 배열을 만들어줍니다.</p>\n<p>이게 끝나면 다음번 순회에 acc값을 넘겨줍니다.</p>\n<p>다음번 순회는 지난 번 acc 값이 그대로 채워진 상태로 시작합니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">audi</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">\"make\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"audi\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-property property\">\"model\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"r8\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string-property property\">\"year\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2012\"</span>  \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이번 순회하는 cur의 make가 audi라면 if문을 통과해\n배열에 push하게 됩니다. 이를 다시 다음 시퀀스에 넘기게 됩니다.</p>\n<p>따라서 배열이 하나의 객체로 &quot;접히는&quot; 압축되는 함수인 것이죠.</p>\n<br>\n<br>\n<br>\n<h2 id=\"-3\" tabindex=\"-1\">마무리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/about-reduce/\">#</a></h2>\n<hr>\n<blockquote>\n<p>보통 pipe나 go 함수를 통과해 시퀀스를 계산 및 필터링하고\nreduce를 통해 모두 접어 하나의 객체나 값으로 뽑아내어 주는 것</p>\n</blockquote>\n<p>이게 핵심입니다.</p>\n<p>응용은 아주 많습니다. pipe나 go도 모두 reduce를 사용하고 있으니까요</p>\n<p>pipe, go는 나중에 기회가 되면 설명하겠습니다.</p>\n",
			"date_published": "2023-06-10T09:22:10Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JAVA/thread-pool-basic-2/",
			"url": "https://zerozoo-a.github.io/blog/JAVA/thread-pool-basic-2/",
			"title": "thread pool의 기초 2",
			"content_html": "<h2 id=\"executors\" tabindex=\"-1\">Executors에 대해 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/thread-pool-basic-2/\">#</a></h2>\n<p>Executors란 무엇일까요?</p>\n<blockquote>\n<p>Factory and utility methods for Executor, ExecutorService, ScheduledExecutorService, ThreadFactory, and Callable classes defined in this package.</p>\n</blockquote>\n<p>바로 이전 글에서 살펴본 Executor의 Factory와 utility methods라고 합니다.</p>\n<p>Executor는 execute method의 interface였습니다.\nexecute method의 반환값은 void입니다.</p>\n<p>Executors는 Executor를 확장한 ExecutorService 타입의 pool을 반환합니다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"> <span class=\"token class-name\">ExecutorService</span> pool <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>위의 Executors의 method는 Executor interface를 확장한 ExecutorService pool을 반환하고</p>\n<p>이를 이용해 스레드 pool을 사용 할 수 있습니다.</p>\n<h2 id=\"thread-pool\" tabindex=\"-1\">thread pool들의 종류를 가볍게 알아보자 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/thread-pool-basic-2/\">#</a></h2>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\">\t<span class=\"token class-name\">ExecutorService</span> pool <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\n    \n    <span class=\"token class-name\">ExecutorService</span> pool2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>위의 <code>newFixedThreadPool(2);</code>라는 method는\n<code>ExecutorService pool</code>을 반환하고 pool을 사용 할 수 있게 됩니다.</p>\n<p>평소처럼 jdk 설명을 읽어봅시다.</p>\n<blockquote>\n<p>Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue.</p>\n</blockquote>\n<blockquote>\n<p>pool을 생성하고 integer를 인자로 받아 unbounded queue를 생성합니다.</p>\n</blockquote>\n<h2 id=\"thread-pool-queue\" tabindex=\"-1\">thread pool의 queue에 대해 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/thread-pool-basic-2/\">#</a></h2>\n<p>여기서 queue가 나왔습니다.</p>\n<p>thread pool은 두가지 queue를 제공합니다.</p>\n<p>크기의 제한이 있는 bounded queue와 unbounded queue입니다.</p>\n<p>예상 할 수 있듯이 bounded는 queue에 최대치를 걸어 그 이상을 넘는 요청은 thread를 대기시킵니다.</p>\n<p>unbounded는 제한이 없지만 memory를 넘쳐버릴 수 있다는 점에 주의해야 합니다.</p>\n<h2 id=\"\" tabindex=\"-1\">예제 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/thread-pool-basic-2/\">#</a></h2>\n<p>예제에서는 pool의 사용법과\nExecutorService class를 가지는 pool 객체를 생성하여\npool을 실행해봅니다.</p>\n<p>위의 설명을 통해 알 수 있듯이 자신이 사용하는 pool이\n어떤 로직을 통해 실행되는 것인지 알아두어야 합니다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Chapter25</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutorService</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Executors</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Ex10_ThreadPool3</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Runnable</span> task1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\": 5초 후 실행\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">ExecutorService</span> pool <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">ExecutorService</span> pool2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tpool<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span>task1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tpool2<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span>task1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tpool<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tpool2<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"-1\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/thread-pool-basic-2/\">#</a></h2>\n<p>thread pool은 ExecutorService 클래스를 가집니다.\nExecutorService는 Executor를 확장하여 execute 메서드가 있습니다.</p>\n<p>pool은 제한이 있는 큐와 없는 큐가 있습니다.\n당연히 제한이 없는 큐는 사용에 주의해야겠습니다.</p>\n",
			"date_published": "2023-06-08T22:59:02Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JAVA/thread-pool-basic-1/",
			"url": "https://zerozoo-a.github.io/blog/JAVA/thread-pool-basic-1/",
			"title": "thread pool의 기초 1",
			"content_html": "<p><a href=\"https://unsplash.com/ko/%EC%82%AC%EC%A7%84/ewSBvLSp3Tc\"> 출처: unsplash</a></p>\n<h2 id=\"thread-pool\" tabindex=\"-1\">thread pool <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/thread-pool-basic-1/\">#</a></h2>\n<p>교과서적인 내용입니다만 java에서 process 내부에 존재하는 스레드는 생성비용이 비쌉니다. (플랫폼 스레드를 사용해서 그렇기도 하며, 최신 버전에는 경량 스레드인 가상 스레드가 나왔습니다.)</p>\n<p>thread pool에서 pool이란 위의 그림처럼 스레드들을 생성하고 죽이는게 아니라 생성한 다음 유지\n및 재사용을 하기 위한 방법입니다.</p>\n<p>비슷하게 connection pool이나 js에선 promise pool 등 여러 의미로 사용됩니다만</p>\n<p>개발자에게 전달하고자 하는 내용은 같습니다. 기존 대비 효율을 높여주겠다는 내용이죠</p>\n<h2 id=\"pool\" tabindex=\"-1\">pool의 생성 방법 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/thread-pool-basic-1/\">#</a></h2>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutorService</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Executors</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ExecutorService</span> pool <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 방법으로 pool을 생성합니다.</p>\n<h2 id=\"executorservice\" tabindex=\"-1\">ExecutorService에 대해 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/thread-pool-basic-1/\">#</a></h2>\n<p>ExecutorService는 대체 뭘까요?</p>\n<p>이럴 때는 그냥 JDK에서 구현해놓은 구현체를 보면 됩니다.\n물론 제가 뭣도 아닌지라 설명을 아주 약간만 볼 것입니다.</p>\n<blockquote>\n<p>An ExecutorService can be shut down, which will cause it to reject new tasks. Two different methods are provided for shutting down an ExecutorService.</p>\n</blockquote>\n<blockquote>\n<p>ExecutorService를 종료하면 새 작업이 거부될 수 있습니다. ExecutorService를 종료하기 위해 두 가지 방법이 제공됩니다.</p>\n</blockquote>\n<p>또한 ExecutorService는 Executor interface를 부모로 갖는 class입니다.\n위 설명만으로는 전부 이해하기가 난해합니다 추가적으로 정보를 찾아봐야겠습니다. 🤔</p>\n<blockquote>\n<p>... Method submit extends base method Executor.execute(Runnable) by creating and returning a Future that can be used to cancel execution and/or wait for completion.</p>\n</blockquote>\n<blockquote>\n<p>메소드 제출은 실행 취소 및/또는 완료 대기에 사용할 수 있는 Future를 생성 및 리턴하여 기본 메소드 Executor.execute(Runnable)를 확장합니다.</p>\n</blockquote>\n<p>이제 알겠습니다. ExecutorService는 스레드를 실행, 정지하는 역할이 주된 역할인가봅니다.\n아무래도 thread pool이니까 당연하겠네요</p>\n<h2 id=\"executor\" tabindex=\"-1\">Executor에 대해 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/thread-pool-basic-1/\">#</a></h2>\n<p>그럼 Executor는 뭘까요? 아래의 설명을 보시죠</p>\n<blockquote>\n<p>An Executor that provides methods to manage termination and methods that can produce a Future for tracking progress of one or more asynchronous tasks.</p>\n</blockquote>\n<blockquote>\n<p>종료를 관리하는 메서드와 하나 이상의 비동기 작업의 진행 상황을 추적하기 위해 Future를 생성할 수 있는 메서드를 제공하는 Executor입니다.\n라고 합니다.</p>\n</blockquote>\n<h2 id=\"future\" tabindex=\"-1\">Future에 대해 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/thread-pool-basic-1/\">#</a></h2>\n<p>모르는게 꼬리를 무네요 Future는 뭘까요?</p>\n<blockquote>\n<p>A Future represents the result of an asynchronous computation.</p>\n</blockquote>\n<blockquote>\n<p>Future는 비동기 계산의 결과를 나타냅니다.</p>\n</blockquote>\n<p>미래의 값이므로 Future라는 이름을 붙인 것 같습니다.\n이제 thread pool에 대한 대략적인 class들의 설명을 모두 훑어보았습니다.</p>\n<h2 id=\"\" tabindex=\"-1\">정리 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/thread-pool-basic-1/\">#</a></h2>\n<p>정리해보자면 ExecutorService는</p>\n<p>스레드의 실행을 담당하는 Executor를 확장하여 스레드를 실행 할 수 있고\n자체적으로 shutdown 메서드를 구현하여 스레드를 종료 할 수 있는 클래스입니다.\n비동기의 결과값으로 가져오는 데이터를 Future라고 합니다.</p>\n<p>그럼 실제 예제를 보며 확인하겠습니다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">예제 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/thread-pool-basic-1/\">#</a></h2>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Chapter25</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutorService</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Executors</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Ex08_ThreadPool1</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> money <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Runnable</span> task1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tmoney<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n\t\t<span class=\"token class-name\">Runnable</span> task2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tmoney<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">ExecutorService</span> pool <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\t\tpool<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span>task1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n\t\tpool<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span>task2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"End \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tpool<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>(위 예제는 이재환의 자바 프로그래밍이라는 책의 예제중 일부입니다.)</p>\n<p>위 코드에서 방금 학습한 pool 객체를 확인할 수 있습니다.\nExecutorService를 타입으로 가지고 있습니다.</p>\n<p>따라서 스레드의 등록 및 실행 종료를 담당합니다.</p>\n<p>submit으로 Runnable 메서드를 실행합니다.\nshoutdown으로 종료합니다.</p>\n<p>Executors는 다음 시간에 알아봅시다.</p>\n",
			"date_published": "2023-06-08T00:15:48Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JAVA/volatile%20keyword/",
			"url": "https://zerozoo-a.github.io/blog/JAVA/volatile%20keyword/",
			"title": "volatile keyword와 가시성 feat.cpu-cache",
			"content_html": "<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/1froeAPKw4-1200.webp\" width=\"100%\" height=\"auto\" alt=\"https://unsplash.com/ko/%EC%82%AC%EC%A7%84/EUsVwEOsblE\" loading=\"lazy\" decoding=\"async\"></div>\n<h2 id=\"cpu-cache\" tabindex=\"-1\">cpu cache에 대해 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/volatile%20keyword/\">#</a></h2>\n<p>cpu와 memory간의 속도차는 상당합니다.</p>\n<p>이 간극을 줄이기 위해 cpu는 cache 영역을 가집니다.</p>\n<p>cpu는 main memory의 값을 계속 조회하는 대신\n동일한 변수에 대한 조회 요청에는 cpu cache를 조회합니다.</p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/-Rw-PEyFnQ-1200.webp\" width=\"100%\" height=\"auto\" alt=\"cpu-cache\" loading=\"lazy\" decoding=\"async\"></div>\n<p>이미지로는 위와 같은 이미지가 그려지게 됩니다.\ncpu는 어셈블리어로 변환된 코드를 읽고 그대로 실행하게 되는데요</p>\n<p>아래와 같은 순서를 따릅니다.</p>\n<p>1️⃣ LOAD(ldr)를 통해 cpu cache의 값을 읽어옵니다.</p>\n<p>2️⃣ 특정 명령어를 실행합니다.</p>\n<p>3️⃣ STORE(str)를 통해 메모리에 값을 저장하게 됩니다.</p>\n<p>이때 메모리에 접근하는 thread가 하나라면 그대로 메모리가 업데이트 됩니다.</p>\n<h2 id=\"thread-memory\" tabindex=\"-1\">멀티 thread의 memory 접근 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/volatile%20keyword/\">#</a></h2>\n<p>multi thread라면 공유 자원에 접근할 때 문제가 발생합니다.\n바로 아래 이미지와 같은 상황입니다.</p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/ZGkA8pUVTd-1200.webp\" width=\"100%\" height=\"auto\" alt=\"cpu-cache2\" loading=\"lazy\" decoding=\"async\"></div>\n<p>cpuA가 LOAD 한 값은 foo 변수의 false입니다.</p>\n<p>cpuB가 LOAD 한 값은 foo 변수의 false입니다.</p>\n<p>cpuA는 cpu cache에 값을 저장하고 변수를 true로 변경합니다.</p>\n<p>cpuB는 cpu cache에 값을 저장하고 해당 변수를 조건으로 반복문을 실행합니다.</p>\n<p>cpuB는 cpuA에 의해 변경된 값을 조회하지 않고 cpu cache에 저장된 값을 조회하므로\n값의 공유가 이루어지지 않습니다.</p>\n<p>즉 main memory를 바라보고 있지 않은 상태입니다.</p>\n<p>따라서 가시성이 없다고 할 수 있습니다.</p>\n<h2 id=\"\" tabindex=\"-1\">예시 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/volatile%20keyword/\">#</a></h2>\n<p>설명이 길었습니다만 위의 상황을 방지해주는 키워드가</p>\n<p>공용 메모리에 사용하는 volatile 키워드입니다.</p>\n<p>해당 키워드는 공용 메모리로 사용될 값이 cpu cache에 저장되는 것을 방지해줍니다.</p>\n<p>계속 main memory에서 값을 조회해오도록 코드가 변경되어집니다.</p>\n<p>예시 코드는 아래와 같습니다.</p>\n<p>아래의 코드는</p>\n<p>공용 자원의 값을 기준으로 while문을 도는 thread를 시작시킵니다.\n공용 자원의 값을 변경하면 위의 thread의 while문 조건이 변경됩니다.\nthread는 공용자원의 변경을 확인하고 루프를 빠져나옵니다.</p>\n<p>여기서 공용자원에 사용된 volatile 키워드가 있고 없고에 따라</p>\n<p>thread는 무한 루프를 빠져나올 수 있고 없고가 결정됩니다.</p>\n<p>감사합니다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token comment\">// 예시 코드</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Ex001_Missile</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> hasMissileLaunched <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MissileInterceptor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token annotation punctuation\">@Override</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hasMissileLaunched<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">/** 대기중... */</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"요격 미사일 발사\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">launchMissile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> hasMissileLaunched <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">MissileInterceptor</span> missileInterceptor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MissileInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmissileInterceptor<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">launchMissile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmissileInterceptor<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"-1\" tabindex=\"-1\">요약 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JAVA/volatile%20keyword/\">#</a></h2>\n<p>cpu cache를 사용하는 공용 변수는\n각 thread가 값을 LOAD할 때 cpu cache에 값을 저장하게 된다.</p>\n<p>main memory의 값 변경이 다른 thread에 의해 이루어지는 경우\ncpu cache의 값과 main memory의 값이 달라져 예상과 다르게 작동할 수 있다.</p>\n",
			"date_published": "2023-06-06T17:59:23Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JAVA/lambda-and-annotation/",
			"url": "https://zerozoo-a.github.io/blog/JAVA/lambda-and-annotation/",
			"title": "lambda식과 어노테이션",
			"content_html": "<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/EtEJyggtf7-1200.webp\" width=\"100%\" height=\"auto\" alt=\"ahaha\" loading=\"lazy\" decoding=\"async\"></div>\n<p>하나의 메서드를 구현하는데 자바는 이런 저런 수고가 든다.</p>\n<p>모든게 class 기반인 자바에서는 함수 하나를 생성하는데 class, 생성자, 생성, method 호출까지\n여러가지 준비가 필요하다는 것이다.</p>\n<p>이는 개발 피로도에 직접적인 영향을 미치게 되는데 이는 당연히 생산성에 악영향을 미치게 된다.</p>\n<p>따라서 아래와 같은 방식이 생겨났다.</p>\n<p>JVM은 개인적으로 스칼라나 클로져같은 함수형 언어의 기반이기 때문에 java가 못할 이유는 하나도 없다.</p>\n<p>함수형 지원이 자바에서도 많이 성숙해졌다고 생각한다. 스트림의 에러처리나 쓰레드등의 운용등 자바스크립트보다 나은 부분이 더 많다고 생각한다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Unit11</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">String</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Ex11_Functional</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Unit11</span> u <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"String type을 리턴합니다.\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>위와 같은 방식으로 익명함수만을 위한 interface를 만들고 어노테이션을 달아놓자\n익명함수는 하나의 메서드만을 가질 수 있도록 제한하기 때문에\n복수의 메서드가 생기면 에러를 뱉어준다. 🤗</p>\n",
			"date_published": "2023-05-31T22:43:29Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JAVA/compareTo-method/",
			"url": "https://zerozoo-a.github.io/blog/JAVA/compareTo-method/",
			"title": "비교하자 compareTo",
			"content_html": "<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/cfWxs3v4H4-830.webp\" width=\"100%\" height=\"auto\" alt=\"compare image\" loading=\"lazy\" decoding=\"async\"></div>\n<p>compareTo method는 유니코드(아스키보다 넓은 범위)까지 지원하는 비교 함수입니다.</p>\n<p>설명의 원문은 아래와 같습니다.</p>\n<blockquote>\n<p>Compares two strings lexicographically. The comparison is based on the Unicode value of each character in the strings. The character sequence represented by this String object is compared lexicographically to the character sequence represented by the argument string. The result is a negative integer if this String object lexicographically precedes the argument string. The result is a positive integer if this String object lexicographically follows the argument string. The result is zero if the strings are equal; compareTo returns 0 exactly when the equals(Object) method would return true.</p>\n</blockquote>\n<p>문자열은 유니코드와 사전적 정의를 기반으로 작동합니다. (한글, 중국어, 일본어도 잘 되는 이유);\n두 문자열을 비교하여 같으면 0을 반환합니다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\">\t\t<span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"가나다라\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"가나다라\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// str1과 str2의 비교는 0을 반환</span></code></pre>\n<blockquote>\n<p>This is the definition of lexicographic ordering. If two strings are different, then either they have different characters at some index that is a valid index for both strings, or their lengths are different, or both. If they have different characters at one or more index positions, let k be the smallest such index; then the string whose character at position k has the smaller value, as determined by using the &lt; operator, lexicographically precedes the other string. In this case, compareTo returns the difference of the two character values at position k in the two string -- that is, the value: this.charAt(k)-anotherString.charAt(k)</p>\n</blockquote>\n<p>사전적 순서에 따라 두 문자를 비교하게 됩니다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\">\t\t<span class=\"token class-name\">String</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> c <span class=\"token operator\">=</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -7</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"H\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -7</span>\n\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -1</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -2</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -3</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -4</span>\n</code></pre>\n<blockquote>\n<p>If there is no index position at which they differ, then the shorter string lexicographically precedes the longer string. In this case, compareTo returns the difference of the lengths of the strings -- that is, the value:\nthis.length()-anotherString.length()</p>\n</blockquote>\n<p>길이가 다른 경우 문자열의 길이를 뺀 값을 반환합니다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token class-name\">String</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hell\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"He\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></code></pre>\n",
			"date_published": "2023-05-29T21:58:27Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JAVA/Deque/",
			"url": "https://zerozoo-a.github.io/blog/JAVA/Deque/",
			"title": "자바의 Deque에 대해 알아보자",
			"content_html": "<p>자바에서 Deque의 구현은 두 가지로 나뉘게 된다.</p>\n<p>Array를 통한 구현,\nLinkedList를 통한 구현이다.</p>\n<p>Array를 통해 Deque를 구현하게 되면 Array의 장단점이 그대로 계승된다.\n마찬가지로 LinkedList를 통해 Deque를 구현하면 LinkedList의 장단점이 그대로 계승된다.</p>\n<p>Most ArrayDeque operations run in amortized constant time. Exceptions include remove, removeFirstOccurrence, removeLastOccurrence, contains, iterator.remove(), and the bulk operations, all of which run in linear time.</p>\n<p>위에 언급되어 있는대로 remove, removeFirstOccurrence, removeLastOccurrence, contains, iterator.remove()\n는 선형시간의 시간복잡도를 가진다.</p>\n<p>우선 Array로 구현되어 있다고한다면 Array 의 단점이 생각나게 되는데 단점은 바로 첫 인자의 추가이다.</p>\n<p><code>{1,2,3}</code>의 배열이 있다고 치고 배열의 첫 인자에 0을 추가한다고 하자\n그렇다면 0을 추가하기 위해 1, 2, 3은 재정렬이 일어나 index를 다시 세팅해주어야 한다.\n<code>{0, 1, 2, 3} // 1, 2, 3은 이동된다.</code></p>\n<p>이를 방지하기 위해 어떻게 구현하면 좋을까?</p>\n<p>답은 간단하다. 문제를 회피하면 된다.</p>\n<p><code>{null, null, null, ..., 1, 2, 3, null, null, null, ..., null};</code></p>\n<p>이런 식으로 구현을 해놓고 0이 추가된다고 가정하면\n<code>{null, ..., 0, 1, 2, 3, null, ..., null}</code>\n이렇게 추가하면 된다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\">    <span class=\"token comment\">// The main insertion and extraction methods are addFirst,</span>\n    <span class=\"token comment\">// addLast, pollFirst, pollLast. The other methods are defined in</span>\n    <span class=\"token comment\">// terms of these.</span>\n\n    <span class=\"token comment\">/**\n     * Inserts the specified element at the front of this deque.\n     *\n     * @param e the element to add\n     * @throws NullPointerException if the specified element is null\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> es <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">;</span>\n        es<span class=\"token punctuation\">[</span>head <span class=\"token operator\">=</span> <span class=\"token function\">dec</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> es<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> tail<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">grow</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<p>이는 java의 Deque구현체의 일부이다.</p>\n<p>이런식으로 입력된 값과 index를 내부적으로 계산해 적절한 위치로 O(1)시간에 주입할 수 있게 하고\nhead == tail의 사이즈로 사이즈가 꽉 찬 경우 grow 메서드를 통해 Array 자체를 확장해버린다.</p>\n<p>Array를 확장할 때 인자가 모두 이동되므로 연산이 많이 들겠지만 그전까진 잘 사용할 수 있다.</p>\n<p>자바스크립트는 이런게 전무하기 때문에 너무 감사하다..\nJCF의 설명도 디버거 키고 들어가면 내용을 보도록하자</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>example</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayDeque</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Deque</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LinkedList</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Ex13_Deque</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> deq0 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> deq1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 앞으로 넣는다 {\"C\", \"B\", \"A\"}</span>\n\t\tdeq0<span class=\"token punctuation\">.</span><span class=\"token function\">offerFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdeq0<span class=\"token punctuation\">.</span><span class=\"token function\">offerFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdeq0<span class=\"token punctuation\">.</span><span class=\"token function\">offerFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>deq0<span class=\"token punctuation\">.</span><span class=\"token function\">pollFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// C</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>deq0<span class=\"token punctuation\">.</span><span class=\"token function\">pollFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// B</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>deq0<span class=\"token punctuation\">.</span><span class=\"token function\">pollFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A</span>\n\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 뒤로 넣는다 {\"A\", \"B\", \"C\"}</span>\n\t\tdeq0<span class=\"token punctuation\">.</span><span class=\"token function\">offerLast</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdeq0<span class=\"token punctuation\">.</span><span class=\"token function\">offerLast</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdeq0<span class=\"token punctuation\">.</span><span class=\"token function\">offerLast</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 뒤에서 꺼낸다</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>deq0<span class=\"token punctuation\">.</span><span class=\"token function\">pollLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// C</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>deq0<span class=\"token punctuation\">.</span><span class=\"token function\">pollLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// B</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>deq0<span class=\"token punctuation\">.</span><span class=\"token function\">pollLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A</span>\n\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// {}</span>\n\t\t<span class=\"token comment\">// 뒤로 넣는다</span>\n\t\t<span class=\"token comment\">// {\"A\"}</span>\n\t\t<span class=\"token comment\">// {\"A\", \"B\"}</span>\n\t\t<span class=\"token comment\">// {\"A\", \"B\", \"C\"}</span>\n\t\tdeq0<span class=\"token punctuation\">.</span><span class=\"token function\">offerLast</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdeq0<span class=\"token punctuation\">.</span><span class=\"token function\">offerLast</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdeq0<span class=\"token punctuation\">.</span><span class=\"token function\">offerLast</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>deq0<span class=\"token punctuation\">.</span><span class=\"token function\">pollFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>deq0<span class=\"token punctuation\">.</span><span class=\"token function\">pollFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// B</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>deq0<span class=\"token punctuation\">.</span><span class=\"token function\">pollFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// C</span>\n\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n",
			"date_published": "2023-05-28T22:04:24Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JAVA/List-queue/",
			"url": "https://zerozoo-a.github.io/blog/JAVA/List-queue/",
			"title": "List로 구현된 queue의 특징",
			"content_html": "<p>List로 구현된 queue는 iterable하다.\nList로 구현되어 있기 때문에 LinkedList를 사용 할 때와 같이 생성해주면 된다.</p>\n<p>단 구현된 method를 queue 처럼 사용하면 되는데 아래와 같이 사용하면 된다.</p>\n<p>offer는 추가,</p>\n<p>peek은 앞의 list를 확인만 하는 용도,</p>\n<p>poll은 꺼내어 사용하는 용도,</p>\n<p>size는 현재 총 남은 작업을 보여준다.</p>\n<p>foreach는 모두 소진되기 전에는 사용 할 수 있다.\npeek을 사용하며 돌기 때문에 queue를 소진시키진 않는다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>example</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LinkedList</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Queue</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Ex12_Queue</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> que <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// LinkedList는 List&lt;E>, Queue&lt;E>를 동시에 구현해놓았다.</span>\n\n\t\tque<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Que에 item을 추가</span>\n\t\tque<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tque<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> i <span class=\"token operator\">:</span> que<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 모두 꺼내기 전에는 작동 함,</span>\n\t\t\t<span class=\"token comment\">// que를 소비하지 않음,</span>\n\t\t\t<span class=\"token comment\">// peek을 사용하는 것으로 보임</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"iterable \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"que의 사이즈를 확인\"</span> <span class=\"token operator\">+</span> que<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"다음에 무엇이 나올지 확인\"</span> <span class=\"token operator\">+</span>que<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 첫 번째 객체 꺼내기</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"que의 사이즈를 확인\"</span> <span class=\"token operator\">+</span> que<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// -------------</span>\n\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"다음에 무엇이 나올지 확인\"</span> <span class=\"token operator\">+</span>que<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 두 번째 객체 꺼내기</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"que의 사이즈를 확인\"</span> <span class=\"token operator\">+</span> que<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// -------------</span>\n\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"다음에 무엇이 나올지 확인\"</span> <span class=\"token operator\">+</span>que<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 세 번째 객체 꺼내기</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"que의 사이즈를 확인\"</span> <span class=\"token operator\">+</span> que<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// -------------</span>\n\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"다음에 무엇이 나올지 확인\"</span> <span class=\"token operator\">+</span>que<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 없는 객체 꺼내기 null이 나옴</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"que의 사이즈를 확인\"</span> <span class=\"token operator\">+</span> que<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n\n\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> i <span class=\"token operator\">:</span> que<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 다 꺼내고 나서는 작동 안함</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"iterable\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n",
			"date_published": "2023-05-28T21:33:53Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JAVA/change-tree-set-compare-fn/",
			"url": "https://zerozoo-a.github.io/blog/JAVA/change-tree-set-compare-fn/",
			"title": "JCF의 tree set의 비교연산자를 바꾸기",
			"content_html": "<p>요약: Comparator interface를 구현한 class를 TreeSet class의\n인자로 넣어주면 해당 TreeSet의 인스턴스는 연산자로\n주입된 Comparator class의 compare 메서드를 사용하게 된다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>example</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TreeSet</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comparator</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyStringComparator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Ex10_Comparator</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//\t\tSet&lt;String> tree = new TreeSet&lt;>();</span>\n\t\t<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> tree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyStringComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ttree<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ttree<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B23\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ttree<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ttree<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D789\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ttree<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E0123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> tree<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token char\">'\\t'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n",
			"date_published": "2023-05-28T17:57:26Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JAVA/java%20hash%20set/",
			"url": "https://zerozoo-a.github.io/blog/JAVA/java%20hash%20set/",
			"title": "java hash set",
			"content_html": "<p>java의 HashSet은 JCF 프레임워크에 소속되어 있다.</p>\n<p>HashSet의 강점은 Override 할 수 있는 hashCode와 equals를 제공한다는 점이다.\n이를 통해 고유한 class에 대해 hash set을 생성 할 수 있다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>example</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashSet</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Ex02_Set</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ABC\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DEF\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HIJ\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"set size = 2\"</span> <span class=\"token operator\">+</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> s<span class=\"token operator\">:</span> set<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token char\">'\\t'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> age <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"compare to\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>age <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>javascript에선 어떻게 해야 할 까?</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> hashSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> a1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> a2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhashSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhashSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nhashSet<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// a1 a1 Set이 예상과는 다르게 작동한다.</span></code></pre>\n<p>javascript는 prototype toolchain 언어이기 때문에 java를 그대로 따라하면 안된다.</p>\n<p>이런식으로 하자</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"hash_\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Set</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">addCustom</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> mySet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmySet<span class=\"token punctuation\">.</span><span class=\"token function\">addCustom</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmySet<span class=\"token punctuation\">.</span><span class=\"token function\">addCustom</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmySet<span class=\"token punctuation\">.</span><span class=\"token function\">addCustom</span><span class=\"token punctuation\">(</span>obj3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mySet<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></code></pre>\n<p>custom method를 생성해 chain에 연결해주는 것으로 끝난다.\n자바스크립트는 할 수 없는게 아니라 다른 방식일 뿐이다.</p>\n<hr>\n<p><a href=\"https://images.unsplash.com/photo-1600463241302-88b0e1a51175?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1770&q=80\">이미지 출처</a></p>\n",
			"date_published": "2023-05-28T14:16:51Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JAVA/java%20bubble%20sort/",
			"url": "https://zerozoo-a.github.io/blog/JAVA/java%20bubble%20sort/",
			"title": "java bubble, insert sort",
			"content_html": "<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>example</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BubbleSort</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nums: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tarr<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tarr<span class=\"token punctuation\">[</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>example</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InsertSort</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">insertSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">/**\n\t *\n\t * j는 항상 외부 반복문인 i보다 하나 앞의 값을 가리킨다.\n\t * j는 0보다 커야한다 (배열이므로),\n\t * 하나 앞의 값인 j가 i보다 큰 경우 둘의 자리를 스왑한다.\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\ttemp <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> temp<span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tnums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tnums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n",
			"date_published": "2023-05-28T12:15:12Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/BROWSER/While%20handling%20an%20%60%3Ciframe%3E%60,%20I%20found%20out%20something/",
			"url": "https://zerozoo-a.github.io/blog/CS/BROWSER/While%20handling%20an%20%60%3Ciframe%3E%60,%20I%20found%20out%20something/",
			"title": "iframe을 다루면서 느낀 점",
			"content_html": "<p>회사 프로젝트로 iframe을 다루게 되면서 알게된 것들을 정리하겠습니다.</p>\n<p>iframe은 개인적으로 사용하는 걸 꺼리는 편입니다.\n이유는 무겁기 때문인데요, 브라우저 내부에 하나의 브라우저를 더 띄우는 것은\n자바스크립트 환경이 독립적으로 하나 더 생성된다는 말이기도 합니다.</p>\n<p>iframe에 대한 자세한 내용은 <a href=\"https://developer.mozilla.org/ko/docs/Web/HTML/Element/iframe\">MDN</a> 같은 문서를 찾아보는게 가장 정확하고 좋습니다. (혹은 ecmascript 문서)</p>\n<p>제가 느낀점 중에 가장 기록해두고 싶은 것은 iframe과 호스트의 이벤트 관계입니다.</p>\n<p>예를 들어 호스트의 html 태그에 대한 클릭 이벤트를 걸어놓았다고 가정합시다.</p>\n<p>이 때, iframe 내부의 텍스트에도 클릭 이벤트가 발동할까요?</p>\n<p>아래 예제의 HTML을 보시면 host에는 event를 걸어두고 iframe에는 걸어두지 않았습니다.</p>\n<p>iframe은 html &gt; iframe의 관계를 가지고 있어서 호스트의 이벤트도 발동 할 것이다! 라고 생각하면 안됩니다.</p>\n<script async=\"\" src=\"https://jsfiddle.net/zoo385/62xfc3pj/embed/js,html,css,result/dark/\"></script>\n<p>그럼 어떻게 이런 문제를 해결해야 할까요?\n바로 호스트에서 iframe내부에 접근하는 방법을 사용하는 것입니다.</p>\n<p><a href=\"https://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_iframe_contentdocument\">예시: w3schools</a></p>\n<p>위 예시를 보면 본인의 Domain 하에 있는 사이트라면 조작이 가능합니다. (CORS 에러에 무관한)</p>\n<p><strong>fiddle 예시 처럼 구글을 띄워놓고 내가 심어둔 이벤트가 발동하게끔 코드를 짜면 안됩니다.</strong></p>\n<p>(위 예시의 src 파일이 htm인 것은 무시하셔도 됩니다. (같은 뜻임))</p>\n",
			"date_published": "2023-05-20T01:22:40Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/PROBLEMS/PRINGTING_STARS/printing%20star%20stair%202%20and%20pyramid/",
			"url": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/PROBLEMS/PRINGTING_STARS/printing%20star%20stair%202%20and%20pyramid/",
			"title": "printing star stair 2",
			"content_html": "<p>좌우 반전인 계단을 만들어보자</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Stair2</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> rows <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> rows<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> rows <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token char\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-shell\" tabindex=\"0\"><code class=\"language-shell\">      *\n     **\n    ***\n   ****\n  *****\n ******</code></pre>\n<p>여기서 잠깐 피라미드에 대해 설명하겠습니다.</p>\n<p>피라미드와 역방향 계단찍기는 아주 약간의 차이를 빼고는 거의 같은 코드입니다.</p>\n<p>바로 별찍기를 담당하는 반복문의 print 함수에 공백 문자가 하나 추가되었다는 것입니다.\n이는 역방향 계단을 피라미드로 바꿔놓습니다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Pyramid</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> rows <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rows<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> rows <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"* \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre><code>_____* \n____* * \n___* * * \n__* * * * \n_* * * * * \n</code></pre>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/rxtjGnm1py-1200.webp\" width=\"100%\" height=\"auto\" alt=\"startable 예시 이미지\" loading=\"lazy\" decoding=\"async\"></div>\n<p>이런 별찍기 문제를 푸는 경우 그림을 그려보는 것이 아주 좋은 풀이법이 됩니다.</p>\n<p>반복문이 중첩 구조를 이루고 있고,\n중첩 내부에 다시 반복문이 여러개 들어가기 시작하면 아무래도 머리속으로\n그려내기가 쉽지 않습니다. 🤯</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\">\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> rows <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rows<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> rows <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"* \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>이런 코드만 보고 바로 이해를 한다는건 쉽지 않습니다.\n무엇을 뜻하는지도 모르겠고 변수명도 의미가 없기 때문이죠</p>\n<p>코드를 좀 수정해봅시다.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\">\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> rows <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> row <span class=\"token operator\">&lt;</span> rows<span class=\"token punctuation\">;</span> row<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// 빈칸을 찍는다.</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> empty <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> empty <span class=\"token operator\">&lt;=</span> rows <span class=\"token operator\">-</span> row<span class=\"token punctuation\">;</span> empty<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">// 별을 찍는다.</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> star <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> star <span class=\"token operator\">&lt;=</span> row<span class=\"token punctuation\">;</span> star<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"* \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">// 다 찍었으니 다음 줄로 넘어간다.</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span></code></pre>\n<p>이제 좀 보기가 편해졌을지 모르겠습니다. 반복문의 변수를 empty를 찍는 용도\nstar를 찍는 용도로 나누어 보았습니다.</p>\n<p>하지만 무엇보다 중요한건 왜 이런 함수가 나오는가? 입니다.</p>\n<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/rxtjGnm1py-1200.webp\" width=\"100%\" height=\"auto\" alt=\"startable 예시 이미지\" loading=\"lazy\" decoding=\"async\"></div>\n<p>다시 위 이미지를 보면 공백을 4개 찍습니다.\n4개는 어떻게 나온걸까요? 역계단의 공백 4개를 찍은 것과 같습니다.\n하지만 피라미드라 하면 이렇게 생각 할 수 있습니다.</p>\n<p>(공백은 설명시에 안좋으니 공백은 a로 별은 ⭐️로 찍겠습니다.)</p>\n<p>aa⭐️aa</p>\n<p>a⭐️⭐️⭐️a</p>\n<p>⭐️⭐️⭐️⭐️⭐️</p>\n<p>네 맞습니다. 이것도 피라미드입니다. 그냥 피라미드 모양이면 다 피라미드이죠</p>\n<p>그렇다면</p>\n<p>aaaa⭐️</p>\n<p>aaa⭐️a⭐️</p>\n<p>aa⭐️a⭐️a⭐️</p>\n<p>a⭐️a⭐️a⭐️a⭐️</p>\n<p>이것도 피라미드라고 할 수 있겠습니다.\n그것도 rows의 갯수만큼 나온 피라미드입니다.</p>\n<p>감사합니다.</p>\n",
			"date_published": "2023-05-19T23:30:13Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/PROBLEMS/PRINGTING_STARS/printing%20star%20stair%201/",
			"url": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/PROBLEMS/PRINGTING_STARS/printing%20star%20stair%201/",
			"title": "printing star stair 1",
			"content_html": "<p>계단을 만들어보자.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Stair</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> rows <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> rows<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token char\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-shell\" tabindex=\"0\"><code class=\"language-shell\">*\n**\n***\n****\n*****</code></pre>\n",
			"date_published": "2023-05-19T23:26:54Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/LOGIC/permutation/",
			"url": "https://zerozoo-a.github.io/blog/CS/LOGIC/permutation/",
			"title": "permutation",
			"content_html": "<p>nPr 계산</p>\n<p>3P2은 3개 중 2개를 뽑아 줄 세우는 경우의 수</p>\n<p>{1, 2, 3}중 2개를 뽑아 줄을 세우면</p>\n<p>{1, 2}를 뽑아 줄을 세울 수 있겠습니다.</p>\n<p>{1, 2}, {2, 1} 2개가 나왔습니다.</p>\n<p>{1, 3}도 2개가 나오겠죠\n{2, 3}도 2개가 나올 것입니다.</p>\n<p>이렇게 총 6개가 나오게 됩니다.</p>\n<p>공식은 3 * 2!이 됩니다.</p>\n<p>여기에 combination은 이를 2!으로 나누어 주는 것입니다.\nnCr이라고 씁니다.</p>\n<p>permutation을 계산하는 함수를 만들기 위해서는 중첩된 반복문을 돌게됩니다.</p>\n<p>예를 들어 {1, 2, 3}의 permutation을 계산하겠습니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i1<span class=\"token operator\">!=</span>i2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            a<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i3<span class=\"token operator\">!=</span>i1 <span class=\"token operator\">&amp;&amp;</span> i3<span class=\"token operator\">!=</span>i2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i1<span class=\"token punctuation\">,</span>i2<span class=\"token punctuation\">,</span>i3<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>배열 [1, 2, 3]을 돌면서 경우의 수를 계산하기 위해서는\n첫번째 자리가 1이면서,\n두번째 자리가 2,\n세번째 자리가 3인 경우</p>\n<p>첫번째 자리가 1이면서,\n두번째 자리가 3,\n세번째 자리가 2인 경우</p>\n<p>이런식으로 배열을 순회하게 됩니다.</p>\n<p>if문에서 각 자리수가 중복되지 않게 해주는 것입니다.\n반복문을 그냥 두게 되면</p>\n<p>첫번째 자리가 1이면서,\n두번째 자리가 1,\n세번째 자리가 1인 경우를 계산하게 됩니다.</p>\n<p>이 경우를 건너뛰게 해주는 것이죠</p>\n<p>감사합니다.</p>\n",
			"date_published": "2023-05-14T19:51:54Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/LOGIC/p%20and%20q/",
			"url": "https://zerozoo-a.github.io/blog/CS/LOGIC/p%20and%20q/",
			"title": "p and q",
			"content_html": "<p>명제: 만약 0이 홀수라면, 2080년 월드컵은 미국에서 열린다.</p>\n<p>위 명제는 참일까 거짓일까?</p>\n<p>우선 0이 홀수가 아니다,\n2080년에 월드컵이 미국에서 열릴지도 모르지만 아닐 수도 있다.</p>\n<p>만약 0이 홀수라면, 2080년 월드컵은 미국에서 열린다.</p>\n<p>p이면 q이다. 라는 명제에서 p가 거짓이면 전체는 참이 된다.</p>\n<p>만약 0이 홀수면 2080년에 미국에서 월드컵이 열린다는게 참이라는 말이다.\n언뜻 보면 거짓으로 보이는데 이는 명백히 참이다.</p>\n<p>이를 이해하기 쉽게 문제를 다르게 변경해보자</p>\n<p>거짓이면 참이다 -&gt; 참 =&gt; 0 == 1(p)이면 1 == 1(q)이다. p와 무관하게 q는 참이다.</p>\n<p>참이면 참이다 -&gt; 참 =&gt; 0 == 0(p)이면 1 == 1(q)이다. 이는 p와 q가 모두 참이다.</p>\n<p>거짓이면 거짓이다 -&gt; 참 =&gt; 0 == 1(p)이면 1 == 2(q)이다. 이는 p와 q가 모두 거짓이므로 참이다.</p>\n<p>참이면 거짓이다 -&gt; 거짓 =&gt; 0 == 0(p)이면 1 == 2(q)이다. 이는 p가 참이고 q가 거짓이므로 거짓이다.</p>\n<p>p, q는 명제이고, p -&gt; q에서 거짓인 경우는 p가 참이고 q가 거짓인 경우밖에 없다.</p>\n<p>따라서 p -&gt; q가 거짓일 때,</p>\n<p>~p -&gt; q는 참인가 거짓인가</p>\n<ul>\n<li>거짓 -&gt; 거짓이므로 참이다.</li>\n</ul>\n<p>p v q는 참인가 거짓인가</p>\n<ul>\n<li>참 || 거짓이므로 참이다.</li>\n</ul>\n<p>q -&gt; p는 참인가 거짓인가</p>\n<ul>\n<li>거짓 -&gt; 참이므로 참이다.</li>\n</ul>\n<hr>\n<table class=\"AmHvQTiv\" data-v-82945452=\"\"><tbody data-v-82945452=\"\"><tr data-v-82945452=\"\"><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">논리 연결사</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">논리적 기능</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">종류</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">일상적 표현</div></td></tr><tr data-v-82945452=\"\"><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">¬</mi></mrow><annotation encoding=\"application/x-tex\">\\neg</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">¬</span></span></span></span><a class=\"E0TE-D5l\" href=\"https://zerozoo-a.github.io/blog/CS/LOGIC/p%20and%20q/\" data-v-82945452=\"\"><span id=\"rfn-3\" data-v-82945452=\"\"></span>[a]</a> 또는 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∼</mo></mrow><annotation encoding=\"application/x-tex\">\\sim</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">∼</span></span></span></span></div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">부정</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">부정문</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">~이 아니다(not ~).</div></td></tr><tr data-v-82945452=\"\"><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∧</mo></mrow><annotation encoding=\"application/x-tex\">\\wedge</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.55556em;vertical-align:0em;\"></span><span class=\"mord\">∧</span></span></span></span><a class=\"E0TE-D5l\" href=\"https://zerozoo-a.github.io/blog/CS/LOGIC/p%20and%20q/\" data-v-82945452=\"\"><span id=\"rfn-4\" data-v-82945452=\"\"></span>[a]</a> 또는 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">&amp;</mi></mrow><annotation encoding=\"application/x-tex\">\\&amp;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">&amp;</span></span></span></span></div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">연언</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">연언문</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">그리고, 그러나, 그럼에도 불구하고(and)</div></td></tr><tr data-v-82945452=\"\"><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∨</mo></mrow><annotation encoding=\"application/x-tex\">\\vee</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.55556em;vertical-align:0em;\"></span><span class=\"mord\">∨</span></span></span></span></div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">선언</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">선언문</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">또는(or)</div></td></tr><tr data-v-82945452=\"\"><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span></div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">단순함축</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">조건문</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">만일~이라면, ~(if~, then~)</div></td></tr><tr data-v-82945452=\"\"><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>←</mo></mrow><annotation encoding=\"application/x-tex\">\\leftarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">←</span></span></span></span></div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">단순동치</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">쌍조건문</div></td><td data-v-82945452=\"\"><div class=\"mWPz-Xlk\" data-v-82945452=\"\">~일 경우 그리고 그 경우에만 ~(if and only if<a class=\"E0TE-D5l\" href=\"https://zerozoo-a.github.io/blog/CS/LOGIC/p%20and%20q/\" data-v-82945452=\"\"><span id=\"rfn-5\" data-v-82945452=\"\"></span>[5]</a>)</div></td></tr></tbody></table>",
			"date_published": "2023-05-14T14:28:45Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/PROBLEMS/card/",
			"url": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/PROBLEMS/card/",
			"title": "card 문제",
			"content_html": "<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/k5r318tyQj-1200.webp\" width=\"100%\" height=\"auto\" alt=\"card 문제\" loading=\"lazy\" decoding=\"async\"></div>\n<p>간단해보이지만 간단하지 않은 문제이다.</p>\n<p>주장: 카드의 앞면이 D인 경우 해당 카드의 반대면은 3이라고 주장</p>\n<p>카드를 최소한으로 뒤집어서 해당 주장이 타당하다는 것을 증명하려면 어떤 카드를 뒤집어야 하는가?\nD, F, 3, 7이라는 카드들 중에서 어떤 카드를 뒤집어야 주장을 증명 할 수 있을까</p>\n<p>우선 D를 뒤집어봐야 한다는데에 이견은 없을 것이다.\nD를 뒤집어 봐서 3이라면 주장은 참이다.</p>\n<hr>\n<p>그럼 F를 뒤집는건 어떨지 생각해보자.\nF를 뒤집어서 3인 경우엔 주장이 거짓이 되는가?\n아니다. F 뒤에 3이 와도 주장은 참이다.</p>\n<p>따라서 F를 뒤집어 볼 필요는 없다.</p>\n<p>여기서 F 뒤에 3이 있을 수 있지 않냐라고 할 수 있는데,\nF뒤에 3이 있어도 해당 주장이랑은 아무 상관이 없다.</p>\n<hr>\n<p>3을 뒤집어 보는건 어떨지 생각해보자.\n3을 뒤집어서 D일 경우 해당 주장은 참이다.\n하지만 D가 아닐경우는 어떨까?</p>\n<p>3 뒤에 무조건 D만 올 수 있다는 조건은 없다.\n3을 뒤집어 A인 경우에도 주장은 참이다.</p>\n<p>따라서 3도 뒤집어 볼 필요는 없다.</p>\n<hr>\n<p>7을 뒤집어 보는 것은 어떨까?</p>\n<p>7을 뒤집어서 앞면이 D인 경우 해당 주장은 거짓이 된다.\n3뒤에 D가 오는 경우는 주장에 의해 참이 되는데</p>\n<p>7뒤에 D가 오는 경우는 주장이 거짓임을 나타낸다.</p>\n<p>카드의 앞면이 D인 경우 뒷면은 3이여야 하는데\n뒷면인 7의 앞면이 D라면 주장의 모순이기 때문이다.</p>\n<p>따라서 정답은 D와 7이다.</p>\n",
			"date_published": "2023-05-12T23:18:00Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/BROWSER/deem%20effect%EB%A5%BC%20%EC%B2%98%EB%A6%AC%ED%95%98%EC%9E%90/",
			"url": "https://zerozoo-a.github.io/blog/CS/BROWSER/deem%20effect%EB%A5%BC%20%EC%B2%98%EB%A6%AC%ED%95%98%EC%9E%90/",
			"title": "deem effect를 처리하자",
			"content_html": "<div>\n<img alt=\"뭔가 사라지는 인간의 그림\" src=\"https://www.shutterstock.com/image-vector/concept-passing-time-man-who-260nw-1749497999.jpg\">  \n<a href=\"https://www.shutterstock.com/ko/search/disappear\">출처</a>\n</div>\n개인적인 일로 바쁜와중에 글을 써봅니다.\n<p>frontend 개발자라면 deem effect를 가끔 구현 할 일이 생깁니다.\n이번에 제가 effect를 구현하면서 마주한 문제와 해결 방법에 대해 작성해봅니다.</p>\n<p>해결은 framework에 관계없이 바닐라js만을 사용하겠습니다.</p>\n<p>browser 상에서 동작하는 것을 기본으로 합니다.</p>\n<p>deem이라는 것은 기본적으로 애니메이션을 동반하게 됩니다.</p>\n<iframe src=\"https://giphy.com/embed/AQRapWCgC7dThyVEYb\" width=\"480\" height=\"270\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen=\"\"></iframe><p><a href=\"https://giphy.com/gifs/bandainamco-dark-souls-dsr-remastered-AQRapWCgC7dThyVEYb\">via GIPHY</a></p>\n<p>어두웠다가 밝아지고 밝아졌다 어두워지는 등의 애니메이션이 들어가게 됩니다.</p>\n<p>deem이 없는 상태</p>\n<p>deem 처리가 된 상태</p>\n<p>deem을 종료하는 액션이 발생</p>\n<p>deem이 종료된 상태</p>\n<p>간략하게 4가지 스텝으로 나누고 이에 시간을 두어 이펙트를 주면 애니메이션이 되는 것이죠</p>\n<p>제가 마주한 문제는 바로 마지막 deem이 종료된 상태입니다.</p>\n<p>무엇이 문제일까요?</p>\n<p>바로 deem이 종료되면 해당 DOM은 더 이상 쓸모가 없기에 지워주려한다! 라는 점이 문제입니다.</p>\n<p>좀 더 자세히 설명하면</p>\n<p>deem의 종료 animation이 2초라고 가정합시다.\ndeem을 종료시키는 event가 발생하고 어떤 상태 값이 변경되면 해당 DOM을 DOM tree에서 지우려 합니다.</p>\n<p>보통 framework에서는 if 혹은 삼항연산자를 통해 해당하는 DOM을 지워주곤 합니다.</p>\n<p><strong>그럼 놀랍게도 animation이 끝나기도 전에 DOM이 삭제됩니다.</strong></p>\n<p>그렇습니다. js는 animation이 끝나고 DOM을 삭제하는 것이 아니라 의존하고 있는 상태값의 변경에 따라 DOM을 삭제합니다.</p>\n<p>CSS IN JS를 사용하거나 한다면 JS를 더 사용해 이를 해결 할 수도 있겠습니다. 혹은 timer등을 걸어두어도 해결이 가능하겠죠</p>\n<p>하지만 전 위 방법이 지저분하다는 느낌을 강하게 받았습니다.</p>\n<p>현재는 JS의 많은 framework들이 각자의 lifecycle 위에서 코드를 짜고 직접 DOM에 개입하는 것은 지양하도록 가이드합니다.</p>\n<p>맞습니다. DOM을 직접 건들게 되면 다른 개발자가 보기에 framework에서 가이드하는 패턴이 아닌 JS가 브라우저를 직접 조작하게 되는 것이니까요 코드의 일관성이 깨지게 됩니다.</p>\n<p>그건 그거고 우선 문제부터 해결해봅시다.</p>\n<p>문제의 해결 방법은 간단합니다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> animated <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".animated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nanimated<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"animationend\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Animation ended\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>바로 animationed를 사용하는 것입니다.\n특정 DOM node가 css의 특정 animation을 구독하고\nanimation이 종료되면 해당 소식을 전파받고 callback 함수를 실행합니다.</p>\n<p>이 방법은 DOM node에 직접 접근하여 이벤트를 등록하는 것입니다.</p>\n<blockquote>\n<p>DOM node에 이벤트가 발생했을 때 해당 callback을 실행시켜주면 그 때 원하는 DOM을 삭제해주세요\n그러면 animation이 종료된 후에 DOM노드가 삭제됨을 보장합니다.</p>\n</blockquote>\n<p>이제 이를 framework에 맞게 변경하면 되는데 react, vue같은 경우에는\n각 framework에서 제공하는 ref 함수가 존재합니다.\n해당 ref를 통해 DOM을 특정하고 위의 코드를 적절히 녹여내면 되겠습니다.</p>\n",
			"date_published": "2023-05-09T22:09:01Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/ETC/operator%20%3C%EC%9D%98%20%EC%84%B1%EC%A7%88/",
			"url": "https://zerozoo-a.github.io/blog/CS/ETC/operator%20%3C%EC%9D%98%20%EC%84%B1%EC%A7%88/",
			"title": "operator &lt;의 성질",
			"content_html": "<p>operator를 알게 모르게 자주 사용하는데\ncs에서 어떻게 이 operator를 사용하는지 보자. 아래는 js의 예제이다.</p>\n<p>다른 언어(c++)등은 이 operator overloading을 통해 해당 로직을 최적화 한다 ;;;;</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\na <span class=\"token operator\">&lt;</span> a <span class=\"token comment\">// false 비반사성 (irreflexivity)</span>\na <span class=\"token operator\">></span> a <span class=\"token comment\">// false 비대칭성 (asymmertry)</span>\n\n<span class=\"token comment\">// a &lt; b가 참이고 b &lt; c가 참이면 a &lt; c가 참이다. 이는 전이성(transitivity)이라한다.</span>\n<span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> b <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">&lt;</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// a &lt; b, b &lt; a가 모두 거짓이면 a와 b는 같은 값으로 간주한다 (숫자 한정)</span>\na <span class=\"token operator\">&lt;</span> b <span class=\"token comment\">// false</span>\nb <span class=\"token operator\">></span> a <span class=\"token comment\">// false</span>\na <span class=\"token operator\">==</span> b <span class=\"token comment\">// 간주한다</span>\n\n<span class=\"token comment\">// a == b &amp;&amp; b == c 이므로 a == c라 한다. 이는 상등 관계의 전이성(transitivity of equivalence)</span></code></pre>\n",
			"date_published": "2023-05-03T23:05:33Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/SEARCH/binarySearch%20JS/",
			"url": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/SEARCH/binarySearch%20JS/",
			"title": "leetcode 704. binarySearch",
			"content_html": "<p>JS버전의 binary search</p>\n<p><code>binarySearch</code> = 재귀</p>\n<p><code>binarySearch2</code> = 반복문</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">binarySearch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> mid <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">>=</span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> answer <span class=\"token operator\">=</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">answer: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>answer<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * \n * @param {number[]} arr \n * @param {number} x \n * @returns \n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">binarySearch2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> mid <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n      left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      right <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> answer2 <span class=\"token operator\">=</span> <span class=\"token function\">binarySearch2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">answer2: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>answer2<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n",
			"date_published": "2023-04-25T15:15:05Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/SEARCH/findMaxDivideAndConquer/",
			"url": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/SEARCH/findMaxDivideAndConquer/",
			"title": "findMax divide and conquer",
			"content_html": "<p>전형적인 트리 구조의 재귀형 문제이다.</p>\n<p>그리디하게 문제를 풀어낼 수 있지만,\n해당 방법 이외의 방법으로 O(nlogn)의 속도를 내는 방법은\n아래와 같이 재귀적으로 배열을 쪼개 들어가면서 가장 큰 값을 찾아 올려주는 것이다.</p>\n<p>js는 꼬리재귀 최적화를 안해주므로 알아서 최적화를 해야한다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">/**\n *\n * @param {number[]} arr\n * @param {number} start\n * @param {number} end\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">max</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">===</span> end<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> leftMax <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> rightMax <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftMax <span class=\"token operator\">></span> rightMax<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> leftMax<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> rightMax<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">71</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 71</span></code></pre>\n",
			"date_published": "2023-04-24T23:04:46Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/OPTIMIZATION/TOC%20in%20kotlin/",
			"url": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/OPTIMIZATION/TOC%20in%20kotlin/",
			"title": "TOC in kotlin",
			"content_html": "<pre class=\"language-kt\" tabindex=\"0\"><code class=\"language-kt\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">fac</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">fac2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">tailrec</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">fac</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> output<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> output<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token function\">fac</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> output <span class=\"token operator\">*</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">fac2</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> output<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> _num <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> _output <span class=\"token operator\">=</span> output<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>_num <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        _output <span class=\"token operator\">*=</span> _num<span class=\"token punctuation\">;</span>\n        _num <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> _output\n<span class=\"token punctuation\">}</span></code></pre>\n",
			"date_published": "2023-04-21T15:17:42Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/SEARCH/leetcode%20704.%20binarySearch/",
			"url": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/SEARCH/leetcode%20704.%20binarySearch/",
			"title": "leetcode 704. binarySearch",
			"content_html": "<pre class=\"language-md\" tabindex=\"0\"><code class=\"language-md\">Given an array of integers nums \nwhich is sorted in ascending order,\nand an integer target, \nwrite a function to search target in nums.\n오름차순으로 정렬된 배열과 배열에서 찾으려는 숫자를 입력으로 받는다.\n \nIf target exists, then return its index. \nOtherwise, return -1.\nYou must write an algorithm \nwith O(log n) runtime complexity.\n\n있으면 index 값을 없으면 -1을 반환하라.\n제한은 O(log n) runtime complexity를 가진다.</code></pre>\n<pre class=\"language-md\" tabindex=\"0\"><code class=\"language-md\"><span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">Example 1:</span><span class=\"token punctuation\">**</span></span>\n\n<span class=\"token code-snippet code keyword\">`Input: nums = [-1,0,3,5,9,12], target = 9`</span>\n<span class=\"token code-snippet code keyword\">`Output: 4`</span>\n\nExplanation: 9 exists in nums and its index is 4\nExample 2:\n\nInput: nums = [-1,0,3,5,9,12], target = 2\nOutput: -1\nExplanation: 2 does not exist in nums so return -1</code></pre>\n<pre class=\"language-kts\" tabindex=\"0\"><code class=\"language-kts\"><span class=\"token comment\">// 해답코드는 아래와 같다</span>\n<span class=\"token keyword\">import</span> kotlin<span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">.</span>floor\n<span class=\"token keyword\">class</span> Solution <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">:</span> IntArray<span class=\"token punctuation\">,</span> target<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> right <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> pivot <span class=\"token operator\">=</span> <span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>pivot<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> pivot<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>pivot<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                left <span class=\"token operator\">=</span> pivot <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>pivot<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                right <span class=\"token operator\">=</span> pivot <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위 문제의 핵심은 정렬 되어진 값을 받는다는 것이다.</p>\n<p>정렬이 이미 오름차순으로 되어 있기 때문에 오름차순 정렬을 적극 활용하면 된다.</p>\n<p>처음 입력받은 배열의 0번째 인덱스를 <code>left</code> 배열의 마지막 인덱스를 <code>right</code>라고 정의하자.\n배열의 중앙값을 찾아내어야 하는데 실수 범위로 확장되므로 이를 적절히 수정해주도록 하자.\n이는 배열의 중앙을 나타내는 <code>pivot</code>이라 하겠다.</p>\n<p>중앙 값을 찾아내었는데 해당 값이 찾고 있는 target 값이 맞다면 반환하고 끝.</p>\n<p>중앙 값이 target 값 보다 크다면 <code>right</code> 포인터를 중앙값 - 1 만큼 옮겨준다.</p>\n<p><code>[1, 2, 3, 4, 5]</code> 이러한 배열이 있을 때 현재 <code>pivot</code>은 3 찾는 값이 2라고 하자.\n<code>right</code>포인터는 5에 가있으므로 <code>right</code>포인터는 2까지 이동해주면 된다.</p>\n<p>이제 제외 되어진 값들을 빼면 <code>[1, 2]</code>가 남게 된다. 반복문이 돌면서 답을 찾게 된다.</p>\n<p>이렇게 찾는 범위를 반씩 툭툭 잘라 버리기 때문에 O(log n)이라는 효율이 나올 수 있다.\nc like언어들은 전부 위의 방법을 통해 문제를 풀 수 있다.</p>\n",
			"date_published": "2023-04-21T00:15:42Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/DATA_STRUCTURE/TREE/recursive_traversal/",
			"url": "https://zerozoo-a.github.io/blog/CS/DATA_STRUCTURE/TREE/recursive_traversal/",
			"title": "재귀 순회를 통해 트리 구조 돌아다니기 (recursive)",
			"content_html": "<p>~ 재미있는 재귀순회 이야기 ~</p>\n<p>재귀 순회는 구현이 매우 간단하다는 장점이 있다.</p>\n<p>작은 크기의 트리라면 이정도의 구현만으로 쉽게 구현이 가능하다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">N</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span> left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * \n * @param {N} root \n * \n * 전위 순회는 루트 -> 왼쪽 자식 -> 오른쪽 자식 순으로 순회한다.\n * \n * 순회의 포인트는 왼쪽 자식이 없다면 오른쪽 자식으로 점프하는게 아닌,\n * 왼쪽 자식이 없으므로 node의 오른쪽 자식을 재귀 함수의 인자로 넣는다는 것이다.\n * 재귀 함수는 매번 해당 함수를 노드의 뿌리로 인식하기 때문에 왼쪽과 오른쪽 자식을\n * 재귀호출하게 된다.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">preOrderTraversal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n    1\n   /  \\\n  2    3\n /  \\    \n4    5 \n */</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">postOrderTraversal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">inOrderTraversal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> tree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"🚀 ~ file: preorderTraversal.js:24 ~ tree:\"</span><span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/*\n    1\n   /  \\\n  2    3\n /  \\    \n4    5 \n\n뿌리 -> 왼쪽 -> 오른쪽\n\n결과: 1 > 2 > 4 > 5 > 3\n구조: root(1) == 1 -> root(1).left == 2 -> root(1).left.left == 4 -> root(1).left.right == 5 -> root(1).right == 3\n */</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">preOrderTraversal</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, 4 ,5 ,3]</span>\n<span class=\"token comment\">/*\n    1\n   /  \\\n  2    3\n /  \\    \n4    5 \n\n왼쪽 -> 오른쪽 -> 뿌리\n\n결과: 4 > 5 > 2 > 3 > 1\n구조: root(1).left.left == 4 -> root(1).left.right == 5 -> root(1).left == 2 -> root(1).right == 3 -> root(1) == 1\n */</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">postOrderTraversal</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [4, 5, 2, 3, 1]</span>\n\n<span class=\"token comment\">/*\n    1\n   /  \\\n  2    3\n /  \\    \n4    5 \n\n왼쪽 -> 뿌리 -> 오른쪽\n\n결과: 4 > 2 > 5 > 1 > 3\n */</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">inOrderTraversal</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span>\n\n</code></pre>\n",
			"date_published": "2023-04-19T14:20:00Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/DATA_STRUCTURE/TREE/Tree_preorder/",
			"url": "https://zerozoo-a.github.io/blog/CS/DATA_STRUCTURE/TREE/Tree_preorder/",
			"title": "Tree preorder (stack)",
			"content_html": "<p>~ 재미있는 전위순회 이야기 ~</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">N</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * @param {N} root \n * @returns \n * \n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">preorderTraversal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>root<span class=\"token punctuation\">.</span>val<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">preorderTraversal</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">preorderTraversal</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * @param {N} root\n * \n * stack: [N{root}]\n * root 노드가 왼쪽 자식 오른쪽 자식이 존재한다면\n * \n * 오른쪽 자식 노드를 stack에 push하고 \n * 왼쪽 자식 노드를 stack에 push하면\n * \n * 왼쪽 자식 노드가 항상 stack의 위쪽에 위치하게 된다.\n * stack: [N{오른쪽 자식}, N{왼쪽 자식}]\n * 위와 같은 형태로 stack은 쌓이게 된다.\n * \n * 이제 반복문이 실행되면서 stack을 pop하게 되면 왼쪽 자식은 pop 되고\n * node = N{왼쪽 자식}이 된다. 이 상태로 다시 push를 하게 되면\n * \n * stack: [N{오른쪽 자식}, N{왼쪽 자식의 오른쪽 자식}, N{왼쪽 자식의 왼쪽 자식}]\n * 이를 반복하게 되는데 참으로 영리한 것이 pop은 O(1)연산으로 매우 빠르고\n * pop을 통해 계속 valuable한 왼쪽 자식을 DFS로 계속 찾아간다는 것이다.\n * \n * 또한 읽는 재미가 있다. (이해하기 위해선 잠깐 멈춰서 생각해야 하지만)\n * 더군다나 한 메모리 주소를 반복적으로 쓰고 지우기만 하기 때문에 메모리 효율성과 stack이 넘쳐 망해버릴 일이 없다는 것이 좋다.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">preorderTraversal2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n  <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nroot<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nroot<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nroot<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\nroot<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/*\n      1\n     / \\\n    2   3\n   / \\\n  4   5\n*/</span>\n\n<span class=\"token function\">preorderTraversal</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n<span class=\"token function\">preorderTraversal2</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n</code></pre>\n",
			"date_published": "2023-04-19T14:00:28Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/DATA_STRUCTURE/TREE/Tree_inorder/",
			"url": "https://zerozoo-a.github.io/blog/CS/DATA_STRUCTURE/TREE/Tree_inorder/",
			"title": "Tree inorder (stack)",
			"content_html": "<p>~ 재미있는 중위순회 이야기 ~</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">N</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span> left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * @param {N} root \n * \n *     1\n *    / \\\n *   2   3\n *      /  \\\n *     4    5\n * \n *  2 -> 1 -> 4 -> 3 -> 5\n * \n * tree가 이렇게 생겼다고 가정하자\n * \n * 중위순회는 왼쪽 -> 루트 -> 오른쪽 순으로 탐색하는 것을 의미한다.\n * 위의 트리를 기준으로 중위 순회를 거쳐 나온 답은 [2, 1, 4, 3, 5]가 나오면 된다.\n * \n * 이렇게 만들기 위해서는 두 가지가 필요하다.\n * \n * 1. 분석의 대상인 Binary Tree\n * 2. 값을 저장 할 stack\n * \n * tree와 stack은 궁합이 좋다.\n * \n * 과정을 수행 할 함수는 tree의 루트부터 탐색을 시작한다.\n * \n * currentNode를 stack에 push하고\n * currentNode = currentNode.left로 currentNode를 계속 초기화 한다.\n * tree의 왼쪽 자식의 끝까지 도달하면 자식 node들이 null이므로 왼쪽 자식을 찾아\n * 내려가는 프로세스는 중단된다.\n * \n * 마지막 유효한 값이 있는 왼쪽 자식은 stack에 저장되어 있게 된다.\n * 해당 stack을 pop하면서 값을 꺼내 result에 push한다.\n * currentNode를 currentNode의 오른쪽 자식으로 초기화 한다. \n * \n * 위 트리를 예로 들면 2의 왼쪽 자식이 null이므로 stack에서 꺼낼 준비가 되었다.\n * stack에서 2가 든 node를 꺼내어 값을 result에 밀어넣고 currentNode를 오른쪽 자식으로\n * 초기화한다.\n * \n * 하지만 오른쪽 자식도 null이다.\n * \n * 오른쪽 자식도 null이므로 stack을 다시 pop해 루트를 꺼내온다.\n * pop하면서 꺼내온 루트의 값을 result에 밀어넣고 currentNode를 오른쪽 자식으로 초기화한다.\n * 오른쪽 자식으로 초기화하면서 루트의 오른쪽 자식의 하위 트리의 왼쪽 자식부터 위의 과정을 반복하게 된다.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">inOrderTraversal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> currentNode <span class=\"token operator\">=</span> root\n\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> currentNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">)</span>\n      currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>left\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      currentNode <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n      currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>right\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* \n      1\n     / \\\n    2   3\n       /  \\\n      4    5\n*/</span>\n<span class=\"token keyword\">const</span> tree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">inOrderTraversal</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n",
			"date_published": "2023-04-18T15:02:24Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/BOOKS/JONGMAN/%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4_%EA%B3%BC%EC%A0%95%EC%9D%84_%EB%82%98%EB%88%84%EC%9E%90/",
			"url": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/BOOKS/JONGMAN/%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4_%EA%B3%BC%EC%A0%95%EC%9D%84_%EB%82%98%EB%88%84%EC%9E%90/",
			"title": "문제풀이 과정을 나누자",
			"content_html": "<p>종만북에서는 문제 풀이 과정을 나누길 강력하게 권장한다.</p>\n<p>이유는 단순하다.</p>\n<p>우선 알고리즘 문제는 보통 어렵고 지문 자체를 이해하는데 많은 시간이 걸릴 수 있다.\n따라서 당황하기 쉽다.</p>\n<p>당당하게 문제에 맞서기 위해서는 문제를 통과해 답에 접근하기까지 순서가 필요하다.</p>\n<ol>\n<li>\n<p>문제를 읽고 이해한다.</p>\n<ul>\n<li>많은 경우가 문제를 잘못 이해하고 쉐도우 복싱을 하는 경우가 많다. 이를 방지하자</li>\n</ul>\n</li>\n<li>\n<p>재정의와 추상화</p>\n<ul>\n<li>재정의를 한다는 것은 자신이 이해하기 쉬운 형태로 받아들인다는 것이다.</li>\n<li>추상화는 잘 이해한 문제에서 정답을 끌어내기 위한 부분을 수학적/전산학적 개념으로 재정의하는 것을 말한다.</li>\n<li>이 두가지가 완료되었다면 문제를 풀 수 있을지 없을지가 결정된다고 본다.\n이유는 간단한데 사실상 알고리즘 문제를 수학문제로 치환하였기 때문이다.\n수학 문제가 된 이상 당신이 이에 대한 이해와 개념 어느정도의 연습이 되어 있다면 당연하게 문제가 풀릴 것이고 그렇지 않다면 백날 풀어도 풀 수 있을지 없을지 모른다.</li>\n</ul>\n</li>\n<li>\n<p>계획 세우기</p>\n<ul>\n<li>여러 해법이 떠올랐다면 어떤 방법을 선택할지 계획을 세운다. 만약 아이디어가 하나 뿐이라면 자동적으로 스킵된다.</li>\n</ul>\n</li>\n<li>\n<p>계획 검증하기</p>\n<ul>\n<li>해당 계획을 머리속으로 굴려보자 실제 구현을 하기 전 마지막 점검을 하는 것인데 계획이 결과적으로 정답을 도출 할 수 있는지를 생각해보라는 것이다.</li>\n</ul>\n</li>\n<li>\n<p>계획 수행하기</p>\n<ul>\n<li>잘 구현을 하라는 말이다.</li>\n</ul>\n</li>\n<li>\n<p>회고하기</p>\n<ul>\n<li>알고리즘 문제는 꼴보기 싫어지는 속성이 있어서 한 번 풀어본 문제를 또 풀기 싫은 경우가 100% 이다.\n하지만 이런 문제를 또 풀어보거나 내 풀이와 다른 사람의 풀이를 비교해 본다면 해당 알고리즘을 더 능숙하게 사용 할 수 있을 뿐 아니라 다른 문제에도 자연히 손이가게 되는 능숙한 무기가 될 수 있다.</li>\n</ul>\n</li>\n</ol>\n",
			"date_published": "2023-04-14T00:51:28Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/Richard_Feynman_alogorithm/",
			"url": "https://zerozoo-a.github.io/blog/CS/ALGORITHMS/Richard_Feynman_alogorithm/",
			"title": "Richard_Feynman_alogorithm",
			"content_html": "<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/7sCSQM8IPN-278.webp\" width=\"100%\" height=\"auto\" alt=\"1. Writhe down the problem 2.  think very hard 3. Writhe down the answer\" loading=\"lazy\" decoding=\"async\"></div>\n<ol>\n<li>칠판에 문제를 적는다.</li>\n<li>골똘히 생각한다.</li>\n<li>칠판에 답안을 적는다.</li>\n</ol>\n",
			"date_published": "2023-04-12T23:36:22Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/BOOK/JONGMAN/%EC%9E%85%EB%AC%B8%EC%9E%90%EB%A5%BC_%EC%9C%84%ED%95%9C_%EC%BB%A4%EB%A6%AC%ED%81%98%EB%9F%BC/",
			"url": "https://zerozoo-a.github.io/blog/CS/BOOK/JONGMAN/%EC%9E%85%EB%AC%B8%EC%9E%90%EB%A5%BC_%EC%9C%84%ED%95%9C_%EC%BB%A4%EB%A6%AC%ED%81%98%EB%9F%BC/",
			"title": "입문자를 위한 커리큘럼",
			"content_html": "<p>종만북에서 권장하는 입문자를 위한 커리큘럼이다.</p>\n<table>\n<thead>\n<tr>\n<th>입문자를 위한 커리큘럼</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>문제 해결 전략</td>\n</tr>\n<tr>\n<td>코딩과 디버깅</td>\n</tr>\n<tr>\n<td>알고리즘의 시간 복잡도 분석</td>\n</tr>\n<tr>\n<td>무식하게 풀기 (brute force)</td>\n</tr>\n<tr>\n<td>분할 정복</td>\n</tr>\n<tr>\n<td>동적 계획법</td>\n</tr>\n<tr>\n<td>선형 자료 구조</td>\n</tr>\n<tr>\n<td>큐와 스택, 데크</td>\n</tr>\n<tr>\n<td>트리의 구현과 순회</td>\n</tr>\n<tr>\n<td>이진 검색 트리</td>\n</tr>\n<tr>\n<td>우선순위 큐와 힙</td>\n</tr>\n<tr>\n<td>그래프의 표현과 정의</td>\n</tr>\n<tr>\n<td>그래프의 깊이 우선 탐색</td>\n</tr>\n<tr>\n<td>그래프의 너비 우선 탐색</td>\n</tr>\n<tr>\n<td>최단 경로 알고리즘</td>\n</tr>\n</tbody>\n</table>\n",
			"date_published": "2023-04-12T11:20:00Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/CS/DATA_STRUCTURE/TREE/BST/",
			"url": "https://zerozoo-a.github.io/blog/CS/DATA_STRUCTURE/TREE/BST/",
			"title": "BST",
			"content_html": "<p>아래의 자료구조는 BinarySearchTree이다.</p>\n<p>특징은 아래와 같다.</p>\n<ul>\n<li>재귀적으로 구현되었다.\n<ul>\n<li>중위순회한다.</li>\n<li>재귀적으로 insert한다.</li>\n</ul>\n</li>\n</ul>\n<p>아래의 구조는 좋은 점이 한가지 정도 있다.</p>\n<p>그나마 외우기 편하다는 점이다.</p>\n<p>단점은 스택이 터질 것이라는 점이며 최적화가 필요하다는 점이다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">/**\n * example\n * new Node(3) // Node {data: 3, left: null, right: null}\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BinarySearchTree</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keys <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">of</span> keys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">targetNode<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>targetNode<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targetNode<span class=\"token punctuation\">.</span>data <span class=\"token operator\">></span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      targetNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>targetNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// key</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      targetNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>targetNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> targetNode<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> keys <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> bst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinarySearchTree</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bst<span class=\"token punctuation\">.</span><span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>bst<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n",
			"date_published": "2023-04-10T00:00:00Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/JS/libs/flat/",
			"url": "https://zerozoo-a.github.io/blog/JS/libs/flat/",
			"title": "중첩 배열을 평탄화하기",
			"content_html": "<h2 id=\"\" tabindex=\"-1\">중첩 배열을 평탄화 한다는 것의 의미 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/libs/flat/\">#</a></h2>\n<ul>\n<li>눈으로 보는게 가장 빠르다</li>\n</ul>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 중첩</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 평탄화</span></code></pre>\n<p>위와 같이 여러 배열이 중첩되어 있는 상태를</p>\n<p>아래와 같은 형태로 풀어낸다는 것이다.</p>\n<h2 id=\"-1\" tabindex=\"-1\">중첩 배열을 평탄화 해보기 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/JS/libs/flat/\">#</a></h2>\n<p>이런 저런 잡설을 늘어놓는 것 보다 코드를 이해하는 편이 도움이 될 수 있다.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">iter</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> iter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token function\">flat</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">yield</span> a<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b:\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>위 코드는 이러하다.</p>\n<p>배열을 받아 배열을 순회하며 순회한 인자가 배열인 경우 재귀적으로 파고들고\n아닌 경우 인자를 반환한다.</p>\n<p>이를 iterable 함수로 작성하면 된다.</p>\n",
			"date_published": "2023-04-03T00:00:00Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/wiki/11ty/css_config/",
			"url": "https://zerozoo-a.github.io/blog/wiki/11ty/css_config/",
			"title": "11ty post에 css 적용하기",
			"content_html": "<p>11ty의 폴더 구조는 jekyll과 매우 흡사합니다.</p>\n<p><code>_includes/layouts</code> 파일들이 들어가게 될 것인데요.</p>\n<pre class=\"language-shell\" tabindex=\"0\"><code class=\"language-shell\">_includes\n├── layouts\n│   ├── base.njk\n│   ├── home.njk\n│   └── post.njk\n└── postslist.njk</code></pre>\n<p>이런 식으로 폴더 구조를 잡게 됩니다.</p>\n<p>아무튼 css를 작성하고 이를 적용하고 싶은게 목적이죠</p>\n<ul>\n<li>참고로 post를 위해 작성한 md 파일은 html로 변환되어 브라우저에 render되므로 결과적으로는\ncss로 스타일을 입히게 됩니다.</li>\n</ul>\n<p>그럼 적당한 레이아웃 파일을 만들어주세요</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token comment\">/* css/style.css */</span>\n<span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-njk\" tabindex=\"0\"><code class=\"language-njk\"><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token variable\">layouts</span><span class=\"token operator\">/</span><span class=\"token variable\">goodLayout</span><span class=\"token punctuation\">.</span><span class=\"token variable\">njk</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token variable\">html</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token variable\">head</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token variable\">link</span> <span class=\"token variable\">rel</span><span class=\"token operator\">=</span><span class=\"token string\">\"stylesheet\"</span> <span class=\"token variable\">href</span><span class=\"token operator\">=</span><span class=\"token string\">\"css/style.css\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token variable\">head</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token variable\">html</span><span class=\"token operator\">></span></code></pre>\n<p>놀랍게도 적용이 잘 안될것입니다.</p>\n<p>이유는 11ty가 해당 파일의 존재를 아직 알아차리지 못하였기 때문입니다.</p>\n<p>11ty에는 config file이 존재하는데 프로젝트의 <code>root</code>에 <code>eleventy.config.js</code> 파일을 생성해주세요</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">eleventyConfig</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\televentyConfig<span class=\"token punctuation\">.</span><span class=\"token function\">addPassthroughCopy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string-property property\">\"/from\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/to\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위 설정은 key로 입력된 곳에 있는 파일을 to에 있는 곳으로 옮기겠다는 내용입니다.\n당연히 빌드된 결과물이 쌓일 output dir이 좋겠습니다.</p>\n<p><code>./public/css =&gt; _site/css</code> 이런식으로 이동이 됩니다.</p>\n<p>잘 조정이 되었는지 확인하려면 빌드를 해보세요!</p>\n",
			"date_published": "2023-04-01T00:00:00Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/wiki/11ty/new_blog/",
			"url": "https://zerozoo-a.github.io/blog/wiki/11ty/new_blog/",
			"title": "11ty를 통해 블로그를 새로 단장하기",
			"content_html": "<div class=\"img-container\"><img class=\"border-radius10\" src=\"https://zerozoo-a.github.io/img/IdthKOzqFA-350.webp\" width=\"100%\" height=\"auto\" alt=\"A possum parent and two possum kids hanging from the iconic red balloon\" loading=\"lazy\" decoding=\"async\"></div>\n<p>jekyll은 충분히 훌륭한 정적생성기이지만..</p>\n<p>💎 루비도 아주 좋은 언어이지만.. 내 숙련도가 부족하고 해당 언어의 환경을 능숙하게\n또 지속적으로 그 언어를 사용 할 여건이 되질 않아 늘 불만이 존재했다.</p>\n<p>이번에 javascript 기반의 정적생성기로 블로그를 전환하면서 해당 내용을 정리한 한글 블로그가\n눈에 띄질 않아 정리해보기로 했다.</p>\n<p>GH-Pages에 11ty SSG 블로그를 올리려면..</p>\n<ol>\n<li>\n<p>우선 적당히 github repo를 생성해줍니다.</p>\n</li>\n<li>\n<p>자신의 repo에서 settings에 들어갑니다.</p>\n</li>\n<li>\n<p>좌측의 pages 메뉴를 클릭하면 github pages에 대한 config를 할 수 있습니다.</p>\n</li>\n<li>\n<p>Source를 눌러 deploy from a branch로 변경합니다.</p>\n</li>\n<li>\n<p>branch는 gh-pages로 변경 폴더는 root로 둡시다.</p>\n</li>\n</ol>\n<p>이게 기본적인 github의 세팅입니다.</p>\n<p>11ty의 세팅은</p>\n<ol>\n<li>eleventy.config.js의 pathPrefix에 자신의 브랜치 이름을 적어주는 것입니다.</li>\n<li>그리고 모든 링크의 href에 대해 <code>url</code> 필터를 추가해줍시다.</li>\n</ol>\n<p>만약 본인이 생성한 브랜치가 특별한 브랜치인 github.io라고 한다면 pathPrefix를 굳이 해줄 필요가 없습니다.</p>\n<p>기본적으로 빌드와 배포는 github actions를 통해 이루어집니다.</p>\n<pre class=\"language-yml\" tabindex=\"0\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build Eleventy <span class=\"token comment\"># /root/.github/worflows/build.yml</span>\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> main <span class=\"token comment\"># 원하는 브랜치를 선택해주세요</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest <span class=\"token comment\"># 높은 버전을 씁시다.</span>\n\n    <span class=\"token key atrule\">strategy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">matrix</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>19.x<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 마찬가지로 높은 버전이 좋겠습니다.</span>\n\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v3 <span class=\"token comment\"># 높은 버전을 써줍시다.</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Use Node.js $NaN\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@v3\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> $NaN\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install dependencies &amp; build <span class=\"token comment\"># yarn을 쓰던 pnpm을 쓰던 상관 없겠죠?</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          npm ci \n          npm run build-ghpages          </span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> peaceiris/actions<span class=\"token punctuation\">-</span>gh<span class=\"token punctuation\">-</span>pages@v3\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">publish_dir</span><span class=\"token punctuation\">:</span> ./_site <span class=\"token comment\"># 원하는대로 빌드 결과물이 생성 될 곳을 정해주세요</span>\n          <span class=\"token key atrule\">github_token</span><span class=\"token punctuation\">:</span> $</code></pre>\n<p>이제 11ty 사이트에 방문해 적당한 starter project를 클론 받아와 올려줍니다.</p>\n<p>방금 생성한 repo에 올리면 됩니다\n클론받은 프로젝트마다 약간의 차이점이 존재하게 됩니다.</p>\n<h2 id=\"11ty\" tabindex=\"-1\">11ty <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/11ty/new_blog/\">#</a></h2>\n<p>11ty는 jekyll의 node.js 버전이라고 생각하면 좋다.\nhugo 또한 비슷하다.</p>\n<h2 id=\"deploy\" tabindex=\"-1\">deploy <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/11ty/new_blog/\">#</a></h2>\n<p>gh-pages를 통해 내보낸다.</p>\n<h2 id=\"jekyll\" tabindex=\"-1\">jekyll에 비해 장점 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/11ty/new_blog/\">#</a></h2>\n<p>장점은 node.js를 사용할 수 있다는 점이다.\njs npm 생태계를 좀 더 활용 할 수 있다.</p>\n<h2 id=\"jekyll-1\" tabindex=\"-1\">jekyll에 비해 단점 <a class=\"header-anchor\" href=\"https://zerozoo-a.github.io/blog/wiki/11ty/new_blog/\">#</a></h2>\n<p>커뮤니티나 역사가 오래되질 못하고 docs가 부실하다는 점이다.\n튜토리얼이 많이 부족해보이고 지속적인 관리가 될지 의문이다.\n회사가 붙어서 이를 체계적으로 강하게 관리해주지 않으면 jekyll + ruby3로 다시 갈아탈지도 모르겠다..</p>\n",
			"date_published": "2023-03-28T00:00:00Z"
		}
		,
		{
			"id": "https://zerozoo-a.github.io/blog/wiki/11ty/folder_and_config/",
			"url": "https://zerozoo-a.github.io/blog/wiki/11ty/folder_and_config/",
			"title": "폴더 단위로 layout 명시하기",
			"content_html": "<p>역시 하나 하나 docs를 탐독하다 보면 배우는 것들이 생기기 마련입니다.</p>\n<p>정붙이면 고향이라고 벌써 11ty의 좋은 점들이 조금씩 납득되고 있습니다.</p>\n<p>아무튼 블로그를 조금씩 제 입맛대로 수정하면서 배운 폴더단위 config를 알아봅시다.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">content\n├── blog\n│   ├── blog.11tydata.js\n│   └── wiki\n│       └── 11ty\n│           ├── css_config.md\n│           ├── folder_and_config.md\n│           ├── new_blog.md\n│           └── possum.png\n<span class=\"token punctuation\">..</span>.</code></pre>\n<p>현재 저의 블로그 디렉터리 구조는 위와 같은데요</p>\n<p>위 md 파일들 중에 묘하게 거슬리는 친구가 하나 보이실 것 같습니다.</p>\n<p>네 바로 <code>blog.11tydata.js</code> 입니다.\n이 파일은 뭐길레 md 파일들 한 가운데서 저렇게 있는걸까요?</p>\n<blockquote>\n<p>해당 파일은 바로 해당 파일이 존재하고 있는 위치와 그 위치의 하위 디렉터리들에 재귀적으로 해당 파일의 설정을 적용시키기 위해 있습니다.</p>\n</blockquote>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">tags</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t\t<span class=\"token string\">\"posts\"</span>\n\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string-property property\">\"layout\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"layouts/post.njk\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이렇게 생겼습니다.</p>\n<p>해당 dir 내부에 존재하는 파일들은\nposts라는 태그를 부여 받고 layout은 post.njk를 사용하라는 뜻이죠</p>\n<p>이러면 layout을 어디부터 어디까지 지정할지를 보다 편하게 명시할 수 있습니다.</p>\n<p>이런 기능은 참 괜찮네요!</p>\n",
			"date_published": "2023-03-27T00:00:00Z"
		}
		
	]
}
