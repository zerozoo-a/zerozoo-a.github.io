---
layout: layouts/base.njk
---
{# Only include the syntax highlighter CSS on blog posts #}
{# {%- css %}{% include "node_modules/prismjs/themes/prism-okaidia.css" %}{% endcss %} #}
{%- css %}{% include "public/css/prism-diff.css" %}{%- endcss %}
{%- css %}{% include "public/css/gh-md-dark.css" %}{%- endcss %}
{%- css %}{% include "public/css/gh-syntax.css" %}{%- endcss %}
<article>
	{% set absoluteUrl %}{{ page.url }}{% endset %}
	{% if(coverURL) %}
    <img class="big-cover-img" src={% convert coverURL, "0" %} alt="cover image" height="auto" />
	{% else %}
	{% endif %}

<h1>{{ title }}</h1>

<ul class="post-metadata pt-2">
	<li><time datetime="{{ page.date | htmlDateString }}">{{ page.date | readableDate }}</time></li>
	{%- for tag in tags | filterTagList %}
	{%- set tagUrl %}/tags/{{ tag | slugify }}/{% endset %}
	<li><a href="{{ tagUrl }}" class="post-tag">{{ tag }}</a>{%- if not loop.last %}, {% endif %}</li>
	{%- endfor %}
</ul>

{% if content | toc %}
		<aside>
			{{ content | toc | safe }}
		</aside>
{% endif %}

	<section class="post-content markdown-body" data-pagefind-body>
		{{ content | safe }}
	</section>
<br>
<br>
<br>


{%- if collections.posts %}
{%- set previousPost = collections.posts | getPreviousCollectionItem %}
{%- set nextPost = collections.posts | getNextCollectionItem %}
{%- if nextPost or previousPost %}
<ul>
	{%- if previousPost %}<li>Previous: <a href="{{ previousPost.url }}">{{ previousPost.data.title }}</a></li>{% endif %}
	{%- if nextPost %}<li>Next: <a href="{{ nextPost.url }}">{{ nextPost.data.title }}</a></li>{% endif %}
</ul>
{%- endif %}
{%- endif %}

</article>
<script type="text/javascript">
const article = document.querySelector("article");

// `document.querySelector` may return null if the selector doesn't match anything.
if (article) {
  const text = article.textContent;
  const wordMatchRegExp = /[^\s]+/g; // Regular expression
  const words = text.matchAll(wordMatchRegExp);
  // matchAll returns an iterator, convert to array to get word count
  const wordCount = [...words].length;
  const readingTime = Math.round(wordCount / 200);
  const badge = document.createElement("p");
  // Use the same styling as the publish information in an article's header
  badge.classList.add("color-secondary-text", "type--caption");
  badge.textContent = `읽는데 ⏱️ ${readingTime} 분 정도 소요됩니다.`

  // Support for API reference docs
  const heading = article.querySelector("h1");
  // Support for article docs with date
  const date = article.querySelector("time")?.parentNode;

  (date ?? heading).insertAdjacentElement("afterbegin", badge);
}
</script>